// Generated from Lexer_And_Parser/For_Java/Java20Parser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
const serializedATN = [4,1,126,2970,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,1,0,1,0,1,0,
1,1,1,1,3,1,504,8,1,1,2,1,2,3,2,508,8,2,1,3,1,3,3,3,512,8,3,1,4,1,4,1,5,
1,5,1,6,1,6,1,7,1,7,1,8,5,8,523,8,8,10,8,12,8,526,9,8,1,8,1,8,3,8,530,8,
8,1,9,1,9,3,9,534,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,3,12,543,8,12,1,
13,1,13,5,13,547,8,13,10,13,12,13,550,9,13,1,13,1,13,3,13,554,8,13,1,13,
3,13,557,8,13,1,14,1,14,1,14,3,14,562,8,14,1,14,5,14,565,8,14,10,14,12,14,
568,9,14,1,14,1,14,3,14,572,8,14,1,14,3,14,575,8,14,1,15,5,15,578,8,15,10,
15,12,15,581,9,15,1,15,1,15,3,15,585,8,15,1,15,1,15,1,15,5,15,590,8,15,10,
15,12,15,593,9,15,1,15,1,15,3,15,597,8,15,1,15,1,15,1,15,5,15,602,8,15,10,
15,12,15,605,9,15,1,15,1,15,3,15,609,8,15,3,15,611,8,15,1,16,1,16,1,17,5,
17,616,8,17,10,17,12,17,619,9,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,3,18,632,8,18,1,19,5,19,635,8,19,10,19,12,19,638,9,19,1,19,
1,19,1,19,5,19,643,8,19,10,19,12,19,646,9,19,1,19,1,19,5,19,650,8,19,10,
19,12,19,653,9,19,1,20,5,20,656,8,20,10,20,12,20,659,9,20,1,20,1,20,3,20,
663,8,20,1,21,1,21,1,22,1,22,1,22,1,22,5,22,671,8,22,10,22,12,22,674,9,22,
3,22,676,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,5,25,688,
8,25,10,25,12,25,691,9,25,1,26,1,26,3,26,695,8,26,1,27,5,27,698,8,27,10,
27,12,27,701,9,27,1,27,1,27,3,27,705,8,27,1,28,1,28,1,28,1,28,3,28,711,8,
28,1,29,1,29,1,29,3,29,716,8,29,1,30,1,30,1,30,3,30,721,8,30,1,31,1,31,1,
31,3,31,726,8,31,1,32,1,32,1,32,3,32,731,8,32,1,33,1,33,1,33,3,33,736,8,
33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,3,35,745,8,35,1,36,1,36,3,36,749,8,
36,1,37,3,37,752,8,37,1,37,5,37,755,8,37,10,37,12,37,758,9,37,1,37,5,37,
761,8,37,10,37,12,37,764,9,37,1,38,5,38,767,8,38,10,38,12,38,770,9,38,1,
38,1,38,1,39,5,39,775,8,39,10,39,12,39,778,9,39,1,39,1,39,1,39,1,39,5,39,
784,8,39,10,39,12,39,787,9,39,1,39,1,39,1,40,1,40,1,41,1,41,1,41,1,41,3,
41,797,8,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,
46,3,46,826,8,46,1,47,5,47,829,8,47,10,47,12,47,832,9,47,1,47,3,47,835,8,
47,1,47,1,47,1,47,1,47,5,47,841,8,47,10,47,12,47,844,9,47,1,47,1,47,5,47,
848,8,47,10,47,12,47,851,9,47,1,47,1,47,1,48,1,48,5,48,857,8,48,10,48,12,
48,860,9,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,871,8,48,10,
48,12,48,874,9,48,3,48,876,8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
5,48,886,8,48,10,48,12,48,889,9,48,3,48,891,8,48,1,48,1,48,1,48,1,48,1,48,
1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,905,8,48,10,48,12,48,908,9,48,1,
48,1,48,3,48,912,8,48,1,49,1,49,1,50,1,50,1,50,3,50,919,8,50,1,51,5,51,922,
8,51,10,51,12,51,925,9,51,1,51,1,51,1,51,3,51,930,8,51,1,51,3,51,933,8,51,
1,51,3,51,936,8,51,1,51,3,51,939,8,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,3,52,953,8,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,
5,54,962,8,54,10,54,12,54,965,9,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,
57,1,57,5,57,976,8,57,10,57,12,57,979,9,57,1,58,1,58,1,58,1,58,5,58,985,
8,58,10,58,12,58,988,9,58,1,59,1,59,5,59,992,8,59,10,59,12,59,995,9,59,1,
59,1,59,1,60,1,60,1,60,1,60,3,60,1003,8,60,1,61,1,61,1,61,1,61,1,61,3,61,
1010,8,61,1,62,5,62,1013,8,62,10,62,12,62,1016,9,62,1,62,1,62,1,62,1,62,
1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1030,8,63,1,64,1,64,1,64,5,
64,1035,8,64,10,64,12,64,1038,9,64,1,65,1,65,1,65,3,65,1043,8,65,1,66,1,
66,3,66,1047,8,66,1,67,1,67,3,67,1051,8,67,1,68,1,68,3,68,1055,8,68,1,69,
1,69,3,69,1059,8,69,1,70,1,70,1,70,3,70,1064,8,70,1,71,1,71,1,71,5,71,1069,
8,71,10,71,12,71,1072,9,71,3,71,1074,8,71,1,71,1,71,3,71,1078,8,71,1,71,
3,71,1081,8,71,1,72,1,72,5,72,1085,8,72,10,72,12,72,1088,9,72,1,72,1,72,
3,72,1092,8,72,1,72,3,72,1095,8,72,1,73,1,73,3,73,1099,8,73,1,73,1,73,3,
73,1103,8,73,1,73,1,73,5,73,1107,8,73,10,73,12,73,1110,9,73,1,73,1,73,3,
73,1114,8,73,3,73,1116,8,73,1,74,1,74,1,75,1,75,1,76,1,76,1,76,3,76,1125,
8,76,1,76,1,76,1,77,5,77,1130,8,77,10,77,12,77,1133,9,77,1,77,1,77,1,77,
1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,3,78,1148,8,78,1,79,1,
79,5,79,1152,8,79,10,79,12,79,1155,9,79,3,79,1157,8,79,1,79,1,79,1,79,3,
79,1162,8,79,1,80,1,80,3,80,1166,8,80,1,81,1,81,1,81,1,81,1,81,3,81,1173,
8,81,1,81,3,81,1176,8,81,1,81,1,81,3,81,1180,8,81,1,82,5,82,1183,8,82,10,
82,12,82,1186,9,82,1,82,1,82,1,82,1,82,3,82,1192,8,82,1,82,1,82,1,83,1,83,
1,83,5,83,1199,8,83,10,83,12,83,1202,9,83,1,84,5,84,1205,8,84,10,84,12,84,
1208,9,84,1,84,1,84,1,84,1,84,3,84,1214,8,84,1,85,5,85,1217,8,85,10,85,12,
85,1220,9,85,1,85,1,85,5,85,1224,8,85,10,85,12,85,1227,9,85,1,85,1,85,1,
85,1,86,1,86,3,86,1234,8,86,1,87,1,87,1,87,1,88,1,88,1,88,5,88,1242,8,88,
10,88,12,88,1245,9,88,1,89,1,89,3,89,1249,8,89,1,90,1,90,3,90,1253,8,90,
1,91,1,91,1,92,1,92,1,92,1,93,5,93,1261,8,93,10,93,12,93,1264,9,93,1,93,
1,93,3,93,1268,8,93,1,93,1,93,1,94,1,94,1,94,1,94,3,94,1276,8,94,1,95,3,
95,1279,8,95,1,95,1,95,1,95,1,95,1,95,3,95,1286,8,95,1,95,3,95,1289,8,95,
1,95,1,95,1,96,1,96,1,97,1,97,3,97,1297,8,97,1,97,3,97,1300,8,97,1,97,1,
97,1,98,3,98,1305,8,98,1,98,1,98,1,98,3,98,1310,8,98,1,98,1,98,1,98,1,98,
3,98,1316,8,98,1,98,1,98,3,98,1320,8,98,1,98,1,98,1,98,3,98,1325,8,98,1,
98,1,98,1,98,3,98,1330,8,98,1,99,5,99,1333,8,99,10,99,12,99,1336,9,99,1,
99,1,99,1,99,3,99,1341,8,99,1,99,1,99,1,100,1,100,3,100,1347,8,100,1,100,
3,100,1350,8,100,1,100,3,100,1353,8,100,1,100,1,100,1,101,1,101,1,101,5,
101,1360,8,101,10,101,12,101,1363,9,101,1,102,5,102,1366,8,102,10,102,12,
102,1369,9,102,1,102,1,102,1,102,3,102,1374,8,102,1,102,3,102,1377,8,102,
1,102,3,102,1380,8,102,1,103,1,103,1,104,1,104,5,104,1386,8,104,10,104,12,
104,1389,9,104,1,105,5,105,1392,8,105,10,105,12,105,1395,9,105,1,105,1,105,
1,105,3,105,1400,8,105,1,105,1,105,3,105,1404,8,105,1,105,1,105,1,106,1,
106,3,106,1410,8,106,1,106,1,106,1,107,1,107,1,107,5,107,1417,8,107,10,107,
12,107,1420,9,107,1,108,5,108,1423,8,108,10,108,12,108,1426,9,108,1,108,
1,108,1,108,1,108,3,108,1432,8,108,1,109,5,109,1435,8,109,10,109,12,109,
1438,9,109,1,109,1,109,5,109,1442,8,109,10,109,12,109,1445,9,109,1,109,1,
109,1,109,1,110,1,110,1,111,1,111,5,111,1454,8,111,10,111,12,111,1457,9,
111,1,111,1,111,1,112,1,112,3,112,1463,8,112,1,113,5,113,1466,8,113,10,113,
12,113,1469,9,113,1,113,1,113,1,113,1,114,1,114,3,114,1476,8,114,1,115,5,
115,1479,8,115,10,115,12,115,1482,9,115,1,115,1,115,1,115,3,115,1487,8,115,
1,115,3,115,1490,8,115,1,115,3,115,1493,8,115,1,115,1,115,1,116,1,116,1,
116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,1506,8,116,1,117,1,117,1,117,
1,118,1,118,1,118,1,118,5,118,1515,8,118,10,118,12,118,1518,9,118,1,119,
1,119,5,119,1522,8,119,10,119,12,119,1525,9,119,1,119,1,119,1,120,1,120,
1,120,1,120,1,120,3,120,1534,8,120,1,121,5,121,1537,8,121,10,121,12,121,
1540,9,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,3,122,1550,8,
122,1,123,5,123,1553,8,123,10,123,12,123,1556,9,123,1,123,1,123,1,123,1,
124,1,124,1,124,1,124,1,124,1,124,1,124,3,124,1568,8,124,1,125,5,125,1571,
8,125,10,125,12,125,1574,9,125,1,125,1,125,1,125,1,125,1,125,1,126,1,126,
5,126,1583,8,126,10,126,12,126,1586,9,126,1,126,1,126,1,127,1,127,1,127,
1,127,1,127,3,127,1595,8,127,1,128,5,128,1598,8,128,10,128,12,128,1601,9,
128,1,128,1,128,1,128,1,128,1,128,3,128,1608,8,128,1,128,3,128,1611,8,128,
1,128,1,128,1,129,1,129,1,129,3,129,1618,8,129,1,130,1,130,1,130,1,131,1,
131,1,131,3,131,1626,8,131,1,132,1,132,1,132,1,132,3,132,1632,8,132,1,132,
1,132,1,133,1,133,1,133,5,133,1639,8,133,10,133,12,133,1642,9,133,1,134,
1,134,1,134,1,134,1,135,1,135,1,135,3,135,1651,8,135,1,136,1,136,3,136,1655,
8,136,1,136,3,136,1658,8,136,1,136,1,136,1,137,1,137,1,137,5,137,1665,8,
137,10,137,12,137,1668,9,137,1,138,1,138,1,138,1,139,1,139,1,139,1,139,1,
139,1,139,1,140,1,140,3,140,1681,8,140,1,140,3,140,1684,8,140,1,140,1,140,
1,141,1,141,1,141,5,141,1691,8,141,10,141,12,141,1694,9,141,1,142,1,142,
3,142,1698,8,142,1,142,1,142,1,143,1,143,5,143,1704,8,143,10,143,12,143,
1707,9,143,1,144,1,144,1,144,3,144,1712,8,144,1,145,1,145,3,145,1716,8,145,
1,146,5,146,1719,8,146,10,146,12,146,1722,9,146,1,146,1,146,3,146,1726,8,
146,1,147,1,147,3,147,1730,8,147,1,148,1,148,1,148,1,149,1,149,1,149,1,149,
1,149,1,149,3,149,1741,8,149,1,150,1,150,1,150,1,150,1,150,3,150,1748,8,
150,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,151,1,
151,1,151,3,151,1763,8,151,1,152,1,152,1,153,1,153,1,153,1,153,1,154,1,154,
1,154,1,154,1,155,1,155,1,155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,
3,156,1785,8,156,1,157,1,157,1,157,1,157,1,157,1,157,1,158,1,158,1,158,1,
158,1,158,1,158,1,158,1,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,1,
159,1,160,1,160,1,160,1,160,3,160,1813,8,160,1,160,1,160,1,161,1,161,1,161,
1,161,1,161,1,161,1,162,1,162,1,162,5,162,1826,8,162,10,162,12,162,1829,
9,162,1,162,1,162,1,162,1,162,5,162,1835,8,162,10,162,12,162,1838,9,162,
1,162,1,162,1,162,5,162,1843,8,162,10,162,12,162,1846,9,162,1,162,3,162,
1849,8,162,1,163,1,163,1,163,1,163,1,163,1,163,1,163,3,163,1858,8,163,1,
164,1,164,1,164,1,164,1,164,5,164,1865,8,164,10,164,12,164,1868,9,164,1,
164,1,164,1,165,1,165,1,165,1,165,5,165,1876,8,165,10,165,12,165,1879,9,
165,1,165,3,165,1882,8,165,1,166,1,166,1,167,1,167,1,167,1,167,1,167,1,167,
1,168,1,168,1,168,1,168,1,168,1,168,1,169,1,169,1,169,1,169,1,169,1,169,
1,169,1,169,1,170,1,170,3,170,1908,8,170,1,171,1,171,3,171,1912,8,171,1,
172,1,172,1,172,3,172,1917,8,172,1,172,1,172,3,172,1921,8,172,1,172,1,172,
3,172,1925,8,172,1,172,1,172,1,172,1,173,1,173,1,173,3,173,1933,8,173,1,
173,1,173,3,173,1937,8,173,1,173,1,173,3,173,1941,8,173,1,173,1,173,1,173,
1,174,1,174,3,174,1948,8,174,1,175,1,175,1,176,1,176,1,176,5,176,1955,8,
176,10,176,12,176,1958,9,176,1,177,1,177,1,177,1,177,1,177,1,177,1,177,1,
177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,179,1,179,3,179,1978,
8,179,1,179,1,179,1,180,1,180,3,180,1984,8,180,1,180,1,180,1,181,1,181,3,
181,1990,8,181,1,181,1,181,1,182,1,182,1,182,1,182,1,183,1,183,1,183,1,183,
1,183,1,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
1,184,3,184,2015,8,184,1,184,1,184,1,184,3,184,2020,8,184,1,185,1,185,5,
185,2024,8,185,10,185,12,185,2027,9,185,1,186,1,186,1,186,1,186,1,186,1,
186,1,187,5,187,2036,8,187,10,187,12,187,2039,9,187,1,187,1,187,1,187,1,
188,1,188,1,188,5,188,2047,8,188,10,188,12,188,2050,9,188,1,189,1,189,1,
189,1,190,1,190,1,190,1,190,3,190,2059,8,190,1,190,3,190,2062,8,190,1,191,
1,191,1,191,3,191,2067,8,191,1,191,1,191,1,192,1,192,1,192,5,192,2074,8,
192,10,192,12,192,2077,9,192,1,193,1,193,3,193,2081,8,193,1,194,1,194,3,
194,2085,8,194,1,195,1,195,1,195,1,195,1,196,1,196,1,197,1,197,1,198,1,198,
3,198,2097,8,198,1,199,1,199,3,199,2101,8,199,1,200,1,200,3,200,2105,8,200,
1,200,1,200,3,200,2109,8,200,1,200,1,200,3,200,2113,8,200,1,200,1,200,1,
200,1,200,3,200,2119,8,200,1,200,1,200,1,200,1,200,3,200,2125,8,200,1,200,
1,200,3,200,2129,8,200,1,200,1,200,1,200,1,200,3,200,2135,8,200,1,200,1,
200,1,200,1,200,3,200,2141,8,200,1,200,1,200,1,200,1,200,3,200,2147,8,200,
1,200,1,200,1,200,1,200,3,200,2153,8,200,1,200,1,200,1,200,1,200,1,200,1,
200,3,200,2161,8,200,1,200,1,200,1,200,1,200,1,200,3,200,2168,8,200,1,200,
1,200,1,200,1,200,1,200,3,200,2175,8,200,1,200,1,200,1,200,3,200,2180,8,
200,1,200,1,200,3,200,2184,8,200,1,200,1,200,1,200,3,200,2189,8,200,1,200,
1,200,1,200,3,200,2194,8,200,1,200,1,200,3,200,2198,8,200,1,200,1,200,1,
200,3,200,2203,8,200,1,200,1,200,1,200,3,200,2208,8,200,1,200,1,200,3,200,
2212,8,200,1,200,1,200,1,200,3,200,2217,8,200,1,200,1,200,1,200,3,200,2222,
8,200,1,200,1,200,3,200,2226,8,200,1,200,1,200,1,200,3,200,2231,8,200,1,
200,1,200,1,200,3,200,2236,8,200,1,200,1,200,3,200,2240,8,200,1,200,1,200,
1,200,1,200,1,200,3,200,2247,8,200,1,200,1,200,1,200,3,200,2252,8,200,1,
200,1,200,3,200,2256,8,200,1,200,1,200,1,200,3,200,2261,8,200,1,200,1,200,
3,200,2265,8,200,1,200,1,200,1,200,3,200,2270,8,200,1,200,1,200,3,200,2274,
8,200,1,200,1,200,1,200,3,200,2279,8,200,1,200,1,200,3,200,2283,8,200,1,
200,1,200,1,200,3,200,2288,8,200,1,200,1,200,3,200,2292,8,200,1,200,1,200,
1,200,1,200,1,200,3,200,2299,8,200,1,200,1,200,3,200,2303,8,200,1,200,1,
200,1,200,3,200,2308,8,200,1,200,1,200,3,200,2312,8,200,1,200,1,200,1,200,
1,200,3,200,2318,8,200,3,200,2320,8,200,1,201,1,201,1,201,3,201,2325,8,201,
1,201,1,201,1,201,3,201,2330,8,201,1,201,1,201,1,201,1,201,3,201,2336,8,
201,1,201,1,201,3,201,2340,8,201,1,201,1,201,1,201,3,201,2345,8,201,1,201,
1,201,3,201,2349,8,201,1,201,1,201,3,201,2353,8,201,1,201,1,201,3,201,2357,
8,201,3,201,2359,8,201,1,202,1,202,1,202,5,202,2364,8,202,10,202,12,202,
2367,9,202,1,202,1,202,1,202,1,202,1,202,1,202,5,202,2375,8,202,10,202,12,
202,2378,9,202,1,202,1,202,1,202,1,202,1,202,1,202,5,202,2386,8,202,10,202,
12,202,2389,9,202,1,202,1,202,1,202,1,202,1,202,3,202,2396,8,202,1,203,1,
203,1,203,1,203,1,203,1,203,1,203,1,203,1,203,3,203,2407,8,203,1,204,1,204,
3,204,2411,8,204,1,204,1,204,1,204,3,204,2416,8,204,1,204,1,204,3,204,2420,
8,204,1,205,5,205,2423,8,205,10,205,12,205,2426,9,205,1,205,1,205,1,205,
5,205,2431,8,205,10,205,12,205,2434,9,205,1,205,5,205,2437,8,205,10,205,
12,205,2440,9,205,1,205,3,205,2443,8,205,1,206,1,206,3,206,2447,8,206,1,
207,1,207,3,207,2451,8,207,1,208,1,208,1,208,1,208,3,208,2457,8,208,1,208,
1,208,1,208,1,208,3,208,2463,8,208,3,208,2465,8,208,1,209,1,209,1,209,1,
209,1,209,1,209,1,209,1,209,1,209,1,209,3,209,2477,8,209,1,210,1,210,5,210,
2481,8,210,10,210,12,210,2484,9,210,1,211,5,211,2487,8,211,10,211,12,211,
2490,9,211,1,211,1,211,1,211,1,211,1,212,1,212,1,212,1,212,1,212,1,212,1,
212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,2511,8,212,1,213,
1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,1,213,
3,213,2526,8,213,1,214,1,214,1,214,3,214,2531,8,214,1,214,1,214,1,214,1,
214,1,214,3,214,2538,8,214,1,214,1,214,1,214,3,214,2543,8,214,1,214,1,214,
1,214,1,214,1,214,3,214,2550,8,214,1,214,1,214,1,214,3,214,2555,8,214,1,
214,1,214,1,214,1,214,1,214,3,214,2562,8,214,1,214,1,214,1,214,3,214,2567,
8,214,1,214,1,214,1,214,1,214,1,214,3,214,2574,8,214,1,214,1,214,1,214,3,
214,2579,8,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,3,214,2588,8,214,
1,214,1,214,1,214,3,214,2593,8,214,1,214,1,214,3,214,2597,8,214,1,215,1,
215,1,215,5,215,2602,8,215,10,215,12,215,2605,9,215,1,216,1,216,1,216,3,
216,2610,8,216,1,216,1,216,1,216,1,216,1,216,3,216,2617,8,216,1,216,1,216,
1,216,1,216,1,216,3,216,2624,8,216,1,216,1,216,1,216,1,216,1,216,3,216,2631,
8,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,2639,8,216,1,216,1,216,1,
216,1,216,1,216,3,216,2646,8,216,1,216,1,216,1,216,1,216,1,216,1,216,3,216,
2654,8,216,1,217,1,217,3,217,2658,8,217,1,217,1,217,3,217,2662,8,217,3,217,
2664,8,217,1,218,1,218,3,218,2668,8,218,1,218,1,218,3,218,2672,8,218,3,218,
2674,8,218,1,219,1,219,1,219,1,220,1,220,1,220,1,221,1,221,1,221,1,221,1,
221,1,221,1,221,3,221,2689,8,221,1,222,1,222,1,222,1,223,1,223,1,223,1,224,
1,224,1,224,1,224,1,224,1,224,1,224,3,224,2704,8,224,1,225,1,225,1,225,1,
225,1,225,1,225,1,225,1,225,5,225,2714,8,225,10,225,12,225,2717,9,225,1,
225,1,225,1,225,1,225,1,225,1,225,5,225,2725,8,225,10,225,12,225,2728,9,
225,1,225,1,225,1,225,3,225,2733,8,225,1,226,1,226,1,226,1,226,1,226,1,226,
1,226,1,226,1,226,1,226,1,226,1,226,5,226,2747,8,226,10,226,12,226,2750,
9,226,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,5,227,2761,8,
227,10,227,12,227,2764,9,227,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,
228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,5,228,2782,8,228,10,
228,12,228,2785,9,228,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,
229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,1,229,3,229,2806,
8,229,5,229,2808,8,229,10,229,12,229,2811,9,229,1,230,1,230,1,230,1,230,
1,230,1,230,1,230,1,230,1,230,5,230,2822,8,230,10,230,12,230,2825,9,230,
1,231,1,231,1,231,1,231,1,231,1,231,5,231,2833,8,231,10,231,12,231,2836,
9,231,1,232,1,232,1,232,1,232,1,232,1,232,5,232,2844,8,232,10,232,12,232,
2847,9,232,1,233,1,233,1,233,1,233,1,233,1,233,5,233,2855,8,233,10,233,12,
233,2858,9,233,1,234,1,234,1,234,1,234,1,234,1,234,5,234,2866,8,234,10,234,
12,234,2869,9,234,1,235,1,235,1,235,1,235,1,235,1,235,5,235,2877,8,235,10,
235,12,235,2880,9,235,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,236,1,
236,1,236,1,236,1,236,1,236,3,236,2895,8,236,1,237,1,237,3,237,2899,8,237,
1,238,1,238,1,238,1,238,1,239,1,239,1,239,3,239,2908,8,239,1,240,1,240,1,
241,1,241,1,241,1,241,1,242,1,242,3,242,2918,8,242,1,242,1,242,3,242,2922,
8,242,1,243,1,243,1,243,5,243,2927,8,243,10,243,12,243,2930,9,243,1,243,
1,243,1,243,5,243,2935,8,243,10,243,12,243,2938,9,243,3,243,2940,8,243,1,
244,5,244,2943,8,244,10,244,12,244,2946,9,244,1,244,1,244,1,244,1,244,3,
244,2952,8,244,1,245,1,245,3,245,2956,8,245,1,246,1,246,3,246,2960,8,246,
1,247,1,247,1,247,1,247,1,247,1,247,1,248,1,248,1,248,0,10,452,454,456,458,
460,462,464,466,468,470,249,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,
268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,
304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,
340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,
376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,
412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,
448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,
484,486,488,490,492,494,496,0,9,2,0,1,3,5,17,6,0,1,3,5,6,8,8,10,10,12,14,
16,16,2,0,1,3,5,16,1,0,69,75,5,0,22,22,25,25,44,44,46,46,54,54,2,0,31,31,
37,37,2,0,13,13,55,55,2,0,57,57,60,60,2,0,88,88,112,122,3229,0,498,1,0,0,
0,2,503,1,0,0,0,4,507,1,0,0,0,6,511,1,0,0,0,8,513,1,0,0,0,10,515,1,0,0,0,
12,517,1,0,0,0,14,519,1,0,0,0,16,524,1,0,0,0,18,533,1,0,0,0,20,535,1,0,0,
0,22,537,1,0,0,0,24,542,1,0,0,0,26,544,1,0,0,0,28,561,1,0,0,0,30,610,1,0,
0,0,32,612,1,0,0,0,34,617,1,0,0,0,36,631,1,0,0,0,38,636,1,0,0,0,40,657,1,
0,0,0,42,664,1,0,0,0,44,666,1,0,0,0,46,677,1,0,0,0,48,680,1,0,0,0,50,684,
1,0,0,0,52,694,1,0,0,0,54,699,1,0,0,0,56,710,1,0,0,0,58,712,1,0,0,0,60,717,
1,0,0,0,62,722,1,0,0,0,64,727,1,0,0,0,66,735,1,0,0,0,68,739,1,0,0,0,70,741,
1,0,0,0,72,748,1,0,0,0,74,751,1,0,0,0,76,768,1,0,0,0,78,776,1,0,0,0,80,790,
1,0,0,0,82,796,1,0,0,0,84,798,1,0,0,0,86,802,1,0,0,0,88,808,1,0,0,0,90,815,
1,0,0,0,92,825,1,0,0,0,94,830,1,0,0,0,96,911,1,0,0,0,98,913,1,0,0,0,100,
918,1,0,0,0,102,923,1,0,0,0,104,952,1,0,0,0,106,954,1,0,0,0,108,958,1,0,
0,0,110,966,1,0,0,0,112,969,1,0,0,0,114,972,1,0,0,0,116,980,1,0,0,0,118,
989,1,0,0,0,120,1002,1,0,0,0,122,1009,1,0,0,0,124,1014,1,0,0,0,126,1029,
1,0,0,0,128,1031,1,0,0,0,130,1039,1,0,0,0,132,1044,1,0,0,0,134,1050,1,0,
0,0,136,1054,1,0,0,0,138,1058,1,0,0,0,140,1063,1,0,0,0,142,1073,1,0,0,0,
144,1082,1,0,0,0,146,1115,1,0,0,0,148,1117,1,0,0,0,150,1119,1,0,0,0,152,
1124,1,0,0,0,154,1131,1,0,0,0,156,1147,1,0,0,0,158,1156,1,0,0,0,160,1165,
1,0,0,0,162,1167,1,0,0,0,164,1184,1,0,0,0,166,1195,1,0,0,0,168,1213,1,0,
0,0,170,1218,1,0,0,0,172,1233,1,0,0,0,174,1235,1,0,0,0,176,1238,1,0,0,0,
178,1248,1,0,0,0,180,1252,1,0,0,0,182,1254,1,0,0,0,184,1256,1,0,0,0,186,
1262,1,0,0,0,188,1275,1,0,0,0,190,1278,1,0,0,0,192,1292,1,0,0,0,194,1294,
1,0,0,0,196,1329,1,0,0,0,198,1334,1,0,0,0,200,1344,1,0,0,0,202,1356,1,0,
0,0,204,1367,1,0,0,0,206,1381,1,0,0,0,208,1383,1,0,0,0,210,1393,1,0,0,0,
212,1407,1,0,0,0,214,1413,1,0,0,0,216,1431,1,0,0,0,218,1436,1,0,0,0,220,
1449,1,0,0,0,222,1451,1,0,0,0,224,1462,1,0,0,0,226,1467,1,0,0,0,228,1475,
1,0,0,0,230,1480,1,0,0,0,232,1505,1,0,0,0,234,1507,1,0,0,0,236,1510,1,0,
0,0,238,1519,1,0,0,0,240,1533,1,0,0,0,242,1538,1,0,0,0,244,1549,1,0,0,0,
246,1554,1,0,0,0,248,1567,1,0,0,0,250,1572,1,0,0,0,252,1580,1,0,0,0,254,
1594,1,0,0,0,256,1599,1,0,0,0,258,1617,1,0,0,0,260,1619,1,0,0,0,262,1625,
1,0,0,0,264,1627,1,0,0,0,266,1635,1,0,0,0,268,1643,1,0,0,0,270,1650,1,0,
0,0,272,1652,1,0,0,0,274,1661,1,0,0,0,276,1669,1,0,0,0,278,1672,1,0,0,0,
280,1678,1,0,0,0,282,1687,1,0,0,0,284,1695,1,0,0,0,286,1701,1,0,0,0,288,
1711,1,0,0,0,290,1715,1,0,0,0,292,1720,1,0,0,0,294,1729,1,0,0,0,296,1731,
1,0,0,0,298,1740,1,0,0,0,300,1747,1,0,0,0,302,1762,1,0,0,0,304,1764,1,0,
0,0,306,1766,1,0,0,0,308,1770,1,0,0,0,310,1774,1,0,0,0,312,1784,1,0,0,0,
314,1786,1,0,0,0,316,1792,1,0,0,0,318,1800,1,0,0,0,320,1808,1,0,0,0,322,
1816,1,0,0,0,324,1848,1,0,0,0,326,1850,1,0,0,0,328,1859,1,0,0,0,330,1881,
1,0,0,0,332,1883,1,0,0,0,334,1885,1,0,0,0,336,1891,1,0,0,0,338,1897,1,0,
0,0,340,1907,1,0,0,0,342,1911,1,0,0,0,344,1913,1,0,0,0,346,1929,1,0,0,0,
348,1947,1,0,0,0,350,1949,1,0,0,0,352,1951,1,0,0,0,354,1959,1,0,0,0,356,
1967,1,0,0,0,358,1975,1,0,0,0,360,1981,1,0,0,0,362,1987,1,0,0,0,364,1993,
1,0,0,0,366,1997,1,0,0,0,368,2019,1,0,0,0,370,2021,1,0,0,0,372,2028,1,0,
0,0,374,2037,1,0,0,0,376,2043,1,0,0,0,378,2051,1,0,0,0,380,2054,1,0,0,0,
382,2063,1,0,0,0,384,2070,1,0,0,0,386,2080,1,0,0,0,388,2084,1,0,0,0,390,
2086,1,0,0,0,392,2090,1,0,0,0,394,2092,1,0,0,0,396,2096,1,0,0,0,398,2100,
1,0,0,0,400,2319,1,0,0,0,402,2358,1,0,0,0,404,2395,1,0,0,0,406,2406,1,0,
0,0,408,2408,1,0,0,0,410,2424,1,0,0,0,412,2446,1,0,0,0,414,2450,1,0,0,0,
416,2464,1,0,0,0,418,2476,1,0,0,0,420,2478,1,0,0,0,422,2488,1,0,0,0,424,
2510,1,0,0,0,426,2525,1,0,0,0,428,2596,1,0,0,0,430,2598,1,0,0,0,432,2653,
1,0,0,0,434,2663,1,0,0,0,436,2673,1,0,0,0,438,2675,1,0,0,0,440,2678,1,0,
0,0,442,2688,1,0,0,0,444,2690,1,0,0,0,446,2693,1,0,0,0,448,2703,1,0,0,0,
450,2732,1,0,0,0,452,2734,1,0,0,0,454,2751,1,0,0,0,456,2765,1,0,0,0,458,
2786,1,0,0,0,460,2812,1,0,0,0,462,2826,1,0,0,0,464,2837,1,0,0,0,466,2848,
1,0,0,0,468,2859,1,0,0,0,470,2870,1,0,0,0,472,2894,1,0,0,0,474,2898,1,0,
0,0,476,2900,1,0,0,0,478,2907,1,0,0,0,480,2909,1,0,0,0,482,2911,1,0,0,0,
484,2921,1,0,0,0,486,2939,1,0,0,0,488,2951,1,0,0,0,490,2955,1,0,0,0,492,
2959,1,0,0,0,494,2961,1,0,0,0,496,2967,1,0,0,0,498,499,3,72,36,0,499,500,
5,0,0,1,500,1,1,0,0,0,501,504,5,123,0,0,502,504,3,8,4,0,503,501,1,0,0,0,
503,502,1,0,0,0,504,3,1,0,0,0,505,508,5,123,0,0,506,508,3,10,5,0,507,505,
1,0,0,0,507,506,1,0,0,0,508,5,1,0,0,0,509,512,5,123,0,0,510,512,3,12,6,0,
511,509,1,0,0,0,511,510,1,0,0,0,512,7,1,0,0,0,513,514,7,0,0,0,514,9,1,0,
0,0,515,516,7,1,0,0,516,11,1,0,0,0,517,518,7,2,0,0,518,13,1,0,0,0,519,520,
7,3,0,0,520,15,1,0,0,0,521,523,3,262,131,0,522,521,1,0,0,0,523,526,1,0,0,
0,524,522,1,0,0,0,524,525,1,0,0,0,525,529,1,0,0,0,526,524,1,0,0,0,527,530,
3,18,9,0,528,530,5,20,0,0,529,527,1,0,0,0,529,528,1,0,0,0,530,17,1,0,0,0,
531,534,3,20,10,0,532,534,3,22,11,0,533,531,1,0,0,0,533,532,1,0,0,0,534,
19,1,0,0,0,535,536,7,4,0,0,536,21,1,0,0,0,537,538,7,5,0,0,538,23,1,0,0,0,
539,543,3,28,14,0,540,543,3,34,17,0,541,543,3,36,18,0,542,539,1,0,0,0,542,
540,1,0,0,0,542,541,1,0,0,0,543,25,1,0,0,0,544,548,5,84,0,0,545,547,3,262,
131,0,546,545,1,0,0,0,547,550,1,0,0,0,548,546,1,0,0,0,548,549,1,0,0,0,549,
551,1,0,0,0,550,548,1,0,0,0,551,553,3,4,2,0,552,554,3,48,24,0,553,552,1,
0,0,0,553,554,1,0,0,0,554,556,1,0,0,0,555,557,3,26,13,0,556,555,1,0,0,0,
556,557,1,0,0,0,557,27,1,0,0,0,558,559,3,60,30,0,559,560,5,84,0,0,560,562,
1,0,0,0,561,558,1,0,0,0,561,562,1,0,0,0,562,566,1,0,0,0,563,565,3,262,131,
0,564,563,1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,569,
1,0,0,0,568,566,1,0,0,0,569,571,3,4,2,0,570,572,3,48,24,0,571,570,1,0,0,
0,571,572,1,0,0,0,572,574,1,0,0,0,573,575,3,26,13,0,574,573,1,0,0,0,574,
575,1,0,0,0,575,29,1,0,0,0,576,578,3,262,131,0,577,576,1,0,0,0,578,581,1,
0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,582,1,0,0,0,581,579,1,0,0,0,582,
584,3,4,2,0,583,585,3,48,24,0,584,583,1,0,0,0,584,585,1,0,0,0,585,611,1,
0,0,0,586,587,3,60,30,0,587,591,5,84,0,0,588,590,3,262,131,0,589,588,1,0,
0,0,590,593,1,0,0,0,591,589,1,0,0,0,591,592,1,0,0,0,592,594,1,0,0,0,593,
591,1,0,0,0,594,596,3,4,2,0,595,597,3,48,24,0,596,595,1,0,0,0,596,597,1,
0,0,0,597,611,1,0,0,0,598,599,3,28,14,0,599,603,5,84,0,0,600,602,3,262,131,
0,601,600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,0,0,604,606,
1,0,0,0,605,603,1,0,0,0,606,608,3,4,2,0,607,609,3,48,24,0,608,607,1,0,0,
0,608,609,1,0,0,0,609,611,1,0,0,0,610,579,1,0,0,0,610,586,1,0,0,0,610,598,
1,0,0,0,611,31,1,0,0,0,612,613,3,30,15,0,613,33,1,0,0,0,614,616,3,262,131,
0,615,614,1,0,0,0,616,619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,620,
1,0,0,0,619,617,1,0,0,0,620,621,3,4,2,0,621,35,1,0,0,0,622,623,3,16,8,0,
623,624,3,38,19,0,624,632,1,0,0,0,625,626,3,30,15,0,626,627,3,38,19,0,627,
632,1,0,0,0,628,629,3,34,17,0,629,630,3,38,19,0,630,632,1,0,0,0,631,622,
1,0,0,0,631,625,1,0,0,0,631,628,1,0,0,0,632,37,1,0,0,0,633,635,3,262,131,
0,634,633,1,0,0,0,635,638,1,0,0,0,636,634,1,0,0,0,636,637,1,0,0,0,637,639,
1,0,0,0,638,636,1,0,0,0,639,640,5,80,0,0,640,651,5,81,0,0,641,643,3,262,
131,0,642,641,1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,
647,1,0,0,0,646,644,1,0,0,0,647,648,5,80,0,0,648,650,5,81,0,0,649,644,1,
0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,39,1,0,0,0,653,
651,1,0,0,0,654,656,3,42,21,0,655,654,1,0,0,0,656,659,1,0,0,0,657,655,1,
0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,662,3,4,2,0,661,
663,3,44,22,0,662,661,1,0,0,0,662,663,1,0,0,0,663,41,1,0,0,0,664,665,3,262,
131,0,665,43,1,0,0,0,666,675,5,34,0,0,667,676,3,34,17,0,668,672,3,28,14,
0,669,671,3,46,23,0,670,669,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,672,
673,1,0,0,0,673,676,1,0,0,0,674,672,1,0,0,0,675,667,1,0,0,0,675,668,1,0,
0,0,676,45,1,0,0,0,677,678,5,108,0,0,678,679,3,32,16,0,679,47,1,0,0,0,680,
681,5,90,0,0,681,682,3,50,25,0,682,683,5,89,0,0,683,49,1,0,0,0,684,689,3,
52,26,0,685,686,5,83,0,0,686,688,3,52,26,0,687,685,1,0,0,0,688,691,1,0,0,
0,689,687,1,0,0,0,689,690,1,0,0,0,690,51,1,0,0,0,691,689,1,0,0,0,692,695,
3,24,12,0,693,695,3,54,27,0,694,692,1,0,0,0,694,693,1,0,0,0,695,53,1,0,0,
0,696,698,3,262,131,0,697,696,1,0,0,0,698,701,1,0,0,0,699,697,1,0,0,0,699,
700,1,0,0,0,700,702,1,0,0,0,701,699,1,0,0,0,702,704,5,93,0,0,703,705,3,56,
28,0,704,703,1,0,0,0,704,705,1,0,0,0,705,55,1,0,0,0,706,707,5,34,0,0,707,
711,3,24,12,0,708,709,5,57,0,0,709,711,3,24,12,0,710,706,1,0,0,0,710,708,
1,0,0,0,711,57,1,0,0,0,712,715,3,2,1,0,713,714,5,84,0,0,714,716,3,58,29,
0,715,713,1,0,0,0,715,716,1,0,0,0,716,59,1,0,0,0,717,720,3,2,1,0,718,719,
5,84,0,0,719,721,3,60,30,0,720,718,1,0,0,0,720,721,1,0,0,0,721,61,1,0,0,
0,722,725,3,60,30,0,723,724,5,84,0,0,724,726,3,4,2,0,725,723,1,0,0,0,725,
726,1,0,0,0,726,63,1,0,0,0,727,730,3,2,1,0,728,729,5,84,0,0,729,731,3,64,
32,0,730,728,1,0,0,0,730,731,1,0,0,0,731,65,1,0,0,0,732,733,3,70,35,0,733,
734,5,84,0,0,734,736,1,0,0,0,735,732,1,0,0,0,735,736,1,0,0,0,736,737,1,0,
0,0,737,738,3,2,1,0,738,67,1,0,0,0,739,740,3,6,3,0,740,69,1,0,0,0,741,744,
3,2,1,0,742,743,5,84,0,0,743,745,3,70,35,0,744,742,1,0,0,0,744,745,1,0,0,
0,745,71,1,0,0,0,746,749,3,74,37,0,747,749,3,76,38,0,748,746,1,0,0,0,748,
747,1,0,0,0,749,73,1,0,0,0,750,752,3,78,39,0,751,750,1,0,0,0,751,752,1,0,
0,0,752,756,1,0,0,0,753,755,3,82,41,0,754,753,1,0,0,0,755,758,1,0,0,0,756,
754,1,0,0,0,756,757,1,0,0,0,757,762,1,0,0,0,758,756,1,0,0,0,759,761,3,92,
46,0,760,759,1,0,0,0,761,764,1,0,0,0,762,760,1,0,0,0,762,763,1,0,0,0,763,
75,1,0,0,0,764,762,1,0,0,0,765,767,3,82,41,0,766,765,1,0,0,0,767,770,1,0,
0,0,768,766,1,0,0,0,768,769,1,0,0,0,769,771,1,0,0,0,770,768,1,0,0,0,771,
772,3,94,47,0,772,77,1,0,0,0,773,775,3,80,40,0,774,773,1,0,0,0,775,778,1,
0,0,0,776,774,1,0,0,0,776,777,1,0,0,0,777,779,1,0,0,0,778,776,1,0,0,0,779,
780,5,49,0,0,780,785,3,2,1,0,781,782,5,84,0,0,782,784,3,2,1,0,783,781,1,
0,0,0,784,787,1,0,0,0,785,783,1,0,0,0,785,786,1,0,0,0,786,788,1,0,0,0,787,
785,1,0,0,0,788,789,5,82,0,0,789,79,1,0,0,0,790,791,3,262,131,0,791,81,1,
0,0,0,792,797,3,84,42,0,793,797,3,86,43,0,794,797,3,88,44,0,795,797,3,90,
45,0,796,792,1,0,0,0,796,793,1,0,0,0,796,794,1,0,0,0,796,795,1,0,0,0,797,
83,1,0,0,0,798,799,5,42,0,0,799,800,3,62,31,0,800,801,5,82,0,0,801,85,1,
0,0,0,802,803,5,42,0,0,803,804,3,64,32,0,804,805,5,84,0,0,805,806,5,106,
0,0,806,807,5,82,0,0,807,87,1,0,0,0,808,809,5,42,0,0,809,810,5,55,0,0,810,
811,3,62,31,0,811,812,5,84,0,0,812,813,3,2,1,0,813,814,5,82,0,0,814,89,1,
0,0,0,815,816,5,42,0,0,816,817,5,55,0,0,817,818,3,62,31,0,818,819,5,84,0,
0,819,820,5,106,0,0,820,821,5,82,0,0,821,91,1,0,0,0,822,826,3,100,50,0,823,
826,3,228,114,0,824,826,5,82,0,0,825,822,1,0,0,0,825,823,1,0,0,0,825,824,
1,0,0,0,826,93,1,0,0,0,827,829,3,262,131,0,828,827,1,0,0,0,829,832,1,0,0,
0,830,828,1,0,0,0,830,831,1,0,0,0,831,834,1,0,0,0,832,830,1,0,0,0,833,835,
5,5,0,0,834,833,1,0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,837,5,2,0,0,
837,842,3,2,1,0,838,839,5,84,0,0,839,841,3,2,1,0,840,838,1,0,0,0,841,844,
1,0,0,0,842,840,1,0,0,0,842,843,1,0,0,0,843,845,1,0,0,0,844,842,1,0,0,0,
845,849,5,78,0,0,846,848,3,96,48,0,847,846,1,0,0,0,848,851,1,0,0,0,849,847,
1,0,0,0,849,850,1,0,0,0,850,852,1,0,0,0,851,849,1,0,0,0,852,853,5,79,0,0,
853,95,1,0,0,0,854,858,5,10,0,0,855,857,3,98,49,0,856,855,1,0,0,0,857,860,
1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,861,1,0,0,0,860,858,1,0,0,0,
861,862,3,58,29,0,862,863,5,82,0,0,863,912,1,0,0,0,864,865,5,1,0,0,865,875,
3,60,30,0,866,867,5,12,0,0,867,872,3,58,29,0,868,869,5,83,0,0,869,871,3,
58,29,0,870,868,1,0,0,0,871,874,1,0,0,0,872,870,1,0,0,0,872,873,1,0,0,0,
873,876,1,0,0,0,874,872,1,0,0,0,875,866,1,0,0,0,875,876,1,0,0,0,876,877,
1,0,0,0,877,878,5,82,0,0,878,912,1,0,0,0,879,880,5,6,0,0,880,890,3,60,30,
0,881,882,5,12,0,0,882,887,3,58,29,0,883,884,5,83,0,0,884,886,3,58,29,0,
885,883,1,0,0,0,886,889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,891,
1,0,0,0,889,887,1,0,0,0,890,881,1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,
892,893,5,82,0,0,893,912,1,0,0,0,894,895,5,14,0,0,895,896,3,62,31,0,896,
897,5,82,0,0,897,912,1,0,0,0,898,899,5,8,0,0,899,900,3,62,31,0,900,901,5,
16,0,0,901,906,3,62,31,0,902,903,5,83,0,0,903,905,3,62,31,0,904,902,1,0,
0,0,905,908,1,0,0,0,906,904,1,0,0,0,906,907,1,0,0,0,907,909,1,0,0,0,908,
906,1,0,0,0,909,910,5,82,0,0,910,912,1,0,0,0,911,854,1,0,0,0,911,864,1,0,
0,0,911,879,1,0,0,0,911,894,1,0,0,0,911,898,1,0,0,0,912,97,1,0,0,0,913,914,
7,6,0,0,914,99,1,0,0,0,915,919,3,102,51,0,916,919,3,198,99,0,917,919,3,210,
105,0,918,915,1,0,0,0,918,916,1,0,0,0,918,917,1,0,0,0,919,101,1,0,0,0,920,
922,3,104,52,0,921,920,1,0,0,0,922,925,1,0,0,0,923,921,1,0,0,0,923,924,1,
0,0,0,924,926,1,0,0,0,925,923,1,0,0,0,926,927,5,26,0,0,927,929,3,4,2,0,928,
930,3,106,53,0,929,928,1,0,0,0,929,930,1,0,0,0,930,932,1,0,0,0,931,933,3,
110,55,0,932,931,1,0,0,0,932,933,1,0,0,0,933,935,1,0,0,0,934,936,3,112,56,
0,935,934,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,939,3,116,58,0,938,
937,1,0,0,0,938,939,1,0,0,0,939,940,1,0,0,0,940,941,3,118,59,0,941,103,1,
0,0,0,942,953,3,262,131,0,943,953,5,52,0,0,944,953,5,51,0,0,945,953,5,50,
0,0,946,953,5,18,0,0,947,953,5,55,0,0,948,953,5,35,0,0,949,953,5,11,0,0,
950,953,5,3,0,0,951,953,5,56,0,0,952,942,1,0,0,0,952,943,1,0,0,0,952,944,
1,0,0,0,952,945,1,0,0,0,952,946,1,0,0,0,952,947,1,0,0,0,952,948,1,0,0,0,
952,949,1,0,0,0,952,950,1,0,0,0,952,951,1,0,0,0,953,105,1,0,0,0,954,955,
5,90,0,0,955,956,3,108,54,0,956,957,5,89,0,0,957,107,1,0,0,0,958,963,3,40,
20,0,959,960,5,83,0,0,960,962,3,40,20,0,961,959,1,0,0,0,962,965,1,0,0,0,
963,961,1,0,0,0,963,964,1,0,0,0,964,109,1,0,0,0,965,963,1,0,0,0,966,967,
5,34,0,0,967,968,3,30,15,0,968,111,1,0,0,0,969,970,5,41,0,0,970,971,3,114,
57,0,971,113,1,0,0,0,972,977,3,32,16,0,973,974,5,83,0,0,974,976,3,32,16,
0,975,973,1,0,0,0,976,979,1,0,0,0,977,975,1,0,0,0,977,978,1,0,0,0,978,115,
1,0,0,0,979,977,1,0,0,0,980,981,5,7,0,0,981,986,3,62,31,0,982,983,5,83,0,
0,983,985,3,62,31,0,984,982,1,0,0,0,985,988,1,0,0,0,986,984,1,0,0,0,986,
987,1,0,0,0,987,117,1,0,0,0,988,986,1,0,0,0,989,993,5,78,0,0,990,992,3,120,
60,0,991,990,1,0,0,0,992,995,1,0,0,0,993,991,1,0,0,0,993,994,1,0,0,0,994,
996,1,0,0,0,995,993,1,0,0,0,996,997,5,79,0,0,997,119,1,0,0,0,998,1003,3,
122,61,0,999,1003,3,182,91,0,1000,1003,3,184,92,0,1001,1003,3,186,93,0,1002,
998,1,0,0,0,1002,999,1,0,0,0,1002,1000,1,0,0,0,1002,1001,1,0,0,0,1003,121,
1,0,0,0,1004,1010,3,124,62,0,1005,1010,3,154,77,0,1006,1010,3,100,50,0,1007,
1010,3,228,114,0,1008,1010,5,82,0,0,1009,1004,1,0,0,0,1009,1005,1,0,0,0,
1009,1006,1,0,0,0,1009,1007,1,0,0,0,1009,1008,1,0,0,0,1010,123,1,0,0,0,1011,
1013,3,126,63,0,1012,1011,1,0,0,0,1013,1016,1,0,0,0,1014,1012,1,0,0,0,1014,
1015,1,0,0,0,1015,1017,1,0,0,0,1016,1014,1,0,0,0,1017,1018,3,136,68,0,1018,
1019,3,128,64,0,1019,1020,5,82,0,0,1020,125,1,0,0,0,1021,1030,3,262,131,
0,1022,1030,5,52,0,0,1023,1030,5,51,0,0,1024,1030,5,50,0,0,1025,1030,5,55,
0,0,1026,1030,5,35,0,0,1027,1030,5,63,0,0,1028,1030,5,66,0,0,1029,1021,1,
0,0,0,1029,1022,1,0,0,0,1029,1023,1,0,0,0,1029,1024,1,0,0,0,1029,1025,1,
0,0,0,1029,1026,1,0,0,0,1029,1027,1,0,0,0,1029,1028,1,0,0,0,1030,127,1,0,
0,0,1031,1036,3,130,65,0,1032,1033,5,83,0,0,1033,1035,3,130,65,0,1034,1032,
1,0,0,0,1035,1038,1,0,0,0,1036,1034,1,0,0,0,1036,1037,1,0,0,0,1037,129,1,
0,0,0,1038,1036,1,0,0,0,1039,1042,3,132,66,0,1040,1041,5,88,0,0,1041,1043,
3,134,67,0,1042,1040,1,0,0,0,1042,1043,1,0,0,0,1043,131,1,0,0,0,1044,1046,
3,2,1,0,1045,1047,3,38,19,0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,133,
1,0,0,0,1048,1051,3,396,198,0,1049,1051,3,280,140,0,1050,1048,1,0,0,0,1050,
1049,1,0,0,0,1051,135,1,0,0,0,1052,1055,3,138,69,0,1053,1055,3,140,70,0,
1054,1052,1,0,0,0,1054,1053,1,0,0,0,1055,137,1,0,0,0,1056,1059,3,18,9,0,
1057,1059,5,20,0,0,1058,1056,1,0,0,0,1058,1057,1,0,0,0,1059,139,1,0,0,0,
1060,1064,3,142,71,0,1061,1064,3,150,75,0,1062,1064,3,152,76,0,1063,1060,
1,0,0,0,1063,1061,1,0,0,0,1063,1062,1,0,0,0,1064,141,1,0,0,0,1065,1066,3,
60,30,0,1066,1070,5,84,0,0,1067,1069,3,262,131,0,1068,1067,1,0,0,0,1069,
1072,1,0,0,0,1070,1068,1,0,0,0,1070,1071,1,0,0,0,1071,1074,1,0,0,0,1072,
1070,1,0,0,0,1073,1065,1,0,0,0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,
1077,3,4,2,0,1076,1078,3,48,24,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,
1080,1,0,0,0,1079,1081,3,144,72,0,1080,1079,1,0,0,0,1080,1081,1,0,0,0,1081,
143,1,0,0,0,1082,1086,5,84,0,0,1083,1085,3,262,131,0,1084,1083,1,0,0,0,1085,
1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,1089,1,0,0,0,1088,
1086,1,0,0,0,1089,1091,3,4,2,0,1090,1092,3,48,24,0,1091,1090,1,0,0,0,1091,
1092,1,0,0,0,1092,1094,1,0,0,0,1093,1095,3,144,72,0,1094,1093,1,0,0,0,1094,
1095,1,0,0,0,1095,145,1,0,0,0,1096,1098,3,4,2,0,1097,1099,3,48,24,0,1098,
1097,1,0,0,0,1098,1099,1,0,0,0,1099,1116,1,0,0,0,1100,1103,3,60,30,0,1101,
1103,3,142,71,0,1102,1100,1,0,0,0,1102,1101,1,0,0,0,1103,1104,1,0,0,0,1104,
1108,5,84,0,0,1105,1107,3,262,131,0,1106,1105,1,0,0,0,1107,1110,1,0,0,0,
1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,1111,1,0,0,0,1110,1108,1,0,0,0,
1111,1113,3,4,2,0,1112,1114,3,48,24,0,1113,1112,1,0,0,0,1113,1114,1,0,0,
0,1114,1116,1,0,0,0,1115,1096,1,0,0,0,1115,1102,1,0,0,0,1116,147,1,0,0,0,
1117,1118,3,146,73,0,1118,149,1,0,0,0,1119,1120,3,4,2,0,1120,151,1,0,0,0,
1121,1125,3,138,69,0,1122,1125,3,142,71,0,1123,1125,3,150,75,0,1124,1121,
1,0,0,0,1124,1122,1,0,0,0,1124,1123,1,0,0,0,1125,1126,1,0,0,0,1126,1127,
3,38,19,0,1127,153,1,0,0,0,1128,1130,3,156,78,0,1129,1128,1,0,0,0,1130,1133,
1,0,0,0,1131,1129,1,0,0,0,1131,1132,1,0,0,0,1132,1134,1,0,0,0,1133,1131,
1,0,0,0,1134,1135,3,158,79,0,1135,1136,3,180,90,0,1136,155,1,0,0,0,1137,
1148,3,262,131,0,1138,1148,5,52,0,0,1139,1148,5,51,0,0,1140,1148,5,50,0,
0,1141,1148,5,18,0,0,1142,1148,5,55,0,0,1143,1148,5,35,0,0,1144,1148,5,59,
0,0,1145,1148,5,47,0,0,1146,1148,5,56,0,0,1147,1137,1,0,0,0,1147,1138,1,
0,0,0,1147,1139,1,0,0,0,1147,1140,1,0,0,0,1147,1141,1,0,0,0,1147,1142,1,
0,0,0,1147,1143,1,0,0,0,1147,1144,1,0,0,0,1147,1145,1,0,0,0,1147,1146,1,
0,0,0,1148,157,1,0,0,0,1149,1153,3,106,53,0,1150,1152,3,262,131,0,1151,1150,
1,0,0,0,1152,1155,1,0,0,0,1153,1151,1,0,0,0,1153,1154,1,0,0,0,1154,1157,
1,0,0,0,1155,1153,1,0,0,0,1156,1149,1,0,0,0,1156,1157,1,0,0,0,1157,1158,
1,0,0,0,1158,1159,3,160,80,0,1159,1161,3,162,81,0,1160,1162,3,174,87,0,1161,
1160,1,0,0,0,1161,1162,1,0,0,0,1162,159,1,0,0,0,1163,1166,3,136,68,0,1164,
1166,5,65,0,0,1165,1163,1,0,0,0,1165,1164,1,0,0,0,1166,161,1,0,0,0,1167,
1168,3,2,1,0,1168,1172,5,76,0,0,1169,1170,3,164,82,0,1170,1171,5,83,0,0,
1171,1173,1,0,0,0,1172,1169,1,0,0,0,1172,1173,1,0,0,0,1173,1175,1,0,0,0,
1174,1176,3,166,83,0,1175,1174,1,0,0,0,1175,1176,1,0,0,0,1176,1177,1,0,0,
0,1177,1179,5,77,0,0,1178,1180,3,38,19,0,1179,1178,1,0,0,0,1179,1180,1,0,
0,0,1180,163,1,0,0,0,1181,1183,3,262,131,0,1182,1181,1,0,0,0,1183,1186,1,
0,0,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,1187,1,0,0,0,1186,1184,1,
0,0,0,1187,1191,3,136,68,0,1188,1189,3,2,1,0,1189,1190,5,84,0,0,1190,1192,
1,0,0,0,1191,1188,1,0,0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,1193,1194,
5,60,0,0,1194,165,1,0,0,0,1195,1200,3,168,84,0,1196,1197,5,83,0,0,1197,1199,
3,168,84,0,1198,1196,1,0,0,0,1199,1202,1,0,0,0,1200,1198,1,0,0,0,1200,1201,
1,0,0,0,1201,167,1,0,0,0,1202,1200,1,0,0,0,1203,1205,3,172,86,0,1204,1203,
1,0,0,0,1205,1208,1,0,0,0,1206,1204,1,0,0,0,1206,1207,1,0,0,0,1207,1209,
1,0,0,0,1208,1206,1,0,0,0,1209,1210,3,136,68,0,1210,1211,3,132,66,0,1211,
1214,1,0,0,0,1212,1214,3,170,85,0,1213,1206,1,0,0,0,1213,1212,1,0,0,0,1214,
169,1,0,0,0,1215,1217,3,172,86,0,1216,1215,1,0,0,0,1217,1220,1,0,0,0,1218,
1216,1,0,0,0,1218,1219,1,0,0,0,1219,1221,1,0,0,0,1220,1218,1,0,0,0,1221,
1225,3,136,68,0,1222,1224,3,262,131,0,1223,1222,1,0,0,0,1224,1227,1,0,0,
0,1225,1223,1,0,0,0,1225,1226,1,0,0,0,1226,1228,1,0,0,0,1227,1225,1,0,0,
0,1228,1229,5,85,0,0,1229,1230,3,2,1,0,1230,171,1,0,0,0,1231,1234,3,262,
131,0,1232,1234,5,35,0,0,1233,1231,1,0,0,0,1233,1232,1,0,0,0,1234,173,1,
0,0,0,1235,1236,5,62,0,0,1236,1237,3,176,88,0,1237,175,1,0,0,0,1238,1243,
3,178,89,0,1239,1240,5,83,0,0,1240,1242,3,178,89,0,1241,1239,1,0,0,0,1242,
1245,1,0,0,0,1243,1241,1,0,0,0,1243,1244,1,0,0,0,1244,177,1,0,0,0,1245,1243,
1,0,0,0,1246,1249,3,30,15,0,1247,1249,3,34,17,0,1248,1246,1,0,0,0,1248,1247,
1,0,0,0,1249,179,1,0,0,0,1250,1253,3,284,142,0,1251,1253,5,82,0,0,1252,1250,
1,0,0,0,1252,1251,1,0,0,0,1253,181,1,0,0,0,1254,1255,3,284,142,0,1255,183,
1,0,0,0,1256,1257,5,55,0,0,1257,1258,3,284,142,0,1258,185,1,0,0,0,1259,1261,
3,188,94,0,1260,1259,1,0,0,0,1261,1264,1,0,0,0,1262,1260,1,0,0,0,1262,1263,
1,0,0,0,1263,1265,1,0,0,0,1264,1262,1,0,0,0,1265,1267,3,190,95,0,1266,1268,
3,174,87,0,1267,1266,1,0,0,0,1267,1268,1,0,0,0,1268,1269,1,0,0,0,1269,1270,
3,194,97,0,1270,187,1,0,0,0,1271,1276,3,262,131,0,1272,1276,5,52,0,0,1273,
1276,5,51,0,0,1274,1276,5,50,0,0,1275,1271,1,0,0,0,1275,1272,1,0,0,0,1275,
1273,1,0,0,0,1275,1274,1,0,0,0,1276,189,1,0,0,0,1277,1279,3,106,53,0,1278,
1277,1,0,0,0,1278,1279,1,0,0,0,1279,1280,1,0,0,0,1280,1281,3,192,96,0,1281,
1285,5,76,0,0,1282,1283,3,164,82,0,1283,1284,5,83,0,0,1284,1286,1,0,0,0,
1285,1282,1,0,0,0,1285,1286,1,0,0,0,1286,1288,1,0,0,0,1287,1289,3,166,83,
0,1288,1287,1,0,0,0,1288,1289,1,0,0,0,1289,1290,1,0,0,0,1290,1291,5,77,0,
0,1291,191,1,0,0,0,1292,1293,3,4,2,0,1293,193,1,0,0,0,1294,1296,5,78,0,0,
1295,1297,3,196,98,0,1296,1295,1,0,0,0,1296,1297,1,0,0,0,1297,1299,1,0,0,
0,1298,1300,3,286,143,0,1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,1301,1,
0,0,0,1301,1302,5,79,0,0,1302,195,1,0,0,0,1303,1305,3,48,24,0,1304,1303,
1,0,0,0,1304,1305,1,0,0,0,1305,1306,1,0,0,0,1306,1307,7,7,0,0,1307,1309,
5,76,0,0,1308,1310,3,430,215,0,1309,1308,1,0,0,0,1309,1310,1,0,0,0,1310,
1311,1,0,0,0,1311,1312,5,77,0,0,1312,1330,5,82,0,0,1313,1316,3,66,33,0,1314,
1316,3,398,199,0,1315,1313,1,0,0,0,1315,1314,1,0,0,0,1316,1317,1,0,0,0,1317,
1319,5,84,0,0,1318,1320,3,48,24,0,1319,1318,1,0,0,0,1319,1320,1,0,0,0,1320,
1321,1,0,0,0,1321,1322,5,57,0,0,1322,1324,5,76,0,0,1323,1325,3,430,215,0,
1324,1323,1,0,0,0,1324,1325,1,0,0,0,1325,1326,1,0,0,0,1326,1327,5,77,0,0,
1327,1328,5,82,0,0,1328,1330,1,0,0,0,1329,1304,1,0,0,0,1329,1315,1,0,0,0,
1330,197,1,0,0,0,1331,1333,3,104,52,0,1332,1331,1,0,0,0,1333,1336,1,0,0,
0,1334,1332,1,0,0,0,1334,1335,1,0,0,0,1335,1337,1,0,0,0,1336,1334,1,0,0,
0,1337,1338,5,33,0,0,1338,1340,3,4,2,0,1339,1341,3,112,56,0,1340,1339,1,
0,0,0,1340,1341,1,0,0,0,1341,1342,1,0,0,0,1342,1343,3,200,100,0,1343,199,
1,0,0,0,1344,1346,5,78,0,0,1345,1347,3,202,101,0,1346,1345,1,0,0,0,1346,
1347,1,0,0,0,1347,1349,1,0,0,0,1348,1350,5,83,0,0,1349,1348,1,0,0,0,1349,
1350,1,0,0,0,1350,1352,1,0,0,0,1351,1353,3,208,104,0,1352,1351,1,0,0,0,1352,
1353,1,0,0,0,1353,1354,1,0,0,0,1354,1355,5,79,0,0,1355,201,1,0,0,0,1356,
1361,3,204,102,0,1357,1358,5,83,0,0,1358,1360,3,204,102,0,1359,1357,1,0,
0,0,1360,1363,1,0,0,0,1361,1359,1,0,0,0,1361,1362,1,0,0,0,1362,203,1,0,0,
0,1363,1361,1,0,0,0,1364,1366,3,206,103,0,1365,1364,1,0,0,0,1366,1369,1,
0,0,0,1367,1365,1,0,0,0,1367,1368,1,0,0,0,1368,1370,1,0,0,0,1369,1367,1,
0,0,0,1370,1376,3,2,1,0,1371,1373,5,76,0,0,1372,1374,3,430,215,0,1373,1372,
1,0,0,0,1373,1374,1,0,0,0,1374,1375,1,0,0,0,1375,1377,5,77,0,0,1376,1371,
1,0,0,0,1376,1377,1,0,0,0,1377,1379,1,0,0,0,1378,1380,3,118,59,0,1379,1378,
1,0,0,0,1379,1380,1,0,0,0,1380,205,1,0,0,0,1381,1382,3,262,131,0,1382,207,
1,0,0,0,1383,1387,5,82,0,0,1384,1386,3,120,60,0,1385,1384,1,0,0,0,1386,1389,
1,0,0,0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,209,1,0,0,0,1389,1387,1,
0,0,0,1390,1392,3,104,52,0,1391,1390,1,0,0,0,1392,1395,1,0,0,0,1393,1391,
1,0,0,0,1393,1394,1,0,0,0,1394,1396,1,0,0,0,1395,1393,1,0,0,0,1396,1397,
5,9,0,0,1397,1399,3,4,2,0,1398,1400,3,106,53,0,1399,1398,1,0,0,0,1399,1400,
1,0,0,0,1400,1401,1,0,0,0,1401,1403,3,212,106,0,1402,1404,3,112,56,0,1403,
1402,1,0,0,0,1403,1404,1,0,0,0,1404,1405,1,0,0,0,1405,1406,3,222,111,0,1406,
211,1,0,0,0,1407,1409,5,76,0,0,1408,1410,3,214,107,0,1409,1408,1,0,0,0,1409,
1410,1,0,0,0,1410,1411,1,0,0,0,1411,1412,5,77,0,0,1412,213,1,0,0,0,1413,
1418,3,216,108,0,1414,1415,5,83,0,0,1415,1417,3,216,108,0,1416,1414,1,0,
0,0,1417,1420,1,0,0,0,1418,1416,1,0,0,0,1418,1419,1,0,0,0,1419,215,1,0,0,
0,1420,1418,1,0,0,0,1421,1423,3,220,110,0,1422,1421,1,0,0,0,1423,1426,1,
0,0,0,1424,1422,1,0,0,0,1424,1425,1,0,0,0,1425,1427,1,0,0,0,1426,1424,1,
0,0,0,1427,1428,3,136,68,0,1428,1429,3,2,1,0,1429,1432,1,0,0,0,1430,1432,
3,218,109,0,1431,1424,1,0,0,0,1431,1430,1,0,0,0,1432,217,1,0,0,0,1433,1435,
3,220,110,0,1434,1433,1,0,0,0,1435,1438,1,0,0,0,1436,1434,1,0,0,0,1436,1437,
1,0,0,0,1437,1439,1,0,0,0,1438,1436,1,0,0,0,1439,1443,3,136,68,0,1440,1442,
3,262,131,0,1441,1440,1,0,0,0,1442,1445,1,0,0,0,1443,1441,1,0,0,0,1443,1444,
1,0,0,0,1444,1446,1,0,0,0,1445,1443,1,0,0,0,1446,1447,5,85,0,0,1447,1448,
3,2,1,0,1448,219,1,0,0,0,1449,1450,3,262,131,0,1450,221,1,0,0,0,1451,1455,
5,78,0,0,1452,1454,3,224,112,0,1453,1452,1,0,0,0,1454,1457,1,0,0,0,1455,
1453,1,0,0,0,1455,1456,1,0,0,0,1456,1458,1,0,0,0,1457,1455,1,0,0,0,1458,
1459,5,79,0,0,1459,223,1,0,0,0,1460,1463,3,120,60,0,1461,1463,3,226,113,
0,1462,1460,1,0,0,0,1462,1461,1,0,0,0,1463,225,1,0,0,0,1464,1466,3,188,94,
0,1465,1464,1,0,0,0,1466,1469,1,0,0,0,1467,1465,1,0,0,0,1467,1468,1,0,0,
0,1468,1470,1,0,0,0,1469,1467,1,0,0,0,1470,1471,3,192,96,0,1471,1472,3,194,
97,0,1472,227,1,0,0,0,1473,1476,3,230,115,0,1474,1476,3,250,125,0,1475,1473,
1,0,0,0,1475,1474,1,0,0,0,1476,229,1,0,0,0,1477,1479,3,232,116,0,1478,1477,
1,0,0,0,1479,1482,1,0,0,0,1480,1478,1,0,0,0,1480,1481,1,0,0,0,1481,1483,
1,0,0,0,1482,1480,1,0,0,0,1483,1484,5,45,0,0,1484,1486,3,4,2,0,1485,1487,
3,106,53,0,1486,1485,1,0,0,0,1486,1487,1,0,0,0,1487,1489,1,0,0,0,1488,1490,
3,234,117,0,1489,1488,1,0,0,0,1489,1490,1,0,0,0,1490,1492,1,0,0,0,1491,1493,
3,236,118,0,1492,1491,1,0,0,0,1492,1493,1,0,0,0,1493,1494,1,0,0,0,1494,1495,
3,238,119,0,1495,231,1,0,0,0,1496,1506,3,262,131,0,1497,1506,5,52,0,0,1498,
1506,5,51,0,0,1499,1506,5,50,0,0,1500,1506,5,18,0,0,1501,1506,5,55,0,0,1502,
1506,5,11,0,0,1503,1506,5,3,0,0,1504,1506,5,56,0,0,1505,1496,1,0,0,0,1505,
1497,1,0,0,0,1505,1498,1,0,0,0,1505,1499,1,0,0,0,1505,1500,1,0,0,0,1505,
1501,1,0,0,0,1505,1502,1,0,0,0,1505,1503,1,0,0,0,1505,1504,1,0,0,0,1506,
233,1,0,0,0,1507,1508,5,34,0,0,1508,1509,3,114,57,0,1509,235,1,0,0,0,1510,
1511,5,7,0,0,1511,1516,3,62,31,0,1512,1513,5,83,0,0,1513,1515,3,62,31,0,
1514,1512,1,0,0,0,1515,1518,1,0,0,0,1516,1514,1,0,0,0,1516,1517,1,0,0,0,
1517,237,1,0,0,0,1518,1516,1,0,0,0,1519,1523,5,78,0,0,1520,1522,3,240,120,
0,1521,1520,1,0,0,0,1522,1525,1,0,0,0,1523,1521,1,0,0,0,1523,1524,1,0,0,
0,1524,1526,1,0,0,0,1525,1523,1,0,0,0,1526,1527,5,79,0,0,1527,239,1,0,0,
0,1528,1534,3,242,121,0,1529,1534,3,246,123,0,1530,1534,3,100,50,0,1531,
1534,3,228,114,0,1532,1534,5,82,0,0,1533,1528,1,0,0,0,1533,1529,1,0,0,0,
1533,1530,1,0,0,0,1533,1531,1,0,0,0,1533,1532,1,0,0,0,1534,241,1,0,0,0,1535,
1537,3,244,122,0,1536,1535,1,0,0,0,1537,1540,1,0,0,0,1538,1536,1,0,0,0,1538,
1539,1,0,0,0,1539,1541,1,0,0,0,1540,1538,1,0,0,0,1541,1542,3,136,68,0,1542,
1543,3,128,64,0,1543,1544,5,82,0,0,1544,243,1,0,0,0,1545,1550,3,262,131,
0,1546,1550,5,52,0,0,1547,1550,5,55,0,0,1548,1550,5,35,0,0,1549,1545,1,0,
0,0,1549,1546,1,0,0,0,1549,1547,1,0,0,0,1549,1548,1,0,0,0,1550,245,1,0,0,
0,1551,1553,3,248,124,0,1552,1551,1,0,0,0,1553,1556,1,0,0,0,1554,1552,1,
0,0,0,1554,1555,1,0,0,0,1555,1557,1,0,0,0,1556,1554,1,0,0,0,1557,1558,3,
158,79,0,1558,1559,3,180,90,0,1559,247,1,0,0,0,1560,1568,3,262,131,0,1561,
1568,5,52,0,0,1562,1568,5,50,0,0,1563,1568,5,18,0,0,1564,1568,5,29,0,0,1565,
1568,5,55,0,0,1566,1568,5,56,0,0,1567,1560,1,0,0,0,1567,1561,1,0,0,0,1567,
1562,1,0,0,0,1567,1563,1,0,0,0,1567,1564,1,0,0,0,1567,1565,1,0,0,0,1567,
1566,1,0,0,0,1568,249,1,0,0,0,1569,1571,3,232,116,0,1570,1569,1,0,0,0,1571,
1574,1,0,0,0,1572,1570,1,0,0,0,1572,1573,1,0,0,0,1573,1575,1,0,0,0,1574,
1572,1,0,0,0,1575,1576,5,86,0,0,1576,1577,5,45,0,0,1577,1578,3,4,2,0,1578,
1579,3,252,126,0,1579,251,1,0,0,0,1580,1584,5,78,0,0,1581,1583,3,254,127,
0,1582,1581,1,0,0,0,1583,1586,1,0,0,0,1584,1582,1,0,0,0,1584,1585,1,0,0,
0,1585,1587,1,0,0,0,1586,1584,1,0,0,0,1587,1588,5,79,0,0,1588,253,1,0,0,
0,1589,1595,3,256,128,0,1590,1595,3,242,121,0,1591,1595,3,100,50,0,1592,
1595,3,228,114,0,1593,1595,5,82,0,0,1594,1589,1,0,0,0,1594,1590,1,0,0,0,
1594,1591,1,0,0,0,1594,1592,1,0,0,0,1594,1593,1,0,0,0,1595,255,1,0,0,0,1596,
1598,3,258,129,0,1597,1596,1,0,0,0,1598,1601,1,0,0,0,1599,1597,1,0,0,0,1599,
1600,1,0,0,0,1600,1602,1,0,0,0,1601,1599,1,0,0,0,1602,1603,3,136,68,0,1603,
1604,3,2,1,0,1604,1605,5,76,0,0,1605,1607,5,77,0,0,1606,1608,3,38,19,0,1607,
1606,1,0,0,0,1607,1608,1,0,0,0,1608,1610,1,0,0,0,1609,1611,3,260,130,0,1610,
1609,1,0,0,0,1610,1611,1,0,0,0,1611,1612,1,0,0,0,1612,1613,5,82,0,0,1613,
257,1,0,0,0,1614,1618,3,262,131,0,1615,1618,5,52,0,0,1616,1618,5,18,0,0,
1617,1614,1,0,0,0,1617,1615,1,0,0,0,1617,1616,1,0,0,0,1618,259,1,0,0,0,1619,
1620,5,29,0,0,1620,1621,3,270,135,0,1621,261,1,0,0,0,1622,1626,3,264,132,
0,1623,1626,3,276,138,0,1624,1626,3,278,139,0,1625,1622,1,0,0,0,1625,1623,
1,0,0,0,1625,1624,1,0,0,0,1626,263,1,0,0,0,1627,1628,5,86,0,0,1628,1629,
3,62,31,0,1629,1631,5,76,0,0,1630,1632,3,266,133,0,1631,1630,1,0,0,0,1631,
1632,1,0,0,0,1632,1633,1,0,0,0,1633,1634,5,77,0,0,1634,265,1,0,0,0,1635,
1640,3,268,134,0,1636,1637,5,83,0,0,1637,1639,3,268,134,0,1638,1636,1,0,
0,0,1639,1642,1,0,0,0,1640,1638,1,0,0,0,1640,1641,1,0,0,0,1641,267,1,0,0,
0,1642,1640,1,0,0,0,1643,1644,3,2,1,0,1644,1645,5,88,0,0,1645,1646,3,270,
135,0,1646,269,1,0,0,0,1647,1651,3,472,236,0,1648,1651,3,272,136,0,1649,
1651,3,262,131,0,1650,1647,1,0,0,0,1650,1648,1,0,0,0,1650,1649,1,0,0,0,1651,
271,1,0,0,0,1652,1654,5,78,0,0,1653,1655,3,274,137,0,1654,1653,1,0,0,0,1654,
1655,1,0,0,0,1655,1657,1,0,0,0,1656,1658,5,83,0,0,1657,1656,1,0,0,0,1657,
1658,1,0,0,0,1658,1659,1,0,0,0,1659,1660,5,79,0,0,1660,273,1,0,0,0,1661,
1666,3,270,135,0,1662,1663,5,83,0,0,1663,1665,3,270,135,0,1664,1662,1,0,
0,0,1665,1668,1,0,0,0,1666,1664,1,0,0,0,1666,1667,1,0,0,0,1667,275,1,0,0,
0,1668,1666,1,0,0,0,1669,1670,5,86,0,0,1670,1671,3,62,31,0,1671,277,1,0,
0,0,1672,1673,5,86,0,0,1673,1674,3,62,31,0,1674,1675,5,76,0,0,1675,1676,
3,270,135,0,1676,1677,5,77,0,0,1677,279,1,0,0,0,1678,1680,5,78,0,0,1679,
1681,3,282,141,0,1680,1679,1,0,0,0,1680,1681,1,0,0,0,1681,1683,1,0,0,0,1682,
1684,5,83,0,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,1685,1,0,0,0,1685,
1686,5,79,0,0,1686,281,1,0,0,0,1687,1692,3,134,67,0,1688,1689,5,83,0,0,1689,
1691,3,134,67,0,1690,1688,1,0,0,0,1691,1694,1,0,0,0,1692,1690,1,0,0,0,1692,
1693,1,0,0,0,1693,283,1,0,0,0,1694,1692,1,0,0,0,1695,1697,5,78,0,0,1696,
1698,3,286,143,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,1699,1,0,0,0,1699,
1700,5,79,0,0,1700,285,1,0,0,0,1701,1705,3,288,144,0,1702,1704,3,288,144,
0,1703,1702,1,0,0,0,1704,1707,1,0,0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,
0,1706,287,1,0,0,0,1707,1705,1,0,0,0,1708,1712,3,290,145,0,1709,1712,3,296,
148,0,1710,1712,3,298,149,0,1711,1708,1,0,0,0,1711,1709,1,0,0,0,1711,1710,
1,0,0,0,1712,289,1,0,0,0,1713,1716,3,100,50,0,1714,1716,3,230,115,0,1715,
1713,1,0,0,0,1715,1714,1,0,0,0,1716,291,1,0,0,0,1717,1719,3,172,86,0,1718,
1717,1,0,0,0,1719,1722,1,0,0,0,1720,1718,1,0,0,0,1720,1721,1,0,0,0,1721,
1723,1,0,0,0,1722,1720,1,0,0,0,1723,1725,3,294,147,0,1724,1726,3,128,64,
0,1725,1724,1,0,0,0,1725,1726,1,0,0,0,1726,293,1,0,0,0,1727,1730,3,136,68,
0,1728,1730,5,15,0,0,1729,1727,1,0,0,0,1729,1728,1,0,0,0,1730,295,1,0,0,
0,1731,1732,3,292,146,0,1732,1733,5,82,0,0,1733,297,1,0,0,0,1734,1741,3,
302,151,0,1735,1741,3,306,153,0,1736,1741,3,314,157,0,1737,1741,3,316,158,
0,1738,1741,3,334,167,0,1739,1741,3,340,170,0,1740,1734,1,0,0,0,1740,1735,
1,0,0,0,1740,1736,1,0,0,0,1740,1737,1,0,0,0,1740,1738,1,0,0,0,1740,1739,
1,0,0,0,1741,299,1,0,0,0,1742,1748,3,302,151,0,1743,1748,3,308,154,0,1744,
1748,3,318,159,0,1745,1748,3,336,168,0,1746,1748,3,342,171,0,1747,1742,1,
0,0,0,1747,1743,1,0,0,0,1747,1744,1,0,0,0,1747,1745,1,0,0,0,1747,1746,1,
0,0,0,1748,301,1,0,0,0,1749,1763,3,284,142,0,1750,1763,3,304,152,0,1751,
1763,3,310,155,0,1752,1763,3,320,160,0,1753,1763,3,322,161,0,1754,1763,3,
338,169,0,1755,1763,3,358,179,0,1756,1763,3,360,180,0,1757,1763,3,362,181,
0,1758,1763,3,366,183,0,1759,1763,3,364,182,0,1760,1763,3,368,184,0,1761,
1763,3,390,195,0,1762,1749,1,0,0,0,1762,1750,1,0,0,0,1762,1751,1,0,0,0,1762,
1752,1,0,0,0,1762,1753,1,0,0,0,1762,1754,1,0,0,0,1762,1755,1,0,0,0,1762,
1756,1,0,0,0,1762,1757,1,0,0,0,1762,1758,1,0,0,0,1762,1759,1,0,0,0,1762,
1760,1,0,0,0,1762,1761,1,0,0,0,1763,303,1,0,0,0,1764,1765,5,82,0,0,1765,
305,1,0,0,0,1766,1767,3,2,1,0,1767,1768,5,94,0,0,1768,1769,3,298,149,0,1769,
307,1,0,0,0,1770,1771,3,2,1,0,1771,1772,5,94,0,0,1772,1773,3,300,150,0,1773,
309,1,0,0,0,1774,1775,3,312,156,0,1775,1776,5,82,0,0,1776,311,1,0,0,0,1777,
1785,3,476,238,0,1778,1785,3,444,222,0,1779,1785,3,446,223,0,1780,1785,3,
438,219,0,1781,1785,3,440,220,0,1782,1785,3,428,214,0,1783,1785,3,406,203,
0,1784,1777,1,0,0,0,1784,1778,1,0,0,0,1784,1779,1,0,0,0,1784,1780,1,0,0,
0,1784,1781,1,0,0,0,1784,1782,1,0,0,0,1784,1783,1,0,0,0,1785,313,1,0,0,0,
1786,1787,5,39,0,0,1787,1788,5,76,0,0,1788,1789,3,396,198,0,1789,1790,5,
77,0,0,1790,1791,3,298,149,0,1791,315,1,0,0,0,1792,1793,5,39,0,0,1793,1794,
5,76,0,0,1794,1795,3,396,198,0,1795,1796,5,77,0,0,1796,1797,3,300,150,0,
1797,1798,5,32,0,0,1798,1799,3,298,149,0,1799,317,1,0,0,0,1800,1801,5,39,
0,0,1801,1802,5,76,0,0,1802,1803,3,396,198,0,1803,1804,5,77,0,0,1804,1805,
3,300,150,0,1805,1806,5,32,0,0,1806,1807,3,300,150,0,1807,319,1,0,0,0,1808,
1809,5,19,0,0,1809,1812,3,396,198,0,1810,1811,5,94,0,0,1811,1813,3,396,198,
0,1812,1810,1,0,0,0,1812,1813,1,0,0,0,1813,1814,1,0,0,0,1814,1815,5,82,0,
0,1815,321,1,0,0,0,1816,1817,5,58,0,0,1817,1818,5,76,0,0,1818,1819,3,396,
198,0,1819,1820,5,77,0,0,1820,1821,3,324,162,0,1821,323,1,0,0,0,1822,1823,
5,78,0,0,1823,1827,3,326,163,0,1824,1826,3,326,163,0,1825,1824,1,0,0,0,1826,
1829,1,0,0,0,1827,1825,1,0,0,0,1827,1828,1,0,0,0,1828,1830,1,0,0,0,1829,
1827,1,0,0,0,1830,1831,5,79,0,0,1831,1849,1,0,0,0,1832,1836,5,78,0,0,1833,
1835,3,328,164,0,1834,1833,1,0,0,0,1835,1838,1,0,0,0,1836,1834,1,0,0,0,1836,
1837,1,0,0,0,1837,1844,1,0,0,0,1838,1836,1,0,0,0,1839,1840,3,330,165,0,1840,
1841,5,94,0,0,1841,1843,1,0,0,0,1842,1839,1,0,0,0,1843,1846,1,0,0,0,1844,
1842,1,0,0,0,1844,1845,1,0,0,0,1845,1847,1,0,0,0,1846,1844,1,0,0,0,1847,
1849,5,79,0,0,1848,1822,1,0,0,0,1848,1832,1,0,0,0,1849,325,1,0,0,0,1850,
1851,3,330,165,0,1851,1857,5,95,0,0,1852,1853,3,396,198,0,1853,1854,5,82,
0,0,1854,1858,1,0,0,0,1855,1858,3,284,142,0,1856,1858,3,364,182,0,1857,1852,
1,0,0,0,1857,1855,1,0,0,0,1857,1856,1,0,0,0,1858,327,1,0,0,0,1859,1860,3,
330,165,0,1860,1866,5,94,0,0,1861,1862,3,330,165,0,1862,1863,5,94,0,0,1863,
1865,1,0,0,0,1864,1861,1,0,0,0,1865,1868,1,0,0,0,1866,1864,1,0,0,0,1866,
1867,1,0,0,0,1867,1869,1,0,0,0,1868,1866,1,0,0,0,1869,1870,3,286,143,0,1870,
329,1,0,0,0,1871,1872,5,23,0,0,1872,1877,3,332,166,0,1873,1874,5,83,0,0,
1874,1876,3,332,166,0,1875,1873,1,0,0,0,1876,1879,1,0,0,0,1877,1875,1,0,
0,0,1877,1878,1,0,0,0,1878,1882,1,0,0,0,1879,1877,1,0,0,0,1880,1882,5,29,
0,0,1881,1871,1,0,0,0,1881,1880,1,0,0,0,1882,331,1,0,0,0,1883,1884,3,472,
236,0,1884,333,1,0,0,0,1885,1886,5,67,0,0,1886,1887,5,76,0,0,1887,1888,3,
396,198,0,1888,1889,5,77,0,0,1889,1890,3,298,149,0,1890,335,1,0,0,0,1891,
1892,5,67,0,0,1892,1893,5,76,0,0,1893,1894,3,396,198,0,1894,1895,5,77,0,
0,1895,1896,3,300,150,0,1896,337,1,0,0,0,1897,1898,5,30,0,0,1898,1899,3,
298,149,0,1899,1900,5,67,0,0,1900,1901,5,76,0,0,1901,1902,3,396,198,0,1902,
1903,5,77,0,0,1903,1904,5,82,0,0,1904,339,1,0,0,0,1905,1908,3,344,172,0,
1906,1908,3,354,177,0,1907,1905,1,0,0,0,1907,1906,1,0,0,0,1908,341,1,0,0,
0,1909,1912,3,346,173,0,1910,1912,3,356,178,0,1911,1909,1,0,0,0,1911,1910,
1,0,0,0,1912,343,1,0,0,0,1913,1914,5,38,0,0,1914,1916,5,76,0,0,1915,1917,
3,348,174,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,1918,1,0,0,0,1918,1920,
5,82,0,0,1919,1921,3,396,198,0,1920,1919,1,0,0,0,1920,1921,1,0,0,0,1921,
1922,1,0,0,0,1922,1924,5,82,0,0,1923,1925,3,350,175,0,1924,1923,1,0,0,0,
1924,1925,1,0,0,0,1925,1926,1,0,0,0,1926,1927,5,77,0,0,1927,1928,3,298,149,
0,1928,345,1,0,0,0,1929,1930,5,38,0,0,1930,1932,5,76,0,0,1931,1933,3,348,
174,0,1932,1931,1,0,0,0,1932,1933,1,0,0,0,1933,1934,1,0,0,0,1934,1936,5,
82,0,0,1935,1937,3,396,198,0,1936,1935,1,0,0,0,1936,1937,1,0,0,0,1937,1938,
1,0,0,0,1938,1940,5,82,0,0,1939,1941,3,350,175,0,1940,1939,1,0,0,0,1940,
1941,1,0,0,0,1941,1942,1,0,0,0,1942,1943,5,77,0,0,1943,1944,3,300,150,0,
1944,347,1,0,0,0,1945,1948,3,352,176,0,1946,1948,3,292,146,0,1947,1945,1,
0,0,0,1947,1946,1,0,0,0,1948,349,1,0,0,0,1949,1950,3,352,176,0,1950,351,
1,0,0,0,1951,1956,3,312,156,0,1952,1953,5,83,0,0,1953,1955,3,312,156,0,1954,
1952,1,0,0,0,1955,1958,1,0,0,0,1956,1954,1,0,0,0,1956,1957,1,0,0,0,1957,
353,1,0,0,0,1958,1956,1,0,0,0,1959,1960,5,38,0,0,1960,1961,5,76,0,0,1961,
1962,3,292,146,0,1962,1963,5,94,0,0,1963,1964,3,396,198,0,1964,1965,5,77,
0,0,1965,1966,3,298,149,0,1966,355,1,0,0,0,1967,1968,5,38,0,0,1968,1969,
5,76,0,0,1969,1970,3,292,146,0,1970,1971,5,94,0,0,1971,1972,3,396,198,0,
1972,1973,5,77,0,0,1973,1974,3,300,150,0,1974,357,1,0,0,0,1975,1977,5,21,
0,0,1976,1978,3,2,1,0,1977,1976,1,0,0,0,1977,1978,1,0,0,0,1978,1979,1,0,
0,0,1979,1980,5,82,0,0,1980,359,1,0,0,0,1981,1983,5,28,0,0,1982,1984,3,2,
1,0,1983,1982,1,0,0,0,1983,1984,1,0,0,0,1984,1985,1,0,0,0,1985,1986,5,82,
0,0,1986,361,1,0,0,0,1987,1989,5,53,0,0,1988,1990,3,396,198,0,1989,1988,
1,0,0,0,1989,1990,1,0,0,0,1990,1991,1,0,0,0,1991,1992,5,82,0,0,1992,363,
1,0,0,0,1993,1994,5,61,0,0,1994,1995,3,396,198,0,1995,1996,5,82,0,0,1996,
365,1,0,0,0,1997,1998,5,59,0,0,1998,1999,5,76,0,0,1999,2000,3,396,198,0,
2000,2001,5,77,0,0,2001,2002,3,284,142,0,2002,367,1,0,0,0,2003,2004,5,64,
0,0,2004,2005,3,284,142,0,2005,2006,3,370,185,0,2006,2020,1,0,0,0,2007,2008,
5,64,0,0,2008,2009,3,284,142,0,2009,2010,3,378,189,0,2010,2020,1,0,0,0,2011,
2012,5,64,0,0,2012,2014,3,284,142,0,2013,2015,3,370,185,0,2014,2013,1,0,
0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,2017,3,378,189,0,2017,2020,
1,0,0,0,2018,2020,3,380,190,0,2019,2003,1,0,0,0,2019,2007,1,0,0,0,2019,2011,
1,0,0,0,2019,2018,1,0,0,0,2020,369,1,0,0,0,2021,2025,3,372,186,0,2022,2024,
3,372,186,0,2023,2022,1,0,0,0,2024,2027,1,0,0,0,2025,2023,1,0,0,0,2025,2026,
1,0,0,0,2026,371,1,0,0,0,2027,2025,1,0,0,0,2028,2029,5,24,0,0,2029,2030,
5,76,0,0,2030,2031,3,374,187,0,2031,2032,5,77,0,0,2032,2033,3,284,142,0,
2033,373,1,0,0,0,2034,2036,3,172,86,0,2035,2034,1,0,0,0,2036,2039,1,0,0,
0,2037,2035,1,0,0,0,2037,2038,1,0,0,0,2038,2040,1,0,0,0,2039,2037,1,0,0,
0,2040,2041,3,376,188,0,2041,2042,3,132,66,0,2042,375,1,0,0,0,2043,2048,
3,146,73,0,2044,2045,5,109,0,0,2045,2047,3,30,15,0,2046,2044,1,0,0,0,2047,
2050,1,0,0,0,2048,2046,1,0,0,0,2048,2049,1,0,0,0,2049,377,1,0,0,0,2050,2048,
1,0,0,0,2051,2052,5,36,0,0,2052,2053,3,284,142,0,2053,379,1,0,0,0,2054,2055,
5,64,0,0,2055,2056,3,382,191,0,2056,2058,3,284,142,0,2057,2059,3,370,185,
0,2058,2057,1,0,0,0,2058,2059,1,0,0,0,2059,2061,1,0,0,0,2060,2062,3,378,
189,0,2061,2060,1,0,0,0,2061,2062,1,0,0,0,2062,381,1,0,0,0,2063,2064,5,76,
0,0,2064,2066,3,384,192,0,2065,2067,5,82,0,0,2066,2065,1,0,0,0,2066,2067,
1,0,0,0,2067,2068,1,0,0,0,2068,2069,5,77,0,0,2069,383,1,0,0,0,2070,2075,
3,386,193,0,2071,2072,5,82,0,0,2072,2074,3,386,193,0,2073,2071,1,0,0,0,2074,
2077,1,0,0,0,2075,2073,1,0,0,0,2075,2076,1,0,0,0,2076,385,1,0,0,0,2077,2075,
1,0,0,0,2078,2081,3,292,146,0,2079,2081,3,388,194,0,2080,2078,1,0,0,0,2080,
2079,1,0,0,0,2081,387,1,0,0,0,2082,2085,3,66,33,0,2083,2085,3,426,213,0,
2084,2082,1,0,0,0,2084,2083,1,0,0,0,2085,389,1,0,0,0,2086,2087,5,17,0,0,
2087,2088,3,396,198,0,2088,2089,5,82,0,0,2089,391,1,0,0,0,2090,2091,3,394,
197,0,2091,393,1,0,0,0,2092,2093,3,292,146,0,2093,395,1,0,0,0,2094,2097,
3,482,241,0,2095,2097,3,474,237,0,2096,2094,1,0,0,0,2096,2095,1,0,0,0,2097,
397,1,0,0,0,2098,2101,3,400,200,0,2099,2101,3,414,207,0,2100,2098,1,0,0,
0,2100,2099,1,0,0,0,2101,399,1,0,0,0,2102,2104,3,14,7,0,2103,2105,3,402,
201,0,2104,2103,1,0,0,0,2104,2105,1,0,0,0,2105,2320,1,0,0,0,2106,2108,3,
404,202,0,2107,2109,3,402,201,0,2108,2107,1,0,0,0,2108,2109,1,0,0,0,2109,
2320,1,0,0,0,2110,2112,5,60,0,0,2111,2113,3,402,201,0,2112,2111,1,0,0,0,
2112,2113,1,0,0,0,2113,2320,1,0,0,0,2114,2115,3,62,31,0,2115,2116,5,84,0,
0,2116,2118,5,60,0,0,2117,2119,3,402,201,0,2118,2117,1,0,0,0,2118,2119,1,
0,0,0,2119,2320,1,0,0,0,2120,2121,5,76,0,0,2121,2122,3,396,198,0,2122,2124,
5,77,0,0,2123,2125,3,402,201,0,2124,2123,1,0,0,0,2124,2125,1,0,0,0,2125,
2320,1,0,0,0,2126,2128,3,408,204,0,2127,2129,3,402,201,0,2128,2127,1,0,0,
0,2128,2129,1,0,0,0,2129,2320,1,0,0,0,2130,2131,3,66,33,0,2131,2132,5,84,
0,0,2132,2134,3,408,204,0,2133,2135,3,402,201,0,2134,2133,1,0,0,0,2134,2135,
1,0,0,0,2135,2320,1,0,0,0,2136,2137,3,414,207,0,2137,2138,5,84,0,0,2138,
2140,3,408,204,0,2139,2141,3,402,201,0,2140,2139,1,0,0,0,2140,2141,1,0,0,
0,2141,2320,1,0,0,0,2142,2143,3,414,207,0,2143,2144,5,84,0,0,2144,2146,3,
2,1,0,2145,2147,3,402,201,0,2146,2145,1,0,0,0,2146,2147,1,0,0,0,2147,2320,
1,0,0,0,2148,2149,5,57,0,0,2149,2150,5,84,0,0,2150,2152,3,2,1,0,2151,2153,
3,402,201,0,2152,2151,1,0,0,0,2152,2153,1,0,0,0,2153,2320,1,0,0,0,2154,2155,
3,62,31,0,2155,2156,5,84,0,0,2156,2157,5,57,0,0,2157,2158,5,84,0,0,2158,
2160,3,2,1,0,2159,2161,3,402,201,0,2160,2159,1,0,0,0,2160,2161,1,0,0,0,2161,
2320,1,0,0,0,2162,2163,3,66,33,0,2163,2164,5,80,0,0,2164,2165,3,396,198,
0,2165,2167,5,81,0,0,2166,2168,3,402,201,0,2167,2166,1,0,0,0,2167,2168,1,
0,0,0,2168,2320,1,0,0,0,2169,2170,3,418,209,0,2170,2171,5,80,0,0,2171,2172,
3,396,198,0,2172,2174,5,81,0,0,2173,2175,3,402,201,0,2174,2173,1,0,0,0,2174,
2175,1,0,0,0,2175,2320,1,0,0,0,2176,2177,3,68,34,0,2177,2179,5,76,0,0,2178,
2180,3,430,215,0,2179,2178,1,0,0,0,2179,2180,1,0,0,0,2180,2181,1,0,0,0,2181,
2183,5,77,0,0,2182,2184,3,402,201,0,2183,2182,1,0,0,0,2183,2184,1,0,0,0,
2184,2320,1,0,0,0,2185,2186,3,62,31,0,2186,2188,5,84,0,0,2187,2189,3,48,
24,0,2188,2187,1,0,0,0,2188,2189,1,0,0,0,2189,2190,1,0,0,0,2190,2191,3,2,
1,0,2191,2193,5,76,0,0,2192,2194,3,430,215,0,2193,2192,1,0,0,0,2193,2194,
1,0,0,0,2194,2195,1,0,0,0,2195,2197,5,77,0,0,2196,2198,3,402,201,0,2197,
2196,1,0,0,0,2197,2198,1,0,0,0,2198,2320,1,0,0,0,2199,2200,3,66,33,0,2200,
2202,5,84,0,0,2201,2203,3,48,24,0,2202,2201,1,0,0,0,2202,2203,1,0,0,0,2203,
2204,1,0,0,0,2204,2205,3,2,1,0,2205,2207,5,76,0,0,2206,2208,3,430,215,0,
2207,2206,1,0,0,0,2207,2208,1,0,0,0,2208,2209,1,0,0,0,2209,2211,5,77,0,0,
2210,2212,3,402,201,0,2211,2210,1,0,0,0,2211,2212,1,0,0,0,2212,2320,1,0,
0,0,2213,2214,3,414,207,0,2214,2216,5,84,0,0,2215,2217,3,48,24,0,2216,2215,
1,0,0,0,2216,2217,1,0,0,0,2217,2218,1,0,0,0,2218,2219,3,2,1,0,2219,2221,
5,76,0,0,2220,2222,3,430,215,0,2221,2220,1,0,0,0,2221,2222,1,0,0,0,2222,
2223,1,0,0,0,2223,2225,5,77,0,0,2224,2226,3,402,201,0,2225,2224,1,0,0,0,
2225,2226,1,0,0,0,2226,2320,1,0,0,0,2227,2228,5,57,0,0,2228,2230,5,84,0,
0,2229,2231,3,48,24,0,2230,2229,1,0,0,0,2230,2231,1,0,0,0,2231,2232,1,0,
0,0,2232,2233,3,2,1,0,2233,2235,5,76,0,0,2234,2236,3,430,215,0,2235,2234,
1,0,0,0,2235,2236,1,0,0,0,2236,2237,1,0,0,0,2237,2239,5,77,0,0,2238,2240,
3,402,201,0,2239,2238,1,0,0,0,2239,2240,1,0,0,0,2240,2320,1,0,0,0,2241,2242,
3,62,31,0,2242,2243,5,84,0,0,2243,2244,5,57,0,0,2244,2246,5,84,0,0,2245,
2247,3,48,24,0,2246,2245,1,0,0,0,2246,2247,1,0,0,0,2247,2248,1,0,0,0,2248,
2249,3,2,1,0,2249,2251,5,76,0,0,2250,2252,3,430,215,0,2251,2250,1,0,0,0,
2251,2252,1,0,0,0,2252,2253,1,0,0,0,2253,2255,5,77,0,0,2254,2256,3,402,201,
0,2255,2254,1,0,0,0,2255,2256,1,0,0,0,2256,2320,1,0,0,0,2257,2258,3,66,33,
0,2258,2260,5,87,0,0,2259,2261,3,48,24,0,2260,2259,1,0,0,0,2260,2261,1,0,
0,0,2261,2262,1,0,0,0,2262,2264,3,2,1,0,2263,2265,3,402,201,0,2264,2263,
1,0,0,0,2264,2265,1,0,0,0,2265,2320,1,0,0,0,2266,2267,3,414,207,0,2267,2269,
5,87,0,0,2268,2270,3,48,24,0,2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2271,
1,0,0,0,2271,2273,3,2,1,0,2272,2274,3,402,201,0,2273,2272,1,0,0,0,2273,2274,
1,0,0,0,2274,2320,1,0,0,0,2275,2276,3,24,12,0,2276,2278,5,87,0,0,2277,2279,
3,48,24,0,2278,2277,1,0,0,0,2278,2279,1,0,0,0,2279,2280,1,0,0,0,2280,2282,
3,2,1,0,2281,2283,3,402,201,0,2282,2281,1,0,0,0,2282,2283,1,0,0,0,2283,2320,
1,0,0,0,2284,2285,5,57,0,0,2285,2287,5,87,0,0,2286,2288,3,48,24,0,2287,2286,
1,0,0,0,2287,2288,1,0,0,0,2288,2289,1,0,0,0,2289,2291,3,2,1,0,2290,2292,
3,402,201,0,2291,2290,1,0,0,0,2291,2292,1,0,0,0,2292,2320,1,0,0,0,2293,2294,
3,62,31,0,2294,2295,5,84,0,0,2295,2296,5,57,0,0,2296,2298,5,87,0,0,2297,
2299,3,48,24,0,2298,2297,1,0,0,0,2298,2299,1,0,0,0,2299,2300,1,0,0,0,2300,
2302,3,2,1,0,2301,2303,3,402,201,0,2302,2301,1,0,0,0,2302,2303,1,0,0,0,2303,
2320,1,0,0,0,2304,2305,3,30,15,0,2305,2307,5,87,0,0,2306,2308,3,48,24,0,
2307,2306,1,0,0,0,2307,2308,1,0,0,0,2308,2309,1,0,0,0,2309,2311,5,48,0,0,
2310,2312,3,402,201,0,2311,2310,1,0,0,0,2311,2312,1,0,0,0,2312,2320,1,0,
0,0,2313,2314,3,36,18,0,2314,2315,5,87,0,0,2315,2317,5,48,0,0,2316,2318,
3,402,201,0,2317,2316,1,0,0,0,2317,2318,1,0,0,0,2318,2320,1,0,0,0,2319,2102,
1,0,0,0,2319,2106,1,0,0,0,2319,2110,1,0,0,0,2319,2114,1,0,0,0,2319,2120,
1,0,0,0,2319,2126,1,0,0,0,2319,2130,1,0,0,0,2319,2136,1,0,0,0,2319,2142,
1,0,0,0,2319,2148,1,0,0,0,2319,2154,1,0,0,0,2319,2162,1,0,0,0,2319,2169,
1,0,0,0,2319,2176,1,0,0,0,2319,2185,1,0,0,0,2319,2199,1,0,0,0,2319,2213,
1,0,0,0,2319,2227,1,0,0,0,2319,2241,1,0,0,0,2319,2257,1,0,0,0,2319,2266,
1,0,0,0,2319,2275,1,0,0,0,2319,2284,1,0,0,0,2319,2293,1,0,0,0,2319,2304,
1,0,0,0,2319,2313,1,0,0,0,2320,401,1,0,0,0,2321,2322,5,84,0,0,2322,2324,
3,408,204,0,2323,2325,3,402,201,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,
2359,1,0,0,0,2326,2327,5,84,0,0,2327,2329,3,2,1,0,2328,2330,3,402,201,0,
2329,2328,1,0,0,0,2329,2330,1,0,0,0,2330,2359,1,0,0,0,2331,2332,5,80,0,0,
2332,2333,3,396,198,0,2333,2335,5,81,0,0,2334,2336,3,402,201,0,2335,2334,
1,0,0,0,2335,2336,1,0,0,0,2336,2359,1,0,0,0,2337,2339,5,84,0,0,2338,2340,
3,48,24,0,2339,2338,1,0,0,0,2339,2340,1,0,0,0,2340,2341,1,0,0,0,2341,2342,
3,2,1,0,2342,2344,5,76,0,0,2343,2345,3,430,215,0,2344,2343,1,0,0,0,2344,
2345,1,0,0,0,2345,2346,1,0,0,0,2346,2348,5,77,0,0,2347,2349,3,402,201,0,
2348,2347,1,0,0,0,2348,2349,1,0,0,0,2349,2359,1,0,0,0,2350,2352,5,87,0,0,
2351,2353,3,48,24,0,2352,2351,1,0,0,0,2352,2353,1,0,0,0,2353,2354,1,0,0,
0,2354,2356,3,2,1,0,2355,2357,3,402,201,0,2356,2355,1,0,0,0,2356,2357,1,
0,0,0,2357,2359,1,0,0,0,2358,2321,1,0,0,0,2358,2326,1,0,0,0,2358,2331,1,
0,0,0,2358,2337,1,0,0,0,2358,2350,1,0,0,0,2359,403,1,0,0,0,2360,2365,3,62,
31,0,2361,2362,5,80,0,0,2362,2364,5,81,0,0,2363,2361,1,0,0,0,2364,2367,1,
0,0,0,2365,2363,1,0,0,0,2365,2366,1,0,0,0,2366,2368,1,0,0,0,2367,2365,1,
0,0,0,2368,2369,5,84,0,0,2369,2370,5,26,0,0,2370,2396,1,0,0,0,2371,2376,
3,18,9,0,2372,2373,5,80,0,0,2373,2375,5,81,0,0,2374,2372,1,0,0,0,2375,2378,
1,0,0,0,2376,2374,1,0,0,0,2376,2377,1,0,0,0,2377,2379,1,0,0,0,2378,2376,
1,0,0,0,2379,2380,5,84,0,0,2380,2381,5,26,0,0,2381,2396,1,0,0,0,2382,2387,
5,20,0,0,2383,2384,5,80,0,0,2384,2386,5,81,0,0,2385,2383,1,0,0,0,2386,2389,
1,0,0,0,2387,2385,1,0,0,0,2387,2388,1,0,0,0,2388,2390,1,0,0,0,2389,2387,
1,0,0,0,2390,2391,5,84,0,0,2391,2396,5,26,0,0,2392,2393,5,65,0,0,2393,2394,
5,84,0,0,2394,2396,5,26,0,0,2395,2360,1,0,0,0,2395,2371,1,0,0,0,2395,2382,
1,0,0,0,2395,2392,1,0,0,0,2396,405,1,0,0,0,2397,2407,3,408,204,0,2398,2399,
3,66,33,0,2399,2400,5,84,0,0,2400,2401,3,408,204,0,2401,2407,1,0,0,0,2402,
2403,3,398,199,0,2403,2404,5,84,0,0,2404,2405,3,408,204,0,2405,2407,1,0,
0,0,2406,2397,1,0,0,0,2406,2398,1,0,0,0,2406,2402,1,0,0,0,2407,407,1,0,0,
0,2408,2410,5,48,0,0,2409,2411,3,48,24,0,2410,2409,1,0,0,0,2410,2411,1,0,
0,0,2411,2412,1,0,0,0,2412,2413,3,410,205,0,2413,2415,5,76,0,0,2414,2416,
3,430,215,0,2415,2414,1,0,0,0,2415,2416,1,0,0,0,2416,2417,1,0,0,0,2417,2419,
5,77,0,0,2418,2420,3,118,59,0,2419,2418,1,0,0,0,2419,2420,1,0,0,0,2420,409,
1,0,0,0,2421,2423,3,262,131,0,2422,2421,1,0,0,0,2423,2426,1,0,0,0,2424,2422,
1,0,0,0,2424,2425,1,0,0,0,2425,2427,1,0,0,0,2426,2424,1,0,0,0,2427,2438,
3,2,1,0,2428,2432,5,84,0,0,2429,2431,3,262,131,0,2430,2429,1,0,0,0,2431,
2434,1,0,0,0,2432,2430,1,0,0,0,2432,2433,1,0,0,0,2433,2435,1,0,0,0,2434,
2432,1,0,0,0,2435,2437,3,2,1,0,2436,2428,1,0,0,0,2437,2440,1,0,0,0,2438,
2436,1,0,0,0,2438,2439,1,0,0,0,2439,2442,1,0,0,0,2440,2438,1,0,0,0,2441,
2443,3,412,206,0,2442,2441,1,0,0,0,2442,2443,1,0,0,0,2443,411,1,0,0,0,2444,
2447,3,48,24,0,2445,2447,5,4,0,0,2446,2444,1,0,0,0,2446,2445,1,0,0,0,2447,
413,1,0,0,0,2448,2451,3,416,208,0,2449,2451,3,418,209,0,2450,2448,1,0,0,
0,2450,2449,1,0,0,0,2451,415,1,0,0,0,2452,2453,5,48,0,0,2453,2454,3,16,8,
0,2454,2456,3,420,210,0,2455,2457,3,38,19,0,2456,2455,1,0,0,0,2456,2457,
1,0,0,0,2457,2465,1,0,0,0,2458,2459,5,48,0,0,2459,2460,3,30,15,0,2460,2462,
3,420,210,0,2461,2463,3,38,19,0,2462,2461,1,0,0,0,2462,2463,1,0,0,0,2463,
2465,1,0,0,0,2464,2452,1,0,0,0,2464,2458,1,0,0,0,2465,417,1,0,0,0,2466,2467,
5,48,0,0,2467,2468,3,16,8,0,2468,2469,3,38,19,0,2469,2470,3,280,140,0,2470,
2477,1,0,0,0,2471,2472,5,48,0,0,2472,2473,3,28,14,0,2473,2474,3,38,19,0,
2474,2475,3,280,140,0,2475,2477,1,0,0,0,2476,2466,1,0,0,0,2476,2471,1,0,
0,0,2477,419,1,0,0,0,2478,2482,3,422,211,0,2479,2481,3,422,211,0,2480,2479,
1,0,0,0,2481,2484,1,0,0,0,2482,2480,1,0,0,0,2482,2483,1,0,0,0,2483,421,1,
0,0,0,2484,2482,1,0,0,0,2485,2487,3,262,131,0,2486,2485,1,0,0,0,2487,2490,
1,0,0,0,2488,2486,1,0,0,0,2488,2489,1,0,0,0,2489,2491,1,0,0,0,2490,2488,
1,0,0,0,2491,2492,5,80,0,0,2492,2493,3,396,198,0,2493,2494,5,81,0,0,2494,
423,1,0,0,0,2495,2496,3,66,33,0,2496,2497,5,80,0,0,2497,2498,3,396,198,0,
2498,2499,5,81,0,0,2499,2511,1,0,0,0,2500,2501,3,400,200,0,2501,2502,5,80,
0,0,2502,2503,3,396,198,0,2503,2504,5,81,0,0,2504,2511,1,0,0,0,2505,2506,
3,418,209,0,2506,2507,5,80,0,0,2507,2508,3,396,198,0,2508,2509,5,81,0,0,
2509,2511,1,0,0,0,2510,2495,1,0,0,0,2510,2500,1,0,0,0,2510,2505,1,0,0,0,
2511,425,1,0,0,0,2512,2513,3,398,199,0,2513,2514,5,84,0,0,2514,2515,3,2,
1,0,2515,2526,1,0,0,0,2516,2517,5,57,0,0,2517,2518,5,84,0,0,2518,2526,3,
2,1,0,2519,2520,3,62,31,0,2520,2521,5,84,0,0,2521,2522,5,57,0,0,2522,2523,
5,84,0,0,2523,2524,3,2,1,0,2524,2526,1,0,0,0,2525,2512,1,0,0,0,2525,2516,
1,0,0,0,2525,2519,1,0,0,0,2526,427,1,0,0,0,2527,2528,3,68,34,0,2528,2530,
5,76,0,0,2529,2531,3,430,215,0,2530,2529,1,0,0,0,2530,2531,1,0,0,0,2531,
2532,1,0,0,0,2532,2533,5,77,0,0,2533,2597,1,0,0,0,2534,2535,3,62,31,0,2535,
2537,5,84,0,0,2536,2538,3,48,24,0,2537,2536,1,0,0,0,2537,2538,1,0,0,0,2538,
2539,1,0,0,0,2539,2540,3,2,1,0,2540,2542,5,76,0,0,2541,2543,3,430,215,0,
2542,2541,1,0,0,0,2542,2543,1,0,0,0,2543,2544,1,0,0,0,2544,2545,5,77,0,0,
2545,2597,1,0,0,0,2546,2547,3,66,33,0,2547,2549,5,84,0,0,2548,2550,3,48,
24,0,2549,2548,1,0,0,0,2549,2550,1,0,0,0,2550,2551,1,0,0,0,2551,2552,3,2,
1,0,2552,2554,5,76,0,0,2553,2555,3,430,215,0,2554,2553,1,0,0,0,2554,2555,
1,0,0,0,2555,2556,1,0,0,0,2556,2557,5,77,0,0,2557,2597,1,0,0,0,2558,2559,
3,398,199,0,2559,2561,5,84,0,0,2560,2562,3,48,24,0,2561,2560,1,0,0,0,2561,
2562,1,0,0,0,2562,2563,1,0,0,0,2563,2564,3,2,1,0,2564,2566,5,76,0,0,2565,
2567,3,430,215,0,2566,2565,1,0,0,0,2566,2567,1,0,0,0,2567,2568,1,0,0,0,2568,
2569,5,77,0,0,2569,2597,1,0,0,0,2570,2571,5,57,0,0,2571,2573,5,84,0,0,2572,
2574,3,48,24,0,2573,2572,1,0,0,0,2573,2574,1,0,0,0,2574,2575,1,0,0,0,2575,
2576,3,2,1,0,2576,2578,5,76,0,0,2577,2579,3,430,215,0,2578,2577,1,0,0,0,
2578,2579,1,0,0,0,2579,2580,1,0,0,0,2580,2581,5,77,0,0,2581,2597,1,0,0,0,
2582,2583,3,62,31,0,2583,2584,5,84,0,0,2584,2585,5,57,0,0,2585,2587,5,84,
0,0,2586,2588,3,48,24,0,2587,2586,1,0,0,0,2587,2588,1,0,0,0,2588,2589,1,
0,0,0,2589,2590,3,2,1,0,2590,2592,5,76,0,0,2591,2593,3,430,215,0,2592,2591,
1,0,0,0,2592,2593,1,0,0,0,2593,2594,1,0,0,0,2594,2595,5,77,0,0,2595,2597,
1,0,0,0,2596,2527,1,0,0,0,2596,2534,1,0,0,0,2596,2546,1,0,0,0,2596,2558,
1,0,0,0,2596,2570,1,0,0,0,2596,2582,1,0,0,0,2597,429,1,0,0,0,2598,2603,3,
396,198,0,2599,2600,5,83,0,0,2600,2602,3,396,198,0,2601,2599,1,0,0,0,2602,
2605,1,0,0,0,2603,2601,1,0,0,0,2603,2604,1,0,0,0,2604,431,1,0,0,0,2605,2603,
1,0,0,0,2606,2607,3,66,33,0,2607,2609,5,87,0,0,2608,2610,3,48,24,0,2609,
2608,1,0,0,0,2609,2610,1,0,0,0,2610,2611,1,0,0,0,2611,2612,3,2,1,0,2612,
2654,1,0,0,0,2613,2614,3,398,199,0,2614,2616,5,87,0,0,2615,2617,3,48,24,
0,2616,2615,1,0,0,0,2616,2617,1,0,0,0,2617,2618,1,0,0,0,2618,2619,3,2,1,
0,2619,2654,1,0,0,0,2620,2621,3,24,12,0,2621,2623,5,87,0,0,2622,2624,3,48,
24,0,2623,2622,1,0,0,0,2623,2624,1,0,0,0,2624,2625,1,0,0,0,2625,2626,3,2,
1,0,2626,2654,1,0,0,0,2627,2628,5,57,0,0,2628,2630,5,87,0,0,2629,2631,3,
48,24,0,2630,2629,1,0,0,0,2630,2631,1,0,0,0,2631,2632,1,0,0,0,2632,2654,
3,2,1,0,2633,2634,3,62,31,0,2634,2635,5,84,0,0,2635,2636,5,57,0,0,2636,2638,
5,87,0,0,2637,2639,3,48,24,0,2638,2637,1,0,0,0,2638,2639,1,0,0,0,2639,2640,
1,0,0,0,2640,2641,3,2,1,0,2641,2654,1,0,0,0,2642,2643,3,30,15,0,2643,2645,
5,87,0,0,2644,2646,3,48,24,0,2645,2644,1,0,0,0,2645,2646,1,0,0,0,2646,2647,
1,0,0,0,2647,2648,5,48,0,0,2648,2654,1,0,0,0,2649,2650,3,36,18,0,2650,2651,
5,87,0,0,2651,2652,5,48,0,0,2652,2654,1,0,0,0,2653,2606,1,0,0,0,2653,2613,
1,0,0,0,2653,2620,1,0,0,0,2653,2627,1,0,0,0,2653,2633,1,0,0,0,2653,2642,
1,0,0,0,2653,2649,1,0,0,0,2654,433,1,0,0,0,2655,2657,3,398,199,0,2656,2658,
3,436,218,0,2657,2656,1,0,0,0,2657,2658,1,0,0,0,2658,2664,1,0,0,0,2659,2661,
3,66,33,0,2660,2662,3,436,218,0,2661,2660,1,0,0,0,2661,2662,1,0,0,0,2662,
2664,1,0,0,0,2663,2655,1,0,0,0,2663,2659,1,0,0,0,2664,435,1,0,0,0,2665,2667,
5,102,0,0,2666,2668,3,436,218,0,2667,2666,1,0,0,0,2667,2668,1,0,0,0,2668,
2674,1,0,0,0,2669,2671,5,103,0,0,2670,2672,3,436,218,0,2671,2670,1,0,0,0,
2671,2672,1,0,0,0,2672,2674,1,0,0,0,2673,2665,1,0,0,0,2673,2669,1,0,0,0,
2674,437,1,0,0,0,2675,2676,3,434,217,0,2676,2677,5,102,0,0,2677,439,1,0,
0,0,2678,2679,3,434,217,0,2679,2680,5,103,0,0,2680,441,1,0,0,0,2681,2689,
3,444,222,0,2682,2689,3,446,223,0,2683,2684,5,104,0,0,2684,2689,3,442,221,
0,2685,2686,5,105,0,0,2686,2689,3,442,221,0,2687,2689,3,448,224,0,2688,2681,
1,0,0,0,2688,2682,1,0,0,0,2688,2683,1,0,0,0,2688,2685,1,0,0,0,2688,2687,
1,0,0,0,2689,443,1,0,0,0,2690,2691,5,102,0,0,2691,2692,3,442,221,0,2692,
445,1,0,0,0,2693,2694,5,103,0,0,2694,2695,3,442,221,0,2695,447,1,0,0,0,2696,
2704,3,434,217,0,2697,2698,5,92,0,0,2698,2704,3,442,221,0,2699,2700,5,91,
0,0,2700,2704,3,442,221,0,2701,2704,3,450,225,0,2702,2704,3,494,247,0,2703,
2696,1,0,0,0,2703,2697,1,0,0,0,2703,2699,1,0,0,0,2703,2701,1,0,0,0,2703,
2702,1,0,0,0,2704,449,1,0,0,0,2705,2706,5,76,0,0,2706,2707,3,16,8,0,2707,
2708,5,77,0,0,2708,2709,3,442,221,0,2709,2733,1,0,0,0,2710,2711,5,76,0,0,
2711,2715,3,24,12,0,2712,2714,3,46,23,0,2713,2712,1,0,0,0,2714,2717,1,0,
0,0,2715,2713,1,0,0,0,2715,2716,1,0,0,0,2716,2718,1,0,0,0,2717,2715,1,0,
0,0,2718,2719,5,77,0,0,2719,2720,3,448,224,0,2720,2733,1,0,0,0,2721,2722,
5,76,0,0,2722,2726,3,24,12,0,2723,2725,3,46,23,0,2724,2723,1,0,0,0,2725,
2728,1,0,0,0,2726,2724,1,0,0,0,2726,2727,1,0,0,0,2727,2729,1,0,0,0,2728,
2726,1,0,0,0,2729,2730,5,77,0,0,2730,2731,3,482,241,0,2731,2733,1,0,0,0,
2732,2705,1,0,0,0,2732,2710,1,0,0,0,2732,2721,1,0,0,0,2733,451,1,0,0,0,2734,
2735,6,226,-1,0,2735,2736,3,442,221,0,2736,2748,1,0,0,0,2737,2738,10,3,0,
0,2738,2739,5,106,0,0,2739,2747,3,442,221,0,2740,2741,10,2,0,0,2741,2742,
5,107,0,0,2742,2747,3,442,221,0,2743,2744,10,1,0,0,2744,2745,5,111,0,0,2745,
2747,3,442,221,0,2746,2737,1,0,0,0,2746,2740,1,0,0,0,2746,2743,1,0,0,0,2747,
2750,1,0,0,0,2748,2746,1,0,0,0,2748,2749,1,0,0,0,2749,453,1,0,0,0,2750,2748,
1,0,0,0,2751,2752,6,227,-1,0,2752,2753,3,452,226,0,2753,2762,1,0,0,0,2754,
2755,10,2,0,0,2755,2756,5,104,0,0,2756,2761,3,452,226,0,2757,2758,10,1,0,
0,2758,2759,5,105,0,0,2759,2761,3,452,226,0,2760,2754,1,0,0,0,2760,2757,
1,0,0,0,2761,2764,1,0,0,0,2762,2760,1,0,0,0,2762,2763,1,0,0,0,2763,455,1,
0,0,0,2764,2762,1,0,0,0,2765,2766,6,228,-1,0,2766,2767,3,454,227,0,2767,
2783,1,0,0,0,2768,2769,10,3,0,0,2769,2770,5,90,0,0,2770,2771,5,90,0,0,2771,
2782,3,454,227,0,2772,2773,10,2,0,0,2773,2774,5,89,0,0,2774,2775,5,89,0,
0,2775,2782,3,454,227,0,2776,2777,10,1,0,0,2777,2778,5,89,0,0,2778,2779,
5,89,0,0,2779,2780,5,89,0,0,2780,2782,3,454,227,0,2781,2768,1,0,0,0,2781,
2772,1,0,0,0,2781,2776,1,0,0,0,2782,2785,1,0,0,0,2783,2781,1,0,0,0,2783,
2784,1,0,0,0,2784,457,1,0,0,0,2785,2783,1,0,0,0,2786,2787,6,229,-1,0,2787,
2788,3,456,228,0,2788,2809,1,0,0,0,2789,2790,10,5,0,0,2790,2791,5,90,0,0,
2791,2808,3,456,228,0,2792,2793,10,4,0,0,2793,2794,5,89,0,0,2794,2808,3,
456,228,0,2795,2796,10,3,0,0,2796,2797,5,97,0,0,2797,2808,3,456,228,0,2798,
2799,10,2,0,0,2799,2800,5,98,0,0,2800,2808,3,456,228,0,2801,2802,10,1,0,
0,2802,2805,5,43,0,0,2803,2806,3,24,12,0,2804,2806,3,392,196,0,2805,2803,
1,0,0,0,2805,2804,1,0,0,0,2806,2808,1,0,0,0,2807,2789,1,0,0,0,2807,2792,
1,0,0,0,2807,2795,1,0,0,0,2807,2798,1,0,0,0,2807,2801,1,0,0,0,2808,2811,
1,0,0,0,2809,2807,1,0,0,0,2809,2810,1,0,0,0,2810,459,1,0,0,0,2811,2809,1,
0,0,0,2812,2813,6,230,-1,0,2813,2814,3,458,229,0,2814,2823,1,0,0,0,2815,
2816,10,2,0,0,2816,2817,5,96,0,0,2817,2822,3,458,229,0,2818,2819,10,1,0,
0,2819,2820,5,99,0,0,2820,2822,3,458,229,0,2821,2815,1,0,0,0,2821,2818,1,
0,0,0,2822,2825,1,0,0,0,2823,2821,1,0,0,0,2823,2824,1,0,0,0,2824,461,1,0,
0,0,2825,2823,1,0,0,0,2826,2827,6,231,-1,0,2827,2828,3,460,230,0,2828,2834,
1,0,0,0,2829,2830,10,1,0,0,2830,2831,5,108,0,0,2831,2833,3,460,230,0,2832,
2829,1,0,0,0,2833,2836,1,0,0,0,2834,2832,1,0,0,0,2834,2835,1,0,0,0,2835,
463,1,0,0,0,2836,2834,1,0,0,0,2837,2838,6,232,-1,0,2838,2839,3,462,231,0,
2839,2845,1,0,0,0,2840,2841,10,1,0,0,2841,2842,5,110,0,0,2842,2844,3,462,
231,0,2843,2840,1,0,0,0,2844,2847,1,0,0,0,2845,2843,1,0,0,0,2845,2846,1,
0,0,0,2846,465,1,0,0,0,2847,2845,1,0,0,0,2848,2849,6,233,-1,0,2849,2850,
3,464,232,0,2850,2856,1,0,0,0,2851,2852,10,1,0,0,2852,2853,5,109,0,0,2853,
2855,3,464,232,0,2854,2851,1,0,0,0,2855,2858,1,0,0,0,2856,2854,1,0,0,0,2856,
2857,1,0,0,0,2857,467,1,0,0,0,2858,2856,1,0,0,0,2859,2860,6,234,-1,0,2860,
2861,3,466,233,0,2861,2867,1,0,0,0,2862,2863,10,1,0,0,2863,2864,5,100,0,
0,2864,2866,3,466,233,0,2865,2862,1,0,0,0,2866,2869,1,0,0,0,2867,2865,1,
0,0,0,2867,2868,1,0,0,0,2868,469,1,0,0,0,2869,2867,1,0,0,0,2870,2871,6,235,
-1,0,2871,2872,3,468,234,0,2872,2878,1,0,0,0,2873,2874,10,1,0,0,2874,2875,
5,101,0,0,2875,2877,3,468,234,0,2876,2873,1,0,0,0,2877,2880,1,0,0,0,2878,
2876,1,0,0,0,2878,2879,1,0,0,0,2879,471,1,0,0,0,2880,2878,1,0,0,0,2881,2895,
3,470,235,0,2882,2883,3,470,235,0,2883,2884,5,93,0,0,2884,2885,3,396,198,
0,2885,2886,5,94,0,0,2886,2887,3,472,236,0,2887,2895,1,0,0,0,2888,2889,3,
470,235,0,2889,2890,5,93,0,0,2890,2891,3,396,198,0,2891,2892,5,94,0,0,2892,
2893,3,482,241,0,2893,2895,1,0,0,0,2894,2881,1,0,0,0,2894,2882,1,0,0,0,2894,
2888,1,0,0,0,2895,473,1,0,0,0,2896,2899,3,472,236,0,2897,2899,3,476,238,
0,2898,2896,1,0,0,0,2898,2897,1,0,0,0,2899,475,1,0,0,0,2900,2901,3,478,239,
0,2901,2902,3,480,240,0,2902,2903,3,396,198,0,2903,477,1,0,0,0,2904,2908,
3,66,33,0,2905,2908,3,426,213,0,2906,2908,3,424,212,0,2907,2904,1,0,0,0,
2907,2905,1,0,0,0,2907,2906,1,0,0,0,2908,479,1,0,0,0,2909,2910,7,8,0,0,2910,
481,1,0,0,0,2911,2912,3,484,242,0,2912,2913,5,95,0,0,2913,2914,3,492,246,
0,2914,483,1,0,0,0,2915,2917,5,76,0,0,2916,2918,3,486,243,0,2917,2916,1,
0,0,0,2917,2918,1,0,0,0,2918,2919,1,0,0,0,2919,2922,5,77,0,0,2920,2922,3,
2,1,0,2921,2915,1,0,0,0,2921,2920,1,0,0,0,2922,485,1,0,0,0,2923,2928,3,488,
244,0,2924,2925,5,83,0,0,2925,2927,3,488,244,0,2926,2924,1,0,0,0,2927,2930,
1,0,0,0,2928,2926,1,0,0,0,2928,2929,1,0,0,0,2929,2940,1,0,0,0,2930,2928,
1,0,0,0,2931,2936,3,2,1,0,2932,2933,5,83,0,0,2933,2935,3,2,1,0,2934,2932,
1,0,0,0,2935,2938,1,0,0,0,2936,2934,1,0,0,0,2936,2937,1,0,0,0,2937,2940,
1,0,0,0,2938,2936,1,0,0,0,2939,2923,1,0,0,0,2939,2931,1,0,0,0,2940,487,1,
0,0,0,2941,2943,3,172,86,0,2942,2941,1,0,0,0,2943,2946,1,0,0,0,2944,2942,
1,0,0,0,2944,2945,1,0,0,0,2945,2947,1,0,0,0,2946,2944,1,0,0,0,2947,2948,
3,490,245,0,2948,2949,3,132,66,0,2949,2952,1,0,0,0,2950,2952,3,170,85,0,
2951,2944,1,0,0,0,2951,2950,1,0,0,0,2952,489,1,0,0,0,2953,2956,3,136,68,
0,2954,2956,5,15,0,0,2955,2953,1,0,0,0,2955,2954,1,0,0,0,2956,491,1,0,0,
0,2957,2960,3,396,198,0,2958,2960,3,284,142,0,2959,2957,1,0,0,0,2959,2958,
1,0,0,0,2960,493,1,0,0,0,2961,2962,5,58,0,0,2962,2963,5,76,0,0,2963,2964,
3,396,198,0,2964,2965,5,77,0,0,2965,2966,3,324,162,0,2966,495,1,0,0,0,2967,
2968,3,396,198,0,2968,497,1,0,0,0,363,503,507,511,524,529,533,542,548,553,
556,561,566,571,574,579,584,591,596,603,608,610,617,631,636,644,651,657,
662,672,675,689,694,699,704,710,715,720,725,730,735,744,748,751,756,762,
768,776,785,796,825,830,834,842,849,858,872,875,887,890,906,911,918,923,
929,932,935,938,952,963,977,986,993,1002,1009,1014,1029,1036,1042,1046,1050,
1054,1058,1063,1070,1073,1077,1080,1086,1091,1094,1098,1102,1108,1113,1115,
1124,1131,1147,1153,1156,1161,1165,1172,1175,1179,1184,1191,1200,1206,1213,
1218,1225,1233,1243,1248,1252,1262,1267,1275,1278,1285,1288,1296,1299,1304,
1309,1315,1319,1324,1329,1334,1340,1346,1349,1352,1361,1367,1373,1376,1379,
1387,1393,1399,1403,1409,1418,1424,1431,1436,1443,1455,1462,1467,1475,1480,
1486,1489,1492,1505,1516,1523,1533,1538,1549,1554,1567,1572,1584,1594,1599,
1607,1610,1617,1625,1631,1640,1650,1654,1657,1666,1680,1683,1692,1697,1705,
1711,1715,1720,1725,1729,1740,1747,1762,1784,1812,1827,1836,1844,1848,1857,
1866,1877,1881,1907,1911,1916,1920,1924,1932,1936,1940,1947,1956,1977,1983,
1989,2014,2019,2025,2037,2048,2058,2061,2066,2075,2080,2084,2096,2100,2104,
2108,2112,2118,2124,2128,2134,2140,2146,2152,2160,2167,2174,2179,2183,2188,
2193,2197,2202,2207,2211,2216,2221,2225,2230,2235,2239,2246,2251,2255,2260,
2264,2269,2273,2278,2282,2287,2291,2298,2302,2307,2311,2317,2319,2324,2329,
2335,2339,2344,2348,2352,2356,2358,2365,2376,2387,2395,2406,2410,2415,2419,
2424,2432,2438,2442,2446,2450,2456,2462,2464,2476,2482,2488,2510,2525,2530,
2537,2542,2549,2554,2561,2566,2573,2578,2587,2592,2596,2603,2609,2616,2623,
2630,2638,2645,2653,2657,2661,2663,2667,2671,2673,2688,2703,2715,2726,2732,
2746,2748,2760,2762,2781,2783,2805,2807,2809,2821,2823,2834,2845,2856,2867,
2878,2894,2898,2907,2917,2921,2928,2936,2939,2944,2951,2955,2959];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class Java20Parser extends antlr4.Parser {

    static grammarFileName = "Java20Parser.g4";
    static literalNames = [ null, "'exports'", "'module'", "'non-sealed'", 
                            "'<>'", "'open'", "'opens'", "'permits'", "'provides'", 
                            "'record'", "'requires'", "'sealed'", "'to'", 
                            "'transitive'", "'uses'", "'var'", "'with'", 
                            "'yield'", "'abstract'", "'assert'", "'boolean'", 
                            "'break'", "'byte'", "'case'", "'catch'", "'char'", 
                            "'class'", "'const'", "'continue'", "'default'", 
                            "'do'", "'double'", "'else'", "'enum'", "'extends'", 
                            "'final'", "'finally'", "'float'", "'for'", 
                            "'if'", "'goto'", "'implements'", "'import'", 
                            "'instanceof'", "'int'", "'interface'", "'long'", 
                            "'native'", "'new'", "'package'", "'private'", 
                            "'protected'", "'public'", "'return'", "'short'", 
                            "'static'", "'strictfp'", "'super'", "'switch'", 
                            "'synchronized'", "'this'", "'throw'", "'throws'", 
                            "'transient'", "'try'", "'void'", "'volatile'", 
                            "'while'", "'_'", null, null, null, null, null, 
                            null, "'null'", "'('", "')'", "'{'", "'}'", 
                            "'['", "']'", "';'", "','", "'.'", "'...'", 
                            "'@'", "'::'", "'='", "'>'", "'<'", "'!'", "'~'", 
                            "'?'", "':'", "'->'", "'=='", "'<='", "'>='", 
                            "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", 
                            "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", 
                            "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", 
                            "'^='", "'%='", "'<<='", "'>>='", "'>>>='" ];
    static symbolicNames = [ null, "EXPORTS", "MODULE", "NONSEALED", "OACA", 
                             "OPEN", "OPENS", "PERMITS", "PROVIDES", "RECORD", 
                             "REQUIRES", "SEALED", "TO", "TRANSITIVE", "USES", 
                             "VAR", "WITH", "YIELD", "ABSTRACT", "ASSERT", 
                             "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
                             "CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", 
                             "DO", "DOUBLE", "ELSE", "ENUM", "EXTENDS", 
                             "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", 
                             "IMPLEMENTS", "IMPORT", "INSTANCEOF", "INT", 
                             "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
                             "PRIVATE", "PROTECTED", "PUBLIC", "RETURN", 
                             "SHORT", "STATIC", "STRICTFP", "SUPER", "SWITCH", 
                             "SYNCHRONIZED", "THIS", "THROW", "THROWS", 
                             "TRANSIENT", "TRY", "VOID", "VOLATILE", "WHILE", 
                             "UNDER_SCORE", "IntegerLiteral", "FloatingPointLiteral", 
                             "BooleanLiteral", "CharacterLiteral", "StringLiteral", 
                             "TextBlock", "NullLiteral", "LPAREN", "RPAREN", 
                             "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", 
                             "COMMA", "DOT", "ELLIPSIS", "AT", "COLONCOLON", 
                             "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", 
                             "COLON", "ARROW", "EQUAL", "LE", "GE", "NOTEQUAL", 
                             "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
                             "DIV", "BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", 
                             "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "AND_ASSIGN", 
                             "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
                             "RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "Identifier", 
                             "WS", "COMMENT", "LINE_COMMENT" ];
    static ruleNames = [ "start_", "identifier", "typeIdentifier", "unqualifiedMethodIdentifier", 
                         "contextualKeyword", "contextualKeywordMinusForTypeIdentifier", 
                         "contextualKeywordMinusForUnqualifiedMethodIdentifier", 
                         "literal", "primitiveType", "numericType", "integralType", 
                         "floatingPointType", "referenceType", "coit", "classOrInterfaceType", 
                         "classType", "interfaceType", "typeVariable", "arrayType", 
                         "dims", "typeParameter", "typeParameterModifier", 
                         "typeBound", "additionalBound", "typeArguments", 
                         "typeArgumentList", "typeArgument", "wildcard", 
                         "wildcardBounds", "moduleName", "packageName", 
                         "typeName", "packageOrTypeName", "expressionName", 
                         "methodName", "ambiguousName", "compilationUnit", 
                         "ordinaryCompilationUnit", "modularCompilationUnit", 
                         "packageDeclaration", "packageModifier", "importDeclaration", 
                         "singleTypeImportDeclaration", "typeImportOnDemandDeclaration", 
                         "singleStaticImportDeclaration", "staticImportOnDemandDeclaration", 
                         "topLevelClassOrInterfaceDeclaration", "moduleDeclaration", 
                         "moduleDirective", "requiresModifier", "classDeclaration", 
                         "normalClassDeclaration", "classModifier", "typeParameters", 
                         "typeParameterList", "classExtends", "classImplements", 
                         "interfaceTypeList", "classPermits", "classBody", 
                         "classBodyDeclaration", "classMemberDeclaration", 
                         "fieldDeclaration", "fieldModifier", "variableDeclaratorList", 
                         "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
                         "unannType", "unannPrimitiveType", "unannReferenceType", 
                         "unannClassOrInterfaceType", "uCOIT", "unannClassType", 
                         "unannInterfaceType", "unannTypeVariable", "unannArrayType", 
                         "methodDeclaration", "methodModifier", "methodHeader", 
                         "result", "methodDeclarator", "receiverParameter", 
                         "formalParameterList", "formalParameter", "variableArityParameter", 
                         "variableModifier", "throwsT", "exceptionTypeList", 
                         "exceptionType", "methodBody", "instanceInitializer", 
                         "staticInitializer", "constructorDeclaration", 
                         "constructorModifier", "constructorDeclarator", 
                         "simpleTypeName", "constructorBody", "explicitConstructorInvocation", 
                         "enumDeclaration", "enumBody", "enumConstantList", 
                         "enumConstant", "enumConstantModifier", "enumBodyDeclarations", 
                         "recordDeclaration", "recordHeader", "recordComponentList", 
                         "recordComponent", "variableArityRecordComponent", 
                         "recordComponentModifier", "recordBody", "recordBodyDeclaration", 
                         "compactConstructorDeclaration", "interfaceDeclaration", 
                         "normalInterfaceDeclaration", "interfaceModifier", 
                         "interfaceExtends", "interfacePermits", "interfaceBody", 
                         "interfaceMemberDeclaration", "constantDeclaration", 
                         "constantModifier", "interfaceMethodDeclaration", 
                         "interfaceMethodModifier", "annotationInterfaceDeclaration", 
                         "annotationInterfaceBody", "annotationInterfaceMemberDeclaration", 
                         "annotationInterfaceElementDeclaration", "annotationInterfaceElementModifier", 
                         "defaultValue", "annotation", "normalAnnotation", 
                         "elementValuePairList", "elementValuePair", "elementValue", 
                         "elementValueArrayInitializer", "elementValueList", 
                         "markerAnnotation", "singleElementAnnotation", 
                         "arrayInitializer", "variableInitializerList", 
                         "block", "blockStatements", "blockStatement", "localClassOrInterfaceDeclaration", 
                         "localVariableDeclaration", "localVariableType", 
                         "localVariableDeclarationStatement", "statement", 
                         "statementNoShortIf", "statementWithoutTrailingSubstatement", 
                         "emptyStatement_", "labeledStatement", "labeledStatementNoShortIf", 
                         "expressionStatement", "statementExpression", "ifThenStatement", 
                         "ifThenElseStatement", "ifThenElseStatementNoShortIf", 
                         "assertStatement", "switchStatement", "switchBlock", 
                         "switchRule", "switchBlockStatementGroup", "switchLabel", 
                         "caseConstant", "whileStatement", "whileStatementNoShortIf", 
                         "doStatement", "forStatement", "forStatementNoShortIf", 
                         "basicForStatement", "basicForStatementNoShortIf", 
                         "forInit", "forUpdate", "statementExpressionList", 
                         "enhancedForStatement", "enhancedForStatementNoShortIf", 
                         "breakStatement", "continueStatement", "returnStatement", 
                         "throwStatement", "synchronizedStatement", "tryStatement", 
                         "catches", "catchClause", "catchFormalParameter", 
                         "catchType", "finallyBlock", "tryWithResourcesStatement", 
                         "resourceSpecification", "resourceList", "resource", 
                         "variableAccess", "yieldStatement", "pattern", 
                         "typePattern", "expression", "primary", "primaryNoNewArray", 
                         "pNNA", "classLiteral", "classInstanceCreationExpression", 
                         "unqualifiedClassInstanceCreationExpression", "classOrInterfaceTypeToInstantiate", 
                         "typeArgumentsOrDiamond", "arrayCreationExpression", 
                         "arrayCreationExpressionWithoutInitializer", "arrayCreationExpressionWithInitializer", 
                         "dimExprs", "dimExpr", "arrayAccess", "fieldAccess", 
                         "methodInvocation", "argumentList", "methodReference", 
                         "postfixExpression", "pfE", "postIncrementExpression", 
                         "postDecrementExpression", "unaryExpression", "preIncrementExpression", 
                         "preDecrementExpression", "unaryExpressionNotPlusMinus", 
                         "castExpression", "multiplicativeExpression", "additiveExpression", 
                         "shiftExpression", "relationalExpression", "equalityExpression", 
                         "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
                         "conditionalAndExpression", "conditionalOrExpression", 
                         "conditionalExpression", "assignmentExpression", 
                         "assignment", "leftHandSide", "assignmentOperator", 
                         "lambdaExpression", "lambdaParameters", "lambdaParameterList", 
                         "lambdaParameter", "lambdaParameterType", "lambdaBody", 
                         "switchExpression", "constantExpression" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Java20Parser.ruleNames;
        this.literalNames = Java20Parser.literalNames;
        this.symbolicNames = Java20Parser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 226:
    	    		return this.multiplicativeExpression_sempred(localctx, predIndex);
    	case 227:
    	    		return this.additiveExpression_sempred(localctx, predIndex);
    	case 228:
    	    		return this.shiftExpression_sempred(localctx, predIndex);
    	case 229:
    	    		return this.relationalExpression_sempred(localctx, predIndex);
    	case 230:
    	    		return this.equalityExpression_sempred(localctx, predIndex);
    	case 231:
    	    		return this.andExpression_sempred(localctx, predIndex);
    	case 232:
    	    		return this.exclusiveOrExpression_sempred(localctx, predIndex);
    	case 233:
    	    		return this.inclusiveOrExpression_sempred(localctx, predIndex);
    	case 234:
    	    		return this.conditionalAndExpression_sempred(localctx, predIndex);
    	case 235:
    	    		return this.conditionalOrExpression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    multiplicativeExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 3);
    		case 1:
    			return this.precpred(this._ctx, 2);
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    additiveExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 2);
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    shiftExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 3);
    		case 6:
    			return this.precpred(this._ctx, 2);
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    relationalExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 5);
    		case 9:
    			return this.precpred(this._ctx, 4);
    		case 10:
    			return this.precpred(this._ctx, 3);
    		case 11:
    			return this.precpred(this._ctx, 2);
    		case 12:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    equalityExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 13:
    			return this.precpred(this._ctx, 2);
    		case 14:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    andExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 15:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    exclusiveOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    inclusiveOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 17:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    conditionalAndExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 18:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    conditionalOrExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 19:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	start_() {
	    let localctx = new Start_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Java20Parser.RULE_start_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 498;
	        this.compilationUnit();
	        this.state = 499;
	        this.match(Java20Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Java20Parser.RULE_identifier);
	    try {
	        this.state = 503;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 501;
	            this.match(Java20Parser.Identifier);
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 502;
	            this.contextualKeyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeIdentifier() {
	    let localctx = new TypeIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Java20Parser.RULE_typeIdentifier);
	    try {
	        this.state = 507;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 505;
	            this.match(Java20Parser.Identifier);
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 8:
	        case 10:
	        case 12:
	        case 13:
	        case 14:
	        case 16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 506;
	            this.contextualKeywordMinusForTypeIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unqualifiedMethodIdentifier() {
	    let localctx = new UnqualifiedMethodIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Java20Parser.RULE_unqualifiedMethodIdentifier);
	    try {
	        this.state = 511;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 509;
	            this.match(Java20Parser.Identifier);
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 510;
	            this.contextualKeywordMinusForUnqualifiedMethodIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextualKeyword() {
	    let localctx = new ContextualKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Java20Parser.RULE_contextualKeyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 513;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 262126) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextualKeywordMinusForTypeIdentifier() {
	    let localctx = new ContextualKeywordMinusForTypeIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Java20Parser.RULE_contextualKeywordMinusForTypeIdentifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 515;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 95598) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextualKeywordMinusForUnqualifiedMethodIdentifier() {
	    let localctx = new ContextualKeywordMinusForUnqualifiedMethodIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Java20Parser.RULE_contextualKeywordMinusForUnqualifiedMethodIdentifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 517;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 131054) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Java20Parser.RULE_literal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 519;
	        _la = this._input.LA(1);
	        if(!(((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 127) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveType() {
	    let localctx = new PrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Java20Parser.RULE_primitiveType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 521;
	            this.annotation();
	            this.state = 526;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 529;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	            this.state = 527;
	            this.numericType();
	            break;
	        case 20:
	            this.state = 528;
	            this.match(Java20Parser.BOOLEAN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Java20Parser.RULE_numericType);
	    try {
	        this.state = 533;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 25:
	        case 44:
	        case 46:
	        case 54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 531;
	            this.integralType();
	            break;
	        case 31:
	        case 37:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 532;
	            this.floatingPointType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integralType() {
	    let localctx = new IntegralTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Java20Parser.RULE_integralType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 535;
	        _la = this._input.LA(1);
	        if(!(_la===22 || _la===25 || ((((_la - 44)) & ~0x1f) === 0 && ((1 << (_la - 44)) & 1029) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatingPointType() {
	    let localctx = new FloatingPointTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Java20Parser.RULE_floatingPointType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 537;
	        _la = this._input.LA(1);
	        if(!(_la===31 || _la===37)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceType() {
	    let localctx = new ReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Java20Parser.RULE_referenceType);
	    try {
	        this.state = 542;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 539;
	            this.classOrInterfaceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 540;
	            this.typeVariable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 541;
	            this.arrayType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	coit() {
	    let localctx = new CoitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Java20Parser.RULE_coit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 544;
	        this.match(Java20Parser.DOT);
	        this.state = 548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 545;
	            this.annotation();
	            this.state = 550;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 551;
	        this.typeIdentifier();
	        this.state = 553;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,8,this._ctx);
	        if(la_===1) {
	            this.state = 552;
	            this.typeArguments();

	        }
	        this.state = 556;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        if(la_===1) {
	            this.state = 555;
	            this.coit();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceType() {
	    let localctx = new ClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Java20Parser.RULE_classOrInterfaceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        if(la_===1) {
	            this.state = 558;
	            this.packageName();
	            this.state = 559;
	            this.match(Java20Parser.DOT);

	        }
	        this.state = 566;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 563;
	            this.annotation();
	            this.state = 568;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 569;
	        this.typeIdentifier();
	        this.state = 571;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        if(la_===1) {
	            this.state = 570;
	            this.typeArguments();

	        }
	        this.state = 574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        if(la_===1) {
	            this.state = 573;
	            this.coit();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classType() {
	    let localctx = new ClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Java20Parser.RULE_classType);
	    var _la = 0;
	    try {
	        this.state = 610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 579;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 576;
	                this.annotation();
	                this.state = 581;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 582;
	            this.typeIdentifier();
	            this.state = 584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 583;
	                this.typeArguments();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 586;
	            this.packageName();
	            this.state = 587;
	            this.match(Java20Parser.DOT);
	            this.state = 591;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 588;
	                this.annotation();
	                this.state = 593;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 594;
	            this.typeIdentifier();
	            this.state = 596;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 595;
	                this.typeArguments();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 598;
	            this.classOrInterfaceType();
	            this.state = 599;
	            this.match(Java20Parser.DOT);
	            this.state = 603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 600;
	                this.annotation();
	                this.state = 605;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 606;
	            this.typeIdentifier();
	            this.state = 608;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 607;
	                this.typeArguments();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceType() {
	    let localctx = new InterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Java20Parser.RULE_interfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        this.classType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeVariable() {
	    let localctx = new TypeVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Java20Parser.RULE_typeVariable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 614;
	            this.annotation();
	            this.state = 619;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 620;
	        this.typeIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayType() {
	    let localctx = new ArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Java20Parser.RULE_arrayType);
	    try {
	        this.state = 631;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 622;
	            this.primitiveType();
	            this.state = 623;
	            this.dims();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 625;
	            this.classType();
	            this.state = 626;
	            this.dims();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 628;
	            this.typeVariable();
	            this.state = 629;
	            this.dims();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dims() {
	    let localctx = new DimsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Java20Parser.RULE_dims);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 633;
	            this.annotation();
	            this.state = 638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 639;
	        this.match(Java20Parser.LBRACK);
	        this.state = 640;
	        this.match(Java20Parser.RBRACK);
	        this.state = 651;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,25,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 644;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===86) {
	                    this.state = 641;
	                    this.annotation();
	                    this.state = 646;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                this.state = 647;
	                this.match(Java20Parser.LBRACK);
	                this.state = 648;
	                this.match(Java20Parser.RBRACK); 
	            }
	            this.state = 653;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,25,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameter() {
	    let localctx = new TypeParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Java20Parser.RULE_typeParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 654;
	            this.typeParameterModifier();
	            this.state = 659;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 660;
	        this.typeIdentifier();
	        this.state = 662;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 661;
	            this.typeBound();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterModifier() {
	    let localctx = new TypeParameterModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Java20Parser.RULE_typeParameterModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 664;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeBound() {
	    let localctx = new TypeBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Java20Parser.RULE_typeBound);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 666;
	        this.match(Java20Parser.EXTENDS);
	        this.state = 675;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 667;
	            this.typeVariable();
	            break;

	        case 2:
	            this.state = 668;
	            this.classOrInterfaceType();
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===108) {
	                this.state = 669;
	                this.additionalBound();
	                this.state = 674;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additionalBound() {
	    let localctx = new AdditionalBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Java20Parser.RULE_additionalBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this.match(Java20Parser.BITAND);
	        this.state = 678;
	        this.interfaceType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArguments() {
	    let localctx = new TypeArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Java20Parser.RULE_typeArguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 680;
	        this.match(Java20Parser.LT);
	        this.state = 681;
	        this.typeArgumentList();
	        this.state = 682;
	        this.match(Java20Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentList() {
	    let localctx = new TypeArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Java20Parser.RULE_typeArgumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        this.typeArgument();
	        this.state = 689;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 685;
	            this.match(Java20Parser.COMMA);
	            this.state = 686;
	            this.typeArgument();
	            this.state = 691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgument() {
	    let localctx = new TypeArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Java20Parser.RULE_typeArgument);
	    try {
	        this.state = 694;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 692;
	            this.referenceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 693;
	            this.wildcard();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard() {
	    let localctx = new WildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Java20Parser.RULE_wildcard);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 696;
	            this.annotation();
	            this.state = 701;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 702;
	        this.match(Java20Parser.QUESTION);
	        this.state = 704;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===57) {
	            this.state = 703;
	            this.wildcardBounds();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcardBounds() {
	    let localctx = new WildcardBoundsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Java20Parser.RULE_wildcardBounds);
	    try {
	        this.state = 710;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 706;
	            this.match(Java20Parser.EXTENDS);
	            this.state = 707;
	            this.referenceType();
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 708;
	            this.match(Java20Parser.SUPER);
	            this.state = 709;
	            this.referenceType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleName() {
	    let localctx = new ModuleNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Java20Parser.RULE_moduleName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 712;
	        this.identifier();
	        this.state = 715;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===84) {
	            this.state = 713;
	            this.match(Java20Parser.DOT);
	            this.state = 714;
	            this.moduleName();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageName() {
	    let localctx = new PackageNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Java20Parser.RULE_packageName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this.identifier();
	        this.state = 720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        if(la_===1) {
	            this.state = 718;
	            this.match(Java20Parser.DOT);
	            this.state = 719;
	            this.packageName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeName() {
	    let localctx = new TypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Java20Parser.RULE_typeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 722;
	        this.packageName();
	        this.state = 725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        if(la_===1) {
	            this.state = 723;
	            this.match(Java20Parser.DOT);
	            this.state = 724;
	            this.typeIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageOrTypeName() {
	    let localctx = new PackageOrTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Java20Parser.RULE_packageOrTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this.identifier();
	        this.state = 730;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        if(la_===1) {
	            this.state = 728;
	            this.match(Java20Parser.DOT);
	            this.state = 729;
	            this.packageOrTypeName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionName() {
	    let localctx = new ExpressionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Java20Parser.RULE_expressionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        if(la_===1) {
	            this.state = 732;
	            this.ambiguousName();
	            this.state = 733;
	            this.match(Java20Parser.DOT);

	        }
	        this.state = 737;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodName() {
	    let localctx = new MethodNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Java20Parser.RULE_methodName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 739;
	        this.unqualifiedMethodIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambiguousName() {
	    let localctx = new AmbiguousNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Java20Parser.RULE_ambiguousName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        this.identifier();
	        this.state = 744;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        if(la_===1) {
	            this.state = 742;
	            this.match(Java20Parser.DOT);
	            this.state = 743;
	            this.ambiguousName();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compilationUnit() {
	    let localctx = new CompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Java20Parser.RULE_compilationUnit);
	    try {
	        this.state = 748;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 746;
	            this.ordinaryCompilationUnit();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 747;
	            this.modularCompilationUnit();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ordinaryCompilationUnit() {
	    let localctx = new OrdinaryCompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Java20Parser.RULE_ordinaryCompilationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 751;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        if(la_===1) {
	            this.state = 750;
	            this.packageDeclaration();

	        }
	        this.state = 756;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===42) {
	            this.state = 753;
	            this.importDeclaration();
	            this.state = 758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 67373576) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 13504517) !== 0) || _la===82 || _la===86) {
	            this.state = 759;
	            this.topLevelClassOrInterfaceDeclaration();
	            this.state = 764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	modularCompilationUnit() {
	    let localctx = new ModularCompilationUnitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Java20Parser.RULE_modularCompilationUnit);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 768;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===42) {
	            this.state = 765;
	            this.importDeclaration();
	            this.state = 770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 771;
	        this.moduleDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageDeclaration() {
	    let localctx = new PackageDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Java20Parser.RULE_packageDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 773;
	            this.packageModifier();
	            this.state = 778;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 779;
	        this.match(Java20Parser.PACKAGE);
	        this.state = 780;
	        this.identifier();
	        this.state = 785;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===84) {
	            this.state = 781;
	            this.match(Java20Parser.DOT);
	            this.state = 782;
	            this.identifier();
	            this.state = 787;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 788;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	packageModifier() {
	    let localctx = new PackageModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Java20Parser.RULE_packageModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 790;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importDeclaration() {
	    let localctx = new ImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Java20Parser.RULE_importDeclaration);
	    try {
	        this.state = 796;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 792;
	            this.singleTypeImportDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 793;
	            this.typeImportOnDemandDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 794;
	            this.singleStaticImportDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 795;
	            this.staticImportOnDemandDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTypeImportDeclaration() {
	    let localctx = new SingleTypeImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Java20Parser.RULE_singleTypeImportDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 798;
	        this.match(Java20Parser.IMPORT);
	        this.state = 799;
	        this.typeName();
	        this.state = 800;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeImportOnDemandDeclaration() {
	    let localctx = new TypeImportOnDemandDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Java20Parser.RULE_typeImportOnDemandDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 802;
	        this.match(Java20Parser.IMPORT);
	        this.state = 803;
	        this.packageOrTypeName();
	        this.state = 804;
	        this.match(Java20Parser.DOT);
	        this.state = 805;
	        this.match(Java20Parser.MUL);
	        this.state = 806;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleStaticImportDeclaration() {
	    let localctx = new SingleStaticImportDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Java20Parser.RULE_singleStaticImportDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this.match(Java20Parser.IMPORT);
	        this.state = 809;
	        this.match(Java20Parser.STATIC);
	        this.state = 810;
	        this.typeName();
	        this.state = 811;
	        this.match(Java20Parser.DOT);
	        this.state = 812;
	        this.identifier();
	        this.state = 813;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticImportOnDemandDeclaration() {
	    let localctx = new StaticImportOnDemandDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Java20Parser.RULE_staticImportOnDemandDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 815;
	        this.match(Java20Parser.IMPORT);
	        this.state = 816;
	        this.match(Java20Parser.STATIC);
	        this.state = 817;
	        this.typeName();
	        this.state = 818;
	        this.match(Java20Parser.DOT);
	        this.state = 819;
	        this.match(Java20Parser.MUL);
	        this.state = 820;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topLevelClassOrInterfaceDeclaration() {
	    let localctx = new TopLevelClassOrInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Java20Parser.RULE_topLevelClassOrInterfaceDeclaration);
	    try {
	        this.state = 825;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,49,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 822;
	            this.classDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 823;
	            this.interfaceDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 824;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDeclaration() {
	    let localctx = new ModuleDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Java20Parser.RULE_moduleDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 830;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 827;
	            this.annotation();
	            this.state = 832;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 834;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5) {
	            this.state = 833;
	            this.match(Java20Parser.OPEN);
	        }

	        this.state = 836;
	        this.match(Java20Parser.MODULE);
	        this.state = 837;
	        this.identifier();
	        this.state = 842;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===84) {
	            this.state = 838;
	            this.match(Java20Parser.DOT);
	            this.state = 839;
	            this.identifier();
	            this.state = 844;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 845;
	        this.match(Java20Parser.LBRACE);
	        this.state = 849;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 17730) !== 0)) {
	            this.state = 846;
	            this.moduleDirective();
	            this.state = 851;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 852;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	moduleDirective() {
	    let localctx = new ModuleDirectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Java20Parser.RULE_moduleDirective);
	    var _la = 0;
	    try {
	        this.state = 911;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 854;
	            this.match(Java20Parser.REQUIRES);
	            this.state = 858;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,54,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 855;
	                    this.requiresModifier(); 
	                }
	                this.state = 860;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,54,this._ctx);
	            }

	            this.state = 861;
	            this.moduleName();
	            this.state = 862;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 1:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 864;
	            this.match(Java20Parser.EXPORTS);
	            this.state = 865;
	            this.packageName();
	            this.state = 875;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 866;
	                this.match(Java20Parser.TO);
	                this.state = 867;
	                this.moduleName();
	                this.state = 872;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===83) {
	                    this.state = 868;
	                    this.match(Java20Parser.COMMA);
	                    this.state = 869;
	                    this.moduleName();
	                    this.state = 874;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 877;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 879;
	            this.match(Java20Parser.OPENS);
	            this.state = 880;
	            this.packageName();
	            this.state = 890;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===12) {
	                this.state = 881;
	                this.match(Java20Parser.TO);
	                this.state = 882;
	                this.moduleName();
	                this.state = 887;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===83) {
	                    this.state = 883;
	                    this.match(Java20Parser.COMMA);
	                    this.state = 884;
	                    this.moduleName();
	                    this.state = 889;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 892;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 894;
	            this.match(Java20Parser.USES);
	            this.state = 895;
	            this.typeName();
	            this.state = 896;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 898;
	            this.match(Java20Parser.PROVIDES);
	            this.state = 899;
	            this.typeName();
	            this.state = 900;
	            this.match(Java20Parser.WITH);
	            this.state = 901;
	            this.typeName();
	            this.state = 906;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===83) {
	                this.state = 902;
	                this.match(Java20Parser.COMMA);
	                this.state = 903;
	                this.typeName();
	                this.state = 908;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 909;
	            this.match(Java20Parser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requiresModifier() {
	    let localctx = new RequiresModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Java20Parser.RULE_requiresModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 913;
	        _la = this._input.LA(1);
	        if(!(_la===13 || _la===55)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classDeclaration() {
	    let localctx = new ClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Java20Parser.RULE_classDeclaration);
	    try {
	        this.state = 918;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 915;
	            this.normalClassDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 916;
	            this.enumDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 917;
	            this.recordDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalClassDeclaration() {
	    let localctx = new NormalClassDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Java20Parser.RULE_normalClassDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 923;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 264200) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 3375105) !== 0) || _la===86) {
	            this.state = 920;
	            this.classModifier();
	            this.state = 925;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 926;
	        this.match(Java20Parser.CLASS);
	        this.state = 927;
	        this.typeIdentifier();
	        this.state = 929;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 928;
	            this.typeParameters();
	        }

	        this.state = 932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 931;
	            this.classExtends();
	        }

	        this.state = 935;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===41) {
	            this.state = 934;
	            this.classImplements();
	        }

	        this.state = 938;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 937;
	            this.classPermits();
	        }

	        this.state = 940;
	        this.classBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classModifier() {
	    let localctx = new ClassModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Java20Parser.RULE_classModifier);
	    try {
	        this.state = 952;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 942;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 943;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 944;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 945;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 946;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 947;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 948;
	            this.match(Java20Parser.FINAL);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 949;
	            this.match(Java20Parser.SEALED);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 950;
	            this.match(Java20Parser.NONSEALED);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 951;
	            this.match(Java20Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameters() {
	    let localctx = new TypeParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Java20Parser.RULE_typeParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 954;
	        this.match(Java20Parser.LT);
	        this.state = 955;
	        this.typeParameterList();
	        this.state = 956;
	        this.match(Java20Parser.GT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeParameterList() {
	    let localctx = new TypeParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Java20Parser.RULE_typeParameterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 958;
	        this.typeParameter();
	        this.state = 963;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 959;
	            this.match(Java20Parser.COMMA);
	            this.state = 960;
	            this.typeParameter();
	            this.state = 965;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classExtends() {
	    let localctx = new ClassExtendsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Java20Parser.RULE_classExtends);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 966;
	        this.match(Java20Parser.EXTENDS);
	        this.state = 967;
	        this.classType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classImplements() {
	    let localctx = new ClassImplementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Java20Parser.RULE_classImplements);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 969;
	        this.match(Java20Parser.IMPLEMENTS);
	        this.state = 970;
	        this.interfaceTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceTypeList() {
	    let localctx = new InterfaceTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Java20Parser.RULE_interfaceTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 972;
	        this.interfaceType();
	        this.state = 977;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 973;
	            this.match(Java20Parser.COMMA);
	            this.state = 974;
	            this.interfaceType();
	            this.state = 979;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classPermits() {
	    let localctx = new ClassPermitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Java20Parser.RULE_classPermits);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 980;
	        this.match(Java20Parser.PERMITS);
	        this.state = 981;
	        this.typeName();
	        this.state = 986;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 982;
	            this.match(Java20Parser.COMMA);
	            this.state = 983;
	            this.typeName();
	            this.state = 988;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBody() {
	    let localctx = new ClassBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Java20Parser.RULE_classBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 989;
	        this.match(Java20Parser.LBRACE);
	        this.state = 993;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2253914094) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1156478997) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 35790851) !== 0) || _la===123) {
	            this.state = 990;
	            this.classBodyDeclaration();
	            this.state = 995;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 996;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classBodyDeclaration() {
	    let localctx = new ClassBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Java20Parser.RULE_classBodyDeclaration);
	    try {
	        this.state = 1002;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 998;
	            this.classMemberDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 999;
	            this.instanceInitializer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1000;
	            this.staticInitializer();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1001;
	            this.constructorDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classMemberDeclaration() {
	    let localctx = new ClassMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Java20Parser.RULE_classMemberDeclaration);
	    try {
	        this.state = 1009;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1004;
	            this.fieldDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1005;
	            this.methodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1006;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1007;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1008;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDeclaration() {
	    let localctx = new FieldDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Java20Parser.RULE_fieldDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 2417197057) !== 0) || _la===86) {
	            this.state = 1011;
	            this.fieldModifier();
	            this.state = 1016;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1017;
	        this.unannType();
	        this.state = 1018;
	        this.variableDeclaratorList();
	        this.state = 1019;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldModifier() {
	    let localctx = new FieldModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Java20Parser.RULE_fieldModifier);
	    try {
	        this.state = 1029;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1021;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1022;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1023;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1024;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1025;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1026;
	            this.match(Java20Parser.FINAL);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1027;
	            this.match(Java20Parser.TRANSIENT);
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1028;
	            this.match(Java20Parser.VOLATILE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorList() {
	    let localctx = new VariableDeclaratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Java20Parser.RULE_variableDeclaratorList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1031;
	        this.variableDeclarator();
	        this.state = 1036;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,76,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1032;
	                this.match(Java20Parser.COMMA);
	                this.state = 1033;
	                this.variableDeclarator(); 
	            }
	            this.state = 1038;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,76,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclarator() {
	    let localctx = new VariableDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Java20Parser.RULE_variableDeclarator);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1039;
	        this.variableDeclaratorId();
	        this.state = 1042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        if(la_===1) {
	            this.state = 1040;
	            this.match(Java20Parser.ASSIGN);
	            this.state = 1041;
	            this.variableInitializer();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaratorId() {
	    let localctx = new VariableDeclaratorIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Java20Parser.RULE_variableDeclaratorId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1044;
	        this.identifier();
	        this.state = 1046;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        if(la_===1) {
	            this.state = 1045;
	            this.dims();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializer() {
	    let localctx = new VariableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Java20Parser.RULE_variableInitializer);
	    try {
	        this.state = 1050;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 48:
	        case 54:
	        case 57:
	        case 58:
	        case 60:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 86:
	        case 91:
	        case 92:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1048;
	            this.expression();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1049;
	            this.arrayInitializer();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannType() {
	    let localctx = new UnannTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Java20Parser.RULE_unannType);
	    try {
	        this.state = 1054;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1052;
	            this.unannPrimitiveType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1053;
	            this.unannReferenceType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannPrimitiveType() {
	    let localctx = new UnannPrimitiveTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Java20Parser.RULE_unannPrimitiveType);
	    try {
	        this.state = 1058;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1056;
	            this.numericType();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1057;
	            this.match(Java20Parser.BOOLEAN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannReferenceType() {
	    let localctx = new UnannReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Java20Parser.RULE_unannReferenceType);
	    try {
	        this.state = 1063;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1060;
	            this.unannClassOrInterfaceType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1061;
	            this.unannTypeVariable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1062;
	            this.unannArrayType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassOrInterfaceType() {
	    let localctx = new UnannClassOrInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Java20Parser.RULE_unannClassOrInterfaceType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1073;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
	        if(la_===1) {
	            this.state = 1065;
	            this.packageName();
	            this.state = 1066;
	            this.match(Java20Parser.DOT);
	            this.state = 1070;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1067;
	                this.annotation();
	                this.state = 1072;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 1075;
	        this.typeIdentifier();
	        this.state = 1077;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        if(la_===1) {
	            this.state = 1076;
	            this.typeArguments();

	        }
	        this.state = 1080;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        if(la_===1) {
	            this.state = 1079;
	            this.uCOIT();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uCOIT() {
	    let localctx = new UCOITContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Java20Parser.RULE_uCOIT);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1082;
	        this.match(Java20Parser.DOT);
	        this.state = 1086;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1083;
	            this.annotation();
	            this.state = 1088;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1089;
	        this.typeIdentifier();
	        this.state = 1091;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        if(la_===1) {
	            this.state = 1090;
	            this.typeArguments();

	        }
	        this.state = 1094;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        if(la_===1) {
	            this.state = 1093;
	            this.uCOIT();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannClassType() {
	    let localctx = new UnannClassTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Java20Parser.RULE_unannClassType);
	    var _la = 0;
	    try {
	        this.state = 1115;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1096;
	            this.typeIdentifier();
	            this.state = 1098;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1097;
	                this.typeArguments();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1102;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1100;
	                this.packageName();
	                break;

	            case 2:
	                this.state = 1101;
	                this.unannClassOrInterfaceType();
	                break;

	            }
	            this.state = 1104;
	            this.match(Java20Parser.DOT);
	            this.state = 1108;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1105;
	                this.annotation();
	                this.state = 1110;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1111;
	            this.typeIdentifier();
	            this.state = 1113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1112;
	                this.typeArguments();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannInterfaceType() {
	    let localctx = new UnannInterfaceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Java20Parser.RULE_unannInterfaceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1117;
	        this.unannClassType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannTypeVariable() {
	    let localctx = new UnannTypeVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Java20Parser.RULE_unannTypeVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1119;
	        this.typeIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unannArrayType() {
	    let localctx = new UnannArrayTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Java20Parser.RULE_unannArrayType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1124;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1121;
	            this.unannPrimitiveType();
	            break;

	        case 2:
	            this.state = 1122;
	            this.unannClassOrInterfaceType();
	            break;

	        case 3:
	            this.state = 1123;
	            this.unannTypeVariable();
	            break;

	        }
	        this.state = 1126;
	        this.dims();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclaration() {
	    let localctx = new MethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Java20Parser.RULE_methodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1131;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 20156417) !== 0) || _la===86) {
	            this.state = 1128;
	            this.methodModifier();
	            this.state = 1133;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1134;
	        this.methodHeader();
	        this.state = 1135;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodModifier() {
	    let localctx = new MethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Java20Parser.RULE_methodModifier);
	    try {
	        this.state = 1147;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1137;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1138;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1139;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1140;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1141;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1142;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1143;
	            this.match(Java20Parser.FINAL);
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1144;
	            this.match(Java20Parser.SYNCHRONIZED);
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1145;
	            this.match(Java20Parser.NATIVE);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1146;
	            this.match(Java20Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodHeader() {
	    let localctx = new MethodHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Java20Parser.RULE_methodHeader);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1156;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1149;
	            this.typeParameters();
	            this.state = 1153;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1150;
	                this.annotation();
	                this.state = 1155;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 1158;
	        this.result();
	        this.state = 1159;
	        this.methodDeclarator();
	        this.state = 1161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 1160;
	            this.throwsT();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	result() {
	    let localctx = new ResultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Java20Parser.RULE_result);
	    try {
	        this.state = 1165;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1163;
	            this.unannType();
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1164;
	            this.match(Java20Parser.VOID);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodDeclarator() {
	    let localctx = new MethodDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Java20Parser.RULE_methodDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1167;
	        this.identifier();
	        this.state = 1168;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1172;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        if(la_===1) {
	            this.state = 1169;
	            this.receiverParameter();
	            this.state = 1170;
	            this.match(Java20Parser.COMMA);

	        }
	        this.state = 1175;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 526853) !== 0) || _la===86 || _la===123) {
	            this.state = 1174;
	            this.formalParameterList();
	        }

	        this.state = 1177;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80 || _la===86) {
	            this.state = 1178;
	            this.dims();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	receiverParameter() {
	    let localctx = new ReceiverParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Java20Parser.RULE_receiverParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1184;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1181;
	            this.annotation();
	            this.state = 1186;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1187;
	        this.unannType();
	        this.state = 1191;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262126) !== 0) || _la===123) {
	            this.state = 1188;
	            this.identifier();
	            this.state = 1189;
	            this.match(Java20Parser.DOT);
	        }

	        this.state = 1193;
	        this.match(Java20Parser.THIS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameterList() {
	    let localctx = new FormalParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Java20Parser.RULE_formalParameterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1195;
	        this.formalParameter();
	        this.state = 1200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1196;
	            this.match(Java20Parser.COMMA);
	            this.state = 1197;
	            this.formalParameter();
	            this.state = 1202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formalParameter() {
	    let localctx = new FormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Java20Parser.RULE_formalParameter);
	    var _la = 0;
	    try {
	        this.state = 1213;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1206;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===35 || _la===86) {
	                this.state = 1203;
	                this.variableModifier();
	                this.state = 1208;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1209;
	            this.unannType();
	            this.state = 1210;
	            this.variableDeclaratorId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1212;
	            this.variableArityParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableArityParameter() {
	    let localctx = new VariableArityParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Java20Parser.RULE_variableArityParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35 || _la===86) {
	            this.state = 1215;
	            this.variableModifier();
	            this.state = 1220;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1221;
	        this.unannType();
	        this.state = 1225;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1222;
	            this.annotation();
	            this.state = 1227;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1228;
	        this.match(Java20Parser.ELLIPSIS);
	        this.state = 1229;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableModifier() {
	    let localctx = new VariableModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Java20Parser.RULE_variableModifier);
	    try {
	        this.state = 1233;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1231;
	            this.annotation();
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1232;
	            this.match(Java20Parser.FINAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwsT() {
	    let localctx = new ThrowsTContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Java20Parser.RULE_throwsT);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1235;
	        this.match(Java20Parser.THROWS);
	        this.state = 1236;
	        this.exceptionTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionTypeList() {
	    let localctx = new ExceptionTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Java20Parser.RULE_exceptionTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1238;
	        this.exceptionType();
	        this.state = 1243;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1239;
	            this.match(Java20Parser.COMMA);
	            this.state = 1240;
	            this.exceptionType();
	            this.state = 1245;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptionType() {
	    let localctx = new ExceptionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Java20Parser.RULE_exceptionType);
	    try {
	        this.state = 1248;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1246;
	            this.classType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1247;
	            this.typeVariable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodBody() {
	    let localctx = new MethodBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Java20Parser.RULE_methodBody);
	    try {
	        this.state = 1252;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1250;
	            this.block();
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1251;
	            this.match(Java20Parser.SEMI);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instanceInitializer() {
	    let localctx = new InstanceInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Java20Parser.RULE_instanceInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1254;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	staticInitializer() {
	    let localctx = new StaticInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Java20Parser.RULE_staticInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1256;
	        this.match(Java20Parser.STATIC);
	        this.state = 1257;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclaration() {
	    let localctx = new ConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Java20Parser.RULE_constructorDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 7) !== 0) || _la===86) {
	            this.state = 1259;
	            this.constructorModifier();
	            this.state = 1264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1265;
	        this.constructorDeclarator();
	        this.state = 1267;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 1266;
	            this.throwsT();
	        }

	        this.state = 1269;
	        this.constructorBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorModifier() {
	    let localctx = new ConstructorModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Java20Parser.RULE_constructorModifier);
	    try {
	        this.state = 1275;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1271;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1272;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1273;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1274;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorDeclarator() {
	    let localctx = new ConstructorDeclaratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Java20Parser.RULE_constructorDeclarator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1278;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1277;
	            this.typeParameters();
	        }

	        this.state = 1280;
	        this.simpleTypeName();
	        this.state = 1281;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        if(la_===1) {
	            this.state = 1282;
	            this.receiverParameter();
	            this.state = 1283;
	            this.match(Java20Parser.COMMA);

	        }
	        this.state = 1288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 526853) !== 0) || _la===86 || _la===123) {
	            this.state = 1287;
	            this.formalParameterList();
	        }

	        this.state = 1290;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleTypeName() {
	    let localctx = new SimpleTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Java20Parser.RULE_simpleTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1292;
	        this.typeIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructorBody() {
	    let localctx = new ConstructorBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, Java20Parser.RULE_constructorBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1294;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1296;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,122,this._ctx);
	        if(la_===1) {
	            this.state = 1295;
	            this.explicitConstructorInvocation();

	        }
	        this.state = 1299;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3598712814) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2684270709) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 2240501) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1298;
	            this.blockStatements();
	        }

	        this.state = 1301;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitConstructorInvocation() {
	    let localctx = new ExplicitConstructorInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Java20Parser.RULE_explicitConstructorInvocation);
	    var _la = 0;
	    try {
	        this.state = 1329;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,129,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1304;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1303;
	                this.typeArguments();
	            }

	            this.state = 1306;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===60)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1307;
	            this.match(Java20Parser.LPAREN);
	            this.state = 1309;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 1308;
	                this.argumentList();
	            }

	            this.state = 1311;
	            this.match(Java20Parser.RPAREN);
	            this.state = 1312;
	            this.match(Java20Parser.SEMI);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1315;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1313;
	                this.expressionName();
	                break;

	            case 2:
	                this.state = 1314;
	                this.primary();
	                break;

	            }
	            this.state = 1317;
	            this.match(Java20Parser.DOT);
	            this.state = 1319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 1318;
	                this.typeArguments();
	            }

	            this.state = 1321;
	            this.match(Java20Parser.SUPER);
	            this.state = 1322;
	            this.match(Java20Parser.LPAREN);
	            this.state = 1324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 1323;
	                this.argumentList();
	            }

	            this.state = 1326;
	            this.match(Java20Parser.RPAREN);
	            this.state = 1327;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumDeclaration() {
	    let localctx = new EnumDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Java20Parser.RULE_enumDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 264200) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 3375105) !== 0) || _la===86) {
	            this.state = 1331;
	            this.classModifier();
	            this.state = 1336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1337;
	        this.match(Java20Parser.ENUM);
	        this.state = 1338;
	        this.typeIdentifier();
	        this.state = 1340;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===41) {
	            this.state = 1339;
	            this.classImplements();
	        }

	        this.state = 1342;
	        this.enumBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBody() {
	    let localctx = new EnumBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Java20Parser.RULE_enumBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1344;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262126) !== 0) || _la===86 || _la===123) {
	            this.state = 1345;
	            this.enumConstantList();
	        }

	        this.state = 1349;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83) {
	            this.state = 1348;
	            this.match(Java20Parser.COMMA);
	        }

	        this.state = 1352;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===82) {
	            this.state = 1351;
	            this.enumBodyDeclarations();
	        }

	        this.state = 1354;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantList() {
	    let localctx = new EnumConstantListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Java20Parser.RULE_enumConstantList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1356;
	        this.enumConstant();
	        this.state = 1361;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1357;
	                this.match(Java20Parser.COMMA);
	                this.state = 1358;
	                this.enumConstant(); 
	            }
	            this.state = 1363;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstant() {
	    let localctx = new EnumConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Java20Parser.RULE_enumConstant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1364;
	            this.enumConstantModifier();
	            this.state = 1369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1370;
	        this.identifier();
	        this.state = 1376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 1371;
	            this.match(Java20Parser.LPAREN);
	            this.state = 1373;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 1372;
	                this.argumentList();
	            }

	            this.state = 1375;
	            this.match(Java20Parser.RPAREN);
	        }

	        this.state = 1379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===78) {
	            this.state = 1378;
	            this.classBody();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumConstantModifier() {
	    let localctx = new EnumConstantModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Java20Parser.RULE_enumConstantModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1381;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumBodyDeclarations() {
	    let localctx = new EnumBodyDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Java20Parser.RULE_enumBodyDeclarations);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1383;
	        this.match(Java20Parser.SEMI);
	        this.state = 1387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2253914094) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1156478997) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 35790851) !== 0) || _la===123) {
	            this.state = 1384;
	            this.classBodyDeclaration();
	            this.state = 1389;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordDeclaration() {
	    let localctx = new RecordDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Java20Parser.RULE_recordDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 264200) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 3375105) !== 0) || _la===86) {
	            this.state = 1390;
	            this.classModifier();
	            this.state = 1395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1396;
	        this.match(Java20Parser.RECORD);
	        this.state = 1397;
	        this.typeIdentifier();
	        this.state = 1399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1398;
	            this.typeParameters();
	        }

	        this.state = 1401;
	        this.recordHeader();
	        this.state = 1403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===41) {
	            this.state = 1402;
	            this.classImplements();
	        }

	        this.state = 1405;
	        this.recordBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordHeader() {
	    let localctx = new RecordHeaderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Java20Parser.RULE_recordHeader);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1407;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1409;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 131713) !== 0) || _la===86 || _la===123) {
	            this.state = 1408;
	            this.recordComponentList();
	        }

	        this.state = 1411;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponentList() {
	    let localctx = new RecordComponentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Java20Parser.RULE_recordComponentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1413;
	        this.recordComponent();
	        this.state = 1418;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1414;
	            this.match(Java20Parser.COMMA);
	            this.state = 1415;
	            this.recordComponent();
	            this.state = 1420;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponent() {
	    let localctx = new RecordComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Java20Parser.RULE_recordComponent);
	    var _la = 0;
	    try {
	        this.state = 1431;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1424;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 1421;
	                this.recordComponentModifier();
	                this.state = 1426;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1427;
	            this.unannType();
	            this.state = 1428;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1430;
	            this.variableArityRecordComponent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableArityRecordComponent() {
	    let localctx = new VariableArityRecordComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Java20Parser.RULE_variableArityRecordComponent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1433;
	            this.recordComponentModifier();
	            this.state = 1438;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1439;
	        this.unannType();
	        this.state = 1443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 1440;
	            this.annotation();
	            this.state = 1445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1446;
	        this.match(Java20Parser.ELLIPSIS);
	        this.state = 1447;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordComponentModifier() {
	    let localctx = new RecordComponentModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Java20Parser.RULE_recordComponentModifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1449;
	        this.annotation();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordBody() {
	    let localctx = new RecordBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Java20Parser.RULE_recordBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1451;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2253914094) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 1156478997) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 35790851) !== 0) || _la===123) {
	            this.state = 1452;
	            this.recordBodyDeclaration();
	            this.state = 1457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1458;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordBodyDeclaration() {
	    let localctx = new RecordBodyDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Java20Parser.RULE_recordBodyDeclaration);
	    try {
	        this.state = 1462;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,151,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1460;
	            this.classBodyDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1461;
	            this.compactConstructorDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compactConstructorDeclaration() {
	    let localctx = new CompactConstructorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Java20Parser.RULE_compactConstructorDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1467;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 7) !== 0) || _la===86) {
	            this.state = 1464;
	            this.constructorModifier();
	            this.state = 1469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1470;
	        this.simpleTypeName();
	        this.state = 1471;
	        this.constructorBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceDeclaration() {
	    let localctx = new InterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Java20Parser.RULE_interfaceDeclaration);
	    try {
	        this.state = 1475;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1473;
	            this.normalInterfaceDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1474;
	            this.annotationInterfaceDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalInterfaceDeclaration() {
	    let localctx = new NormalInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Java20Parser.RULE_normalInterfaceDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1480;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 264200) !== 0) || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 103) !== 0) || _la===86) {
	            this.state = 1477;
	            this.interfaceModifier();
	            this.state = 1482;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1483;
	        this.match(Java20Parser.INTERFACE);
	        this.state = 1484;
	        this.typeIdentifier();
	        this.state = 1486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 1485;
	            this.typeParameters();
	        }

	        this.state = 1489;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 1488;
	            this.interfaceExtends();
	        }

	        this.state = 1492;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 1491;
	            this.interfacePermits();
	        }

	        this.state = 1494;
	        this.interfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceModifier() {
	    let localctx = new InterfaceModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Java20Parser.RULE_interfaceModifier);
	    try {
	        this.state = 1505;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1496;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1497;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1498;
	            this.match(Java20Parser.PROTECTED);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1499;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1500;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1501;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1502;
	            this.match(Java20Parser.SEALED);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1503;
	            this.match(Java20Parser.NONSEALED);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1504;
	            this.match(Java20Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceExtends() {
	    let localctx = new InterfaceExtendsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Java20Parser.RULE_interfaceExtends);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1507;
	        this.match(Java20Parser.EXTENDS);
	        this.state = 1508;
	        this.interfaceTypeList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfacePermits() {
	    let localctx = new InterfacePermitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Java20Parser.RULE_interfacePermits);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1510;
	        this.match(Java20Parser.PERMITS);
	        this.state = 1511;
	        this.typeName();
	        this.state = 1516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1512;
	            this.match(Java20Parser.COMMA);
	            this.state = 1513;
	            this.typeName();
	            this.state = 1518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceBody() {
	    let localctx = new InterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, Java20Parser.RULE_interfaceBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1519;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1523;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2790785006) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 15611925) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 35782657) !== 0) || _la===123) {
	            this.state = 1520;
	            this.interfaceMemberDeclaration();
	            this.state = 1525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1526;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMemberDeclaration() {
	    let localctx = new InterfaceMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, Java20Parser.RULE_interfaceMemberDeclaration);
	    try {
	        this.state = 1533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1528;
	            this.constantDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1529;
	            this.interfaceMethodDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1530;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1531;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1532;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantDeclaration() {
	    let localctx = new ConstantDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, Java20Parser.RULE_constantDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1538;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 1179649) !== 0) || _la===86) {
	            this.state = 1535;
	            this.constantModifier();
	            this.state = 1540;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1541;
	        this.unannType();
	        this.state = 1542;
	        this.variableDeclaratorList();
	        this.state = 1543;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantModifier() {
	    let localctx = new ConstantModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, Java20Parser.RULE_constantModifier);
	    try {
	        this.state = 1549;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1545;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1546;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1547;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1548;
	            this.match(Java20Parser.FINAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodDeclaration() {
	    let localctx = new InterfaceMethodDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, Java20Parser.RULE_interfaceMethodDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===29 || ((((_la - 50)) & ~0x1f) === 0 && ((1 << (_la - 50)) & 101) !== 0) || _la===86) {
	            this.state = 1551;
	            this.interfaceMethodModifier();
	            this.state = 1556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1557;
	        this.methodHeader();
	        this.state = 1558;
	        this.methodBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interfaceMethodModifier() {
	    let localctx = new InterfaceMethodModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, Java20Parser.RULE_interfaceMethodModifier);
	    try {
	        this.state = 1567;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1560;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1561;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1562;
	            this.match(Java20Parser.PRIVATE);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1563;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1564;
	            this.match(Java20Parser.DEFAULT);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1565;
	            this.match(Java20Parser.STATIC);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1566;
	            this.match(Java20Parser.STRICTFP);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceDeclaration() {
	    let localctx = new AnnotationInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, Java20Parser.RULE_annotationInterfaceDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1572;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,166,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1569;
	                this.interfaceModifier(); 
	            }
	            this.state = 1574;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,166,this._ctx);
	        }

	        this.state = 1575;
	        this.match(Java20Parser.AT);
	        this.state = 1576;
	        this.match(Java20Parser.INTERFACE);
	        this.state = 1577;
	        this.typeIdentifier();
	        this.state = 1578;
	        this.annotationInterfaceBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceBody() {
	    let localctx = new AnnotationInterfaceBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, Java20Parser.RULE_annotationInterfaceBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1580;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1584;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2253914094) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 15611925) !== 0) || _la===82 || _la===86 || _la===123) {
	            this.state = 1581;
	            this.annotationInterfaceMemberDeclaration();
	            this.state = 1586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1587;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceMemberDeclaration() {
	    let localctx = new AnnotationInterfaceMemberDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, Java20Parser.RULE_annotationInterfaceMemberDeclaration);
	    try {
	        this.state = 1594;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1589;
	            this.annotationInterfaceElementDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1590;
	            this.constantDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1591;
	            this.classDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1592;
	            this.interfaceDeclaration();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1593;
	            this.match(Java20Parser.SEMI);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceElementDeclaration() {
	    let localctx = new AnnotationInterfaceElementDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, Java20Parser.RULE_annotationInterfaceElementDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===18 || _la===52 || _la===86) {
	            this.state = 1596;
	            this.annotationInterfaceElementModifier();
	            this.state = 1601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1602;
	        this.unannType();
	        this.state = 1603;
	        this.identifier();
	        this.state = 1604;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1605;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1607;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===80 || _la===86) {
	            this.state = 1606;
	            this.dims();
	        }

	        this.state = 1610;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===29) {
	            this.state = 1609;
	            this.defaultValue();
	        }

	        this.state = 1612;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotationInterfaceElementModifier() {
	    let localctx = new AnnotationInterfaceElementModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, Java20Parser.RULE_annotationInterfaceElementModifier);
	    try {
	        this.state = 1617;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1614;
	            this.annotation();
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1615;
	            this.match(Java20Parser.PUBLIC);
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1616;
	            this.match(Java20Parser.ABSTRACT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultValue() {
	    let localctx = new DefaultValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, Java20Parser.RULE_defaultValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1619;
	        this.match(Java20Parser.DEFAULT);
	        this.state = 1620;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotation() {
	    let localctx = new AnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, Java20Parser.RULE_annotation);
	    try {
	        this.state = 1625;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,173,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1622;
	            this.normalAnnotation();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1623;
	            this.markerAnnotation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1624;
	            this.singleElementAnnotation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalAnnotation() {
	    let localctx = new NormalAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, Java20Parser.RULE_normalAnnotation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        this.match(Java20Parser.AT);
	        this.state = 1628;
	        this.typeName();
	        this.state = 1629;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1631;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262126) !== 0) || _la===123) {
	            this.state = 1630;
	            this.elementValuePairList();
	        }

	        this.state = 1633;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePairList() {
	    let localctx = new ElementValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, Java20Parser.RULE_elementValuePairList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1635;
	        this.elementValuePair();
	        this.state = 1640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1636;
	            this.match(Java20Parser.COMMA);
	            this.state = 1637;
	            this.elementValuePair();
	            this.state = 1642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValuePair() {
	    let localctx = new ElementValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, Java20Parser.RULE_elementValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1643;
	        this.identifier();
	        this.state = 1644;
	        this.match(Java20Parser.ASSIGN);
	        this.state = 1645;
	        this.elementValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValue() {
	    let localctx = new ElementValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, Java20Parser.RULE_elementValue);
	    try {
	        this.state = 1650;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,176,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1647;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1648;
	            this.elementValueArrayInitializer();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1649;
	            this.annotation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueArrayInitializer() {
	    let localctx = new ElementValueArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, Java20Parser.RULE_elementValueArrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1652;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714751) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1653;
	            this.elementValueList();
	        }

	        this.state = 1657;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83) {
	            this.state = 1656;
	            this.match(Java20Parser.COMMA);
	        }

	        this.state = 1659;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementValueList() {
	    let localctx = new ElementValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, Java20Parser.RULE_elementValueList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1661;
	        this.elementValue();
	        this.state = 1666;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,179,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1662;
	                this.match(Java20Parser.COMMA);
	                this.state = 1663;
	                this.elementValue(); 
	            }
	            this.state = 1668;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,179,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	markerAnnotation() {
	    let localctx = new MarkerAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, Java20Parser.RULE_markerAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1669;
	        this.match(Java20Parser.AT);
	        this.state = 1670;
	        this.typeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleElementAnnotation() {
	    let localctx = new SingleElementAnnotationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, Java20Parser.RULE_singleElementAnnotation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1672;
	        this.match(Java20Parser.AT);
	        this.state = 1673;
	        this.typeName();
	        this.state = 1674;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1675;
	        this.elementValue();
	        this.state = 1676;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayInitializer() {
	    let localctx = new ArrayInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, Java20Parser.RULE_arrayInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1678;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714751) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1679;
	            this.variableInitializerList();
	        }

	        this.state = 1683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===83) {
	            this.state = 1682;
	            this.match(Java20Parser.COMMA);
	        }

	        this.state = 1685;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableInitializerList() {
	    let localctx = new VariableInitializerListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, Java20Parser.RULE_variableInitializerList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1687;
	        this.variableInitializer();
	        this.state = 1692;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,182,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1688;
	                this.match(Java20Parser.COMMA);
	                this.state = 1689;
	                this.variableInitializer(); 
	            }
	            this.state = 1694;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,182,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, Java20Parser.RULE_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1695;
	        this.match(Java20Parser.LBRACE);
	        this.state = 1697;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3598712814) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2684270709) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 2240501) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1696;
	            this.blockStatements();
	        }

	        this.state = 1699;
	        this.match(Java20Parser.RBRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatements() {
	    let localctx = new BlockStatementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, Java20Parser.RULE_blockStatements);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1701;
	        this.blockStatement();
	        this.state = 1705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3598712814) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2684270709) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 2240501) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1702;
	            this.blockStatement();
	            this.state = 1707;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blockStatement() {
	    let localctx = new BlockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, Java20Parser.RULE_blockStatement);
	    try {
	        this.state = 1711;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1708;
	            this.localClassOrInterfaceDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1709;
	            this.localVariableDeclarationStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1710;
	            this.statement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localClassOrInterfaceDeclaration() {
	    let localctx = new LocalClassOrInterfaceDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, Java20Parser.RULE_localClassOrInterfaceDeclaration);
	    try {
	        this.state = 1715;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1713;
	            this.classDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1714;
	            this.normalInterfaceDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclaration() {
	    let localctx = new LocalVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, Java20Parser.RULE_localVariableDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1720;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35 || _la===86) {
	            this.state = 1717;
	            this.variableModifier();
	            this.state = 1722;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1723;
	        this.localVariableType();
	        this.state = 1725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
	        if(la_===1) {
	            this.state = 1724;
	            this.variableDeclaratorList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableType() {
	    let localctx = new LocalVariableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, Java20Parser.RULE_localVariableType);
	    try {
	        this.state = 1729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1727;
	            this.unannType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1728;
	            this.match(Java20Parser.VAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localVariableDeclarationStatement() {
	    let localctx = new LocalVariableDeclarationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, Java20Parser.RULE_localVariableDeclarationStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1731;
	        this.localVariableDeclaration();
	        this.state = 1732;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, Java20Parser.RULE_statement);
	    try {
	        this.state = 1740;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1734;
	            this.statementWithoutTrailingSubstatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1735;
	            this.labeledStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1736;
	            this.ifThenStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1737;
	            this.ifThenElseStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1738;
	            this.whileStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1739;
	            this.forStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementNoShortIf() {
	    let localctx = new StatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, Java20Parser.RULE_statementNoShortIf);
	    try {
	        this.state = 1747;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1742;
	            this.statementWithoutTrailingSubstatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1743;
	            this.labeledStatementNoShortIf();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1744;
	            this.ifThenElseStatementNoShortIf();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1745;
	            this.whileStatementNoShortIf();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1746;
	            this.forStatementNoShortIf();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementWithoutTrailingSubstatement() {
	    let localctx = new StatementWithoutTrailingSubstatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, Java20Parser.RULE_statementWithoutTrailingSubstatement);
	    try {
	        this.state = 1762;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1749;
	            this.block();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1750;
	            this.emptyStatement_();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1751;
	            this.expressionStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1752;
	            this.assertStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1753;
	            this.switchStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1754;
	            this.doStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1755;
	            this.breakStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1756;
	            this.continueStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1757;
	            this.returnStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1758;
	            this.synchronizedStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1759;
	            this.throwStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1760;
	            this.tryStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1761;
	            this.yieldStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyStatement_() {
	    let localctx = new EmptyStatement_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, Java20Parser.RULE_emptyStatement_);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1764;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatement() {
	    let localctx = new LabeledStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, Java20Parser.RULE_labeledStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1766;
	        this.identifier();
	        this.state = 1767;
	        this.match(Java20Parser.COLON);
	        this.state = 1768;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledStatementNoShortIf() {
	    let localctx = new LabeledStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, Java20Parser.RULE_labeledStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1770;
	        this.identifier();
	        this.state = 1771;
	        this.match(Java20Parser.COLON);
	        this.state = 1772;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionStatement() {
	    let localctx = new ExpressionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, Java20Parser.RULE_expressionStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1774;
	        this.statementExpression();
	        this.state = 1775;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpression() {
	    let localctx = new StatementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, Java20Parser.RULE_statementExpression);
	    try {
	        this.state = 1784;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1777;
	            this.assignment();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1778;
	            this.preIncrementExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1779;
	            this.preDecrementExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1780;
	            this.postIncrementExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1781;
	            this.postDecrementExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1782;
	            this.methodInvocation();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1783;
	            this.classInstanceCreationExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenStatement() {
	    let localctx = new IfThenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, Java20Parser.RULE_ifThenStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1786;
	        this.match(Java20Parser.IF);
	        this.state = 1787;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1788;
	        this.expression();
	        this.state = 1789;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1790;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStatement() {
	    let localctx = new IfThenElseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, Java20Parser.RULE_ifThenElseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1792;
	        this.match(Java20Parser.IF);
	        this.state = 1793;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1794;
	        this.expression();
	        this.state = 1795;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1796;
	        this.statementNoShortIf();
	        this.state = 1797;
	        this.match(Java20Parser.ELSE);
	        this.state = 1798;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifThenElseStatementNoShortIf() {
	    let localctx = new IfThenElseStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, Java20Parser.RULE_ifThenElseStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1800;
	        this.match(Java20Parser.IF);
	        this.state = 1801;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1802;
	        this.expression();
	        this.state = 1803;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1804;
	        this.statementNoShortIf();
	        this.state = 1805;
	        this.match(Java20Parser.ELSE);
	        this.state = 1806;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assertStatement() {
	    let localctx = new AssertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, Java20Parser.RULE_assertStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1808;
	        this.match(Java20Parser.ASSERT);
	        this.state = 1809;
	        this.expression();
	        this.state = 1812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94) {
	            this.state = 1810;
	            this.match(Java20Parser.COLON);
	            this.state = 1811;
	            this.expression();
	        }

	        this.state = 1814;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchStatement() {
	    let localctx = new SwitchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, Java20Parser.RULE_switchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816;
	        this.match(Java20Parser.SWITCH);
	        this.state = 1817;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1818;
	        this.expression();
	        this.state = 1819;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1820;
	        this.switchBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlock() {
	    let localctx = new SwitchBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, Java20Parser.RULE_switchBlock);
	    var _la = 0;
	    try {
	        this.state = 1848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,198,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1822;
	            this.match(Java20Parser.LBRACE);
	            this.state = 1823;
	            this.switchRule();
	            this.state = 1827;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23 || _la===29) {
	                this.state = 1824;
	                this.switchRule();
	                this.state = 1829;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1830;
	            this.match(Java20Parser.RBRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1832;
	            this.match(Java20Parser.LBRACE);
	            this.state = 1836;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1833;
	                    this.switchBlockStatementGroup(); 
	                }
	                this.state = 1838;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
	            }

	            this.state = 1844;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===23 || _la===29) {
	                this.state = 1839;
	                this.switchLabel();
	                this.state = 1840;
	                this.match(Java20Parser.COLON);
	                this.state = 1846;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1847;
	            this.match(Java20Parser.RBRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchRule() {
	    let localctx = new SwitchRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, Java20Parser.RULE_switchRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1850;
	        this.switchLabel();
	        this.state = 1851;
	        this.match(Java20Parser.ARROW);
	        this.state = 1857;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 48:
	        case 54:
	        case 57:
	        case 58:
	        case 60:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 86:
	        case 91:
	        case 92:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 123:
	            this.state = 1852;
	            this.expression();
	            this.state = 1853;
	            this.match(Java20Parser.SEMI);
	            break;
	        case 78:
	            this.state = 1855;
	            this.block();
	            break;
	        case 61:
	            this.state = 1856;
	            this.throwStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchBlockStatementGroup() {
	    let localctx = new SwitchBlockStatementGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, Java20Parser.RULE_switchBlockStatementGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1859;
	        this.switchLabel();
	        this.state = 1860;
	        this.match(Java20Parser.COLON);
	        this.state = 1866;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23 || _la===29) {
	            this.state = 1861;
	            this.switchLabel();
	            this.state = 1862;
	            this.match(Java20Parser.COLON);
	            this.state = 1868;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1869;
	        this.blockStatements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchLabel() {
	    let localctx = new SwitchLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, Java20Parser.RULE_switchLabel);
	    var _la = 0;
	    try {
	        this.state = 1881;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1871;
	            this.match(Java20Parser.CASE);
	            this.state = 1872;
	            this.caseConstant();
	            this.state = 1877;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===83) {
	                this.state = 1873;
	                this.match(Java20Parser.COMMA);
	                this.state = 1874;
	                this.caseConstant();
	                this.state = 1879;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1880;
	            this.match(Java20Parser.DEFAULT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseConstant() {
	    let localctx = new CaseConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, Java20Parser.RULE_caseConstant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1883;
	        this.conditionalExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatement() {
	    let localctx = new WhileStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, Java20Parser.RULE_whileStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1885;
	        this.match(Java20Parser.WHILE);
	        this.state = 1886;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1887;
	        this.expression();
	        this.state = 1888;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1889;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileStatementNoShortIf() {
	    let localctx = new WhileStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, Java20Parser.RULE_whileStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1891;
	        this.match(Java20Parser.WHILE);
	        this.state = 1892;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1893;
	        this.expression();
	        this.state = 1894;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1895;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, Java20Parser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1897;
	        this.match(Java20Parser.DO);
	        this.state = 1898;
	        this.statement();
	        this.state = 1899;
	        this.match(Java20Parser.WHILE);
	        this.state = 1900;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1901;
	        this.expression();
	        this.state = 1902;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1903;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, Java20Parser.RULE_forStatement);
	    try {
	        this.state = 1907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1905;
	            this.basicForStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1906;
	            this.enhancedForStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatementNoShortIf() {
	    let localctx = new ForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, Java20Parser.RULE_forStatementNoShortIf);
	    try {
	        this.state = 1911;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,204,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1909;
	            this.basicForStatementNoShortIf();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1910;
	            this.enhancedForStatementNoShortIf();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicForStatement() {
	    let localctx = new BasicForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, Java20Parser.RULE_basicForStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1913;
	        this.match(Java20Parser.FOR);
	        this.state = 1914;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 1112025605) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 131327) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1915;
	            this.forInit();
	        }

	        this.state = 1918;
	        this.match(Java20Parser.SEMI);
	        this.state = 1920;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1919;
	            this.expression();
	        }

	        this.state = 1922;
	        this.match(Java20Parser.SEMI);
	        this.state = 1924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 278006401) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 131327) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1923;
	            this.forUpdate();
	        }

	        this.state = 1926;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1927;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicForStatementNoShortIf() {
	    let localctx = new BasicForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, Java20Parser.RULE_basicForStatementNoShortIf);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1929;
	        this.match(Java20Parser.FOR);
	        this.state = 1930;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 1112025605) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 131327) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1931;
	            this.forInit();
	        }

	        this.state = 1934;
	        this.match(Java20Parser.SEMI);
	        this.state = 1936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1935;
	            this.expression();
	        }

	        this.state = 1938;
	        this.match(Java20Parser.SEMI);
	        this.state = 1940;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 278006401) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 131327) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097155) !== 0)) {
	            this.state = 1939;
	            this.forUpdate();
	        }

	        this.state = 1942;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1943;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forInit() {
	    let localctx = new ForInitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, Java20Parser.RULE_forInit);
	    try {
	        this.state = 1947;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1945;
	            this.statementExpressionList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1946;
	            this.localVariableDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forUpdate() {
	    let localctx = new ForUpdateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, Java20Parser.RULE_forUpdate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1949;
	        this.statementExpressionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementExpressionList() {
	    let localctx = new StatementExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, Java20Parser.RULE_statementExpressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1951;
	        this.statementExpression();
	        this.state = 1956;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 1952;
	            this.match(Java20Parser.COMMA);
	            this.state = 1953;
	            this.statementExpression();
	            this.state = 1958;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForStatement() {
	    let localctx = new EnhancedForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, Java20Parser.RULE_enhancedForStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1959;
	        this.match(Java20Parser.FOR);
	        this.state = 1960;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1961;
	        this.localVariableDeclaration();
	        this.state = 1962;
	        this.match(Java20Parser.COLON);
	        this.state = 1963;
	        this.expression();
	        this.state = 1964;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1965;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enhancedForStatementNoShortIf() {
	    let localctx = new EnhancedForStatementNoShortIfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, Java20Parser.RULE_enhancedForStatementNoShortIf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1967;
	        this.match(Java20Parser.FOR);
	        this.state = 1968;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1969;
	        this.localVariableDeclaration();
	        this.state = 1970;
	        this.match(Java20Parser.COLON);
	        this.state = 1971;
	        this.expression();
	        this.state = 1972;
	        this.match(Java20Parser.RPAREN);
	        this.state = 1973;
	        this.statementNoShortIf();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	breakStatement() {
	    let localctx = new BreakStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, Java20Parser.RULE_breakStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1975;
	        this.match(Java20Parser.BREAK);
	        this.state = 1977;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262126) !== 0) || _la===123) {
	            this.state = 1976;
	            this.identifier();
	        }

	        this.state = 1979;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continueStatement() {
	    let localctx = new ContinueStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, Java20Parser.RULE_continueStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1981;
	        this.match(Java20Parser.CONTINUE);
	        this.state = 1983;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 262126) !== 0) || _la===123) {
	            this.state = 1982;
	            this.identifier();
	        }

	        this.state = 1985;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, Java20Parser.RULE_returnStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1987;
	        this.match(Java20Parser.RETURN);
	        this.state = 1989;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 1988;
	            this.expression();
	        }

	        this.state = 1991;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	throwStatement() {
	    let localctx = new ThrowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, Java20Parser.RULE_throwStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1993;
	        this.match(Java20Parser.THROW);
	        this.state = 1994;
	        this.expression();
	        this.state = 1995;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	synchronizedStatement() {
	    let localctx = new SynchronizedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, Java20Parser.RULE_synchronizedStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1997;
	        this.match(Java20Parser.SYNCHRONIZED);
	        this.state = 1998;
	        this.match(Java20Parser.LPAREN);
	        this.state = 1999;
	        this.expression();
	        this.state = 2000;
	        this.match(Java20Parser.RPAREN);
	        this.state = 2001;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryStatement() {
	    let localctx = new TryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, Java20Parser.RULE_tryStatement);
	    var _la = 0;
	    try {
	        this.state = 2019;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2003;
	            this.match(Java20Parser.TRY);
	            this.state = 2004;
	            this.block();
	            this.state = 2005;
	            this.catches();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2007;
	            this.match(Java20Parser.TRY);
	            this.state = 2008;
	            this.block();
	            this.state = 2009;
	            this.finallyBlock();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2011;
	            this.match(Java20Parser.TRY);
	            this.state = 2012;
	            this.block();
	            this.state = 2014;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 2013;
	                this.catches();
	            }

	            this.state = 2016;
	            this.finallyBlock();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2018;
	            this.tryWithResourcesStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catches() {
	    let localctx = new CatchesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, Java20Parser.RULE_catches);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2021;
	        this.catchClause();
	        this.state = 2025;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===24) {
	            this.state = 2022;
	            this.catchClause();
	            this.state = 2027;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchClause() {
	    let localctx = new CatchClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, Java20Parser.RULE_catchClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2028;
	        this.match(Java20Parser.CATCH);
	        this.state = 2029;
	        this.match(Java20Parser.LPAREN);
	        this.state = 2030;
	        this.catchFormalParameter();
	        this.state = 2031;
	        this.match(Java20Parser.RPAREN);
	        this.state = 2032;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchFormalParameter() {
	    let localctx = new CatchFormalParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, Java20Parser.RULE_catchFormalParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2037;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===35 || _la===86) {
	            this.state = 2034;
	            this.variableModifier();
	            this.state = 2039;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2040;
	        this.catchType();
	        this.state = 2041;
	        this.variableDeclaratorId();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catchType() {
	    let localctx = new CatchTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, Java20Parser.RULE_catchType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2043;
	        this.unannClassType();
	        this.state = 2048;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===109) {
	            this.state = 2044;
	            this.match(Java20Parser.BITOR);
	            this.state = 2045;
	            this.classType();
	            this.state = 2050;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	finallyBlock() {
	    let localctx = new FinallyBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, Java20Parser.RULE_finallyBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2051;
	        this.match(Java20Parser.FINALLY);
	        this.state = 2052;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tryWithResourcesStatement() {
	    let localctx = new TryWithResourcesStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, Java20Parser.RULE_tryWithResourcesStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2054;
	        this.match(Java20Parser.TRY);
	        this.state = 2055;
	        this.resourceSpecification();
	        this.state = 2056;
	        this.block();
	        this.state = 2058;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 2057;
	            this.catches();
	        }

	        this.state = 2061;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 2060;
	            this.finallyBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceSpecification() {
	    let localctx = new ResourceSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, Java20Parser.RULE_resourceSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2063;
	        this.match(Java20Parser.LPAREN);
	        this.state = 2064;
	        this.resourceList();
	        this.state = 2066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===82) {
	            this.state = 2065;
	            this.match(Java20Parser.SEMI);
	        }

	        this.state = 2068;
	        this.match(Java20Parser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceList() {
	    let localctx = new ResourceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, Java20Parser.RULE_resourceList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2070;
	        this.resource();
	        this.state = 2075;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2071;
	                this.match(Java20Parser.SEMI);
	                this.state = 2072;
	                this.resource(); 
	            }
	            this.state = 2077;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, Java20Parser.RULE_resource);
	    try {
	        this.state = 2080;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,225,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2078;
	            this.localVariableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2079;
	            this.variableAccess();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableAccess() {
	    let localctx = new VariableAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, Java20Parser.RULE_variableAccess);
	    try {
	        this.state = 2084;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2082;
	            this.expressionName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2083;
	            this.fieldAccess();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, Java20Parser.RULE_yieldStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2086;
	        this.match(Java20Parser.YIELD);
	        this.state = 2087;
	        this.expression();
	        this.state = 2088;
	        this.match(Java20Parser.SEMI);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, Java20Parser.RULE_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2090;
	        this.typePattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typePattern() {
	    let localctx = new TypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, Java20Parser.RULE_typePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2092;
	        this.localVariableDeclaration();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, Java20Parser.RULE_expression);
	    try {
	        this.state = 2096;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2094;
	            this.lambdaExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2095;
	            this.assignmentExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primary() {
	    let localctx = new PrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, Java20Parser.RULE_primary);
	    try {
	        this.state = 2100;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2098;
	            this.primaryNoNewArray();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2099;
	            this.arrayCreationExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryNoNewArray() {
	    let localctx = new PrimaryNoNewArrayContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, Java20Parser.RULE_primaryNoNewArray);
	    var _la = 0;
	    try {
	        this.state = 2319;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2102;
	            this.literal();
	            this.state = 2104;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,229,this._ctx);
	            if(la_===1) {
	                this.state = 2103;
	                this.pNNA();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2106;
	            this.classLiteral();
	            this.state = 2108;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	            if(la_===1) {
	                this.state = 2107;
	                this.pNNA();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2110;
	            this.match(Java20Parser.THIS);
	            this.state = 2112;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	            if(la_===1) {
	                this.state = 2111;
	                this.pNNA();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2114;
	            this.typeName();
	            this.state = 2115;
	            this.match(Java20Parser.DOT);
	            this.state = 2116;
	            this.match(Java20Parser.THIS);
	            this.state = 2118;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	            if(la_===1) {
	                this.state = 2117;
	                this.pNNA();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2120;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2121;
	            this.expression();
	            this.state = 2122;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2124;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,233,this._ctx);
	            if(la_===1) {
	                this.state = 2123;
	                this.pNNA();

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2126;
	            this.unqualifiedClassInstanceCreationExpression();
	            this.state = 2128;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	            if(la_===1) {
	                this.state = 2127;
	                this.pNNA();

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2130;
	            this.expressionName();
	            this.state = 2131;
	            this.match(Java20Parser.DOT);
	            this.state = 2132;
	            this.unqualifiedClassInstanceCreationExpression();
	            this.state = 2134;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	            if(la_===1) {
	                this.state = 2133;
	                this.pNNA();

	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2136;
	            this.arrayCreationExpression();
	            this.state = 2137;
	            this.match(Java20Parser.DOT);
	            this.state = 2138;
	            this.unqualifiedClassInstanceCreationExpression();
	            this.state = 2140;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	            if(la_===1) {
	                this.state = 2139;
	                this.pNNA();

	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2142;
	            this.arrayCreationExpression();
	            this.state = 2143;
	            this.match(Java20Parser.DOT);
	            this.state = 2144;
	            this.identifier();
	            this.state = 2146;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	            if(la_===1) {
	                this.state = 2145;
	                this.pNNA();

	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2148;
	            this.match(Java20Parser.SUPER);
	            this.state = 2149;
	            this.match(Java20Parser.DOT);
	            this.state = 2150;
	            this.identifier();
	            this.state = 2152;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	            if(la_===1) {
	                this.state = 2151;
	                this.pNNA();

	            }
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 2154;
	            this.typeName();
	            this.state = 2155;
	            this.match(Java20Parser.DOT);
	            this.state = 2156;
	            this.match(Java20Parser.SUPER);
	            this.state = 2157;
	            this.match(Java20Parser.DOT);
	            this.state = 2158;
	            this.identifier();
	            this.state = 2160;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	            if(la_===1) {
	                this.state = 2159;
	                this.pNNA();

	            }
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 2162;
	            this.expressionName();
	            this.state = 2163;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2164;
	            this.expression();
	            this.state = 2165;
	            this.match(Java20Parser.RBRACK);
	            this.state = 2167;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	            if(la_===1) {
	                this.state = 2166;
	                this.pNNA();

	            }
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 2169;
	            this.arrayCreationExpressionWithInitializer();
	            this.state = 2170;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2171;
	            this.expression();
	            this.state = 2172;
	            this.match(Java20Parser.RBRACK);
	            this.state = 2174;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	            if(la_===1) {
	                this.state = 2173;
	                this.pNNA();

	            }
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 2176;
	            this.methodName();
	            this.state = 2177;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2179;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2178;
	                this.argumentList();
	            }

	            this.state = 2181;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2183;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	            if(la_===1) {
	                this.state = 2182;
	                this.pNNA();

	            }
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 2185;
	            this.typeName();
	            this.state = 2186;
	            this.match(Java20Parser.DOT);
	            this.state = 2188;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2187;
	                this.typeArguments();
	            }

	            this.state = 2190;
	            this.identifier();
	            this.state = 2191;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2192;
	                this.argumentList();
	            }

	            this.state = 2195;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2197;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,246,this._ctx);
	            if(la_===1) {
	                this.state = 2196;
	                this.pNNA();

	            }
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 2199;
	            this.expressionName();
	            this.state = 2200;
	            this.match(Java20Parser.DOT);
	            this.state = 2202;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2201;
	                this.typeArguments();
	            }

	            this.state = 2204;
	            this.identifier();
	            this.state = 2205;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2207;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2206;
	                this.argumentList();
	            }

	            this.state = 2209;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2211;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,249,this._ctx);
	            if(la_===1) {
	                this.state = 2210;
	                this.pNNA();

	            }
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 2213;
	            this.arrayCreationExpression();
	            this.state = 2214;
	            this.match(Java20Parser.DOT);
	            this.state = 2216;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2215;
	                this.typeArguments();
	            }

	            this.state = 2218;
	            this.identifier();
	            this.state = 2219;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2221;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2220;
	                this.argumentList();
	            }

	            this.state = 2223;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2225;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	            if(la_===1) {
	                this.state = 2224;
	                this.pNNA();

	            }
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 2227;
	            this.match(Java20Parser.SUPER);
	            this.state = 2228;
	            this.match(Java20Parser.DOT);
	            this.state = 2230;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2229;
	                this.typeArguments();
	            }

	            this.state = 2232;
	            this.identifier();
	            this.state = 2233;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2235;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2234;
	                this.argumentList();
	            }

	            this.state = 2237;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2239;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	            if(la_===1) {
	                this.state = 2238;
	                this.pNNA();

	            }
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 2241;
	            this.typeName();
	            this.state = 2242;
	            this.match(Java20Parser.DOT);
	            this.state = 2243;
	            this.match(Java20Parser.SUPER);
	            this.state = 2244;
	            this.match(Java20Parser.DOT);
	            this.state = 2246;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2245;
	                this.typeArguments();
	            }

	            this.state = 2248;
	            this.identifier();
	            this.state = 2249;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2250;
	                this.argumentList();
	            }

	            this.state = 2253;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2255;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,258,this._ctx);
	            if(la_===1) {
	                this.state = 2254;
	                this.pNNA();

	            }
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 2257;
	            this.expressionName();
	            this.state = 2258;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2260;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2259;
	                this.typeArguments();
	            }

	            this.state = 2262;
	            this.identifier();
	            this.state = 2264;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	            if(la_===1) {
	                this.state = 2263;
	                this.pNNA();

	            }
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 2266;
	            this.arrayCreationExpression();
	            this.state = 2267;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2269;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2268;
	                this.typeArguments();
	            }

	            this.state = 2271;
	            this.identifier();
	            this.state = 2273;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	            if(la_===1) {
	                this.state = 2272;
	                this.pNNA();

	            }
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 2275;
	            this.referenceType();
	            this.state = 2276;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2278;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2277;
	                this.typeArguments();
	            }

	            this.state = 2280;
	            this.identifier();
	            this.state = 2282;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	            if(la_===1) {
	                this.state = 2281;
	                this.pNNA();

	            }
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 2284;
	            this.match(Java20Parser.SUPER);
	            this.state = 2285;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2286;
	                this.typeArguments();
	            }

	            this.state = 2289;
	            this.identifier();
	            this.state = 2291;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	            if(la_===1) {
	                this.state = 2290;
	                this.pNNA();

	            }
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 2293;
	            this.typeName();
	            this.state = 2294;
	            this.match(Java20Parser.DOT);
	            this.state = 2295;
	            this.match(Java20Parser.SUPER);
	            this.state = 2296;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2297;
	                this.typeArguments();
	            }

	            this.state = 2300;
	            this.identifier();
	            this.state = 2302;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	            if(la_===1) {
	                this.state = 2301;
	                this.pNNA();

	            }
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 2304;
	            this.classType();
	            this.state = 2305;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2306;
	                this.typeArguments();
	            }

	            this.state = 2309;
	            this.match(Java20Parser.NEW);
	            this.state = 2311;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	            if(la_===1) {
	                this.state = 2310;
	                this.pNNA();

	            }
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 2313;
	            this.arrayType();
	            this.state = 2314;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2315;
	            this.match(Java20Parser.NEW);
	            this.state = 2317;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	            if(la_===1) {
	                this.state = 2316;
	                this.pNNA();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pNNA() {
	    let localctx = new PNNAContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, Java20Parser.RULE_pNNA);
	    var _la = 0;
	    try {
	        this.state = 2358;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2321;
	            this.match(Java20Parser.DOT);
	            this.state = 2322;
	            this.unqualifiedClassInstanceCreationExpression();
	            this.state = 2324;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	            if(la_===1) {
	                this.state = 2323;
	                this.pNNA();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2326;
	            this.match(Java20Parser.DOT);
	            this.state = 2327;
	            this.identifier();
	            this.state = 2329;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	            if(la_===1) {
	                this.state = 2328;
	                this.pNNA();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2331;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2332;
	            this.expression();
	            this.state = 2333;
	            this.match(Java20Parser.RBRACK);
	            this.state = 2335;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	            if(la_===1) {
	                this.state = 2334;
	                this.pNNA();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2337;
	            this.match(Java20Parser.DOT);
	            this.state = 2339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2338;
	                this.typeArguments();
	            }

	            this.state = 2341;
	            this.identifier();
	            this.state = 2342;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2343;
	                this.argumentList();
	            }

	            this.state = 2346;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2348;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	            if(la_===1) {
	                this.state = 2347;
	                this.pNNA();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2350;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2352;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2351;
	                this.typeArguments();
	            }

	            this.state = 2354;
	            this.identifier();
	            this.state = 2356;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,280,this._ctx);
	            if(la_===1) {
	                this.state = 2355;
	                this.pNNA();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classLiteral() {
	    let localctx = new ClassLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, Java20Parser.RULE_classLiteral);
	    var _la = 0;
	    try {
	        this.state = 2395;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2360;
	            this.typeName();
	            this.state = 2365;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===80) {
	                this.state = 2361;
	                this.match(Java20Parser.LBRACK);
	                this.state = 2362;
	                this.match(Java20Parser.RBRACK);
	                this.state = 2367;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2368;
	            this.match(Java20Parser.DOT);
	            this.state = 2369;
	            this.match(Java20Parser.CLASS);
	            break;
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 54:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2371;
	            this.numericType();
	            this.state = 2376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===80) {
	                this.state = 2372;
	                this.match(Java20Parser.LBRACK);
	                this.state = 2373;
	                this.match(Java20Parser.RBRACK);
	                this.state = 2378;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2379;
	            this.match(Java20Parser.DOT);
	            this.state = 2380;
	            this.match(Java20Parser.CLASS);
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2382;
	            this.match(Java20Parser.BOOLEAN);
	            this.state = 2387;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===80) {
	                this.state = 2383;
	                this.match(Java20Parser.LBRACK);
	                this.state = 2384;
	                this.match(Java20Parser.RBRACK);
	                this.state = 2389;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2390;
	            this.match(Java20Parser.DOT);
	            this.state = 2391;
	            this.match(Java20Parser.CLASS);
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2392;
	            this.match(Java20Parser.VOID);
	            this.state = 2393;
	            this.match(Java20Parser.DOT);
	            this.state = 2394;
	            this.match(Java20Parser.CLASS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classInstanceCreationExpression() {
	    let localctx = new ClassInstanceCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, Java20Parser.RULE_classInstanceCreationExpression);
	    try {
	        this.state = 2406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2397;
	            this.unqualifiedClassInstanceCreationExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2398;
	            this.expressionName();
	            this.state = 2399;
	            this.match(Java20Parser.DOT);
	            this.state = 2400;
	            this.unqualifiedClassInstanceCreationExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2402;
	            this.primary();
	            this.state = 2403;
	            this.match(Java20Parser.DOT);
	            this.state = 2404;
	            this.unqualifiedClassInstanceCreationExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unqualifiedClassInstanceCreationExpression() {
	    let localctx = new UnqualifiedClassInstanceCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, Java20Parser.RULE_unqualifiedClassInstanceCreationExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2408;
	        this.match(Java20Parser.NEW);
	        this.state = 2410;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90) {
	            this.state = 2409;
	            this.typeArguments();
	        }

	        this.state = 2412;
	        this.classOrInterfaceTypeToInstantiate();
	        this.state = 2413;
	        this.match(Java20Parser.LPAREN);
	        this.state = 2415;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	            this.state = 2414;
	            this.argumentList();
	        }

	        this.state = 2417;
	        this.match(Java20Parser.RPAREN);
	        this.state = 2419;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	        if(la_===1) {
	            this.state = 2418;
	            this.classBody();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classOrInterfaceTypeToInstantiate() {
	    let localctx = new ClassOrInterfaceTypeToInstantiateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, Java20Parser.RULE_classOrInterfaceTypeToInstantiate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2424;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 2421;
	            this.annotation();
	            this.state = 2426;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2427;
	        this.identifier();
	        this.state = 2438;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===84) {
	            this.state = 2428;
	            this.match(Java20Parser.DOT);
	            this.state = 2432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===86) {
	                this.state = 2429;
	                this.annotation();
	                this.state = 2434;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2435;
	            this.identifier();
	            this.state = 2440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2442;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===90) {
	            this.state = 2441;
	            this.typeArgumentsOrDiamond();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeArgumentsOrDiamond() {
	    let localctx = new TypeArgumentsOrDiamondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, Java20Parser.RULE_typeArgumentsOrDiamond);
	    try {
	        this.state = 2446;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 90:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2444;
	            this.typeArguments();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2445;
	            this.match(Java20Parser.OACA);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreationExpression() {
	    let localctx = new ArrayCreationExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, Java20Parser.RULE_arrayCreationExpression);
	    try {
	        this.state = 2450;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,295,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2448;
	            this.arrayCreationExpressionWithoutInitializer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2449;
	            this.arrayCreationExpressionWithInitializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreationExpressionWithoutInitializer() {
	    let localctx = new ArrayCreationExpressionWithoutInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, Java20Parser.RULE_arrayCreationExpressionWithoutInitializer);
	    try {
	        this.state = 2464;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2452;
	            this.match(Java20Parser.NEW);
	            this.state = 2453;
	            this.primitiveType();
	            this.state = 2454;
	            this.dimExprs();
	            this.state = 2456;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	            if(la_===1) {
	                this.state = 2455;
	                this.dims();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2458;
	            this.match(Java20Parser.NEW);
	            this.state = 2459;
	            this.classType();
	            this.state = 2460;
	            this.dimExprs();
	            this.state = 2462;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	            if(la_===1) {
	                this.state = 2461;
	                this.dims();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayCreationExpressionWithInitializer() {
	    let localctx = new ArrayCreationExpressionWithInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, Java20Parser.RULE_arrayCreationExpressionWithInitializer);
	    try {
	        this.state = 2476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2466;
	            this.match(Java20Parser.NEW);
	            this.state = 2467;
	            this.primitiveType();
	            this.state = 2468;
	            this.dims();
	            this.state = 2469;
	            this.arrayInitializer();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2471;
	            this.match(Java20Parser.NEW);
	            this.state = 2472;
	            this.classOrInterfaceType();
	            this.state = 2473;
	            this.dims();
	            this.state = 2474;
	            this.arrayInitializer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimExprs() {
	    let localctx = new DimExprsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, Java20Parser.RULE_dimExprs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2478;
	        this.dimExpr();
	        this.state = 2482;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,300,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2479;
	                this.dimExpr(); 
	            }
	            this.state = 2484;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,300,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dimExpr() {
	    let localctx = new DimExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, Java20Parser.RULE_dimExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2488;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===86) {
	            this.state = 2485;
	            this.annotation();
	            this.state = 2490;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2491;
	        this.match(Java20Parser.LBRACK);
	        this.state = 2492;
	        this.expression();
	        this.state = 2493;
	        this.match(Java20Parser.RBRACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayAccess() {
	    let localctx = new ArrayAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, Java20Parser.RULE_arrayAccess);
	    try {
	        this.state = 2510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2495;
	            this.expressionName();
	            this.state = 2496;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2497;
	            this.expression();
	            this.state = 2498;
	            this.match(Java20Parser.RBRACK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2500;
	            this.primaryNoNewArray();
	            this.state = 2501;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2502;
	            this.expression();
	            this.state = 2503;
	            this.match(Java20Parser.RBRACK);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2505;
	            this.arrayCreationExpressionWithInitializer();
	            this.state = 2506;
	            this.match(Java20Parser.LBRACK);
	            this.state = 2507;
	            this.expression();
	            this.state = 2508;
	            this.match(Java20Parser.RBRACK);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldAccess() {
	    let localctx = new FieldAccessContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, Java20Parser.RULE_fieldAccess);
	    try {
	        this.state = 2525;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2512;
	            this.primary();
	            this.state = 2513;
	            this.match(Java20Parser.DOT);
	            this.state = 2514;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2516;
	            this.match(Java20Parser.SUPER);
	            this.state = 2517;
	            this.match(Java20Parser.DOT);
	            this.state = 2518;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2519;
	            this.typeName();
	            this.state = 2520;
	            this.match(Java20Parser.DOT);
	            this.state = 2521;
	            this.match(Java20Parser.SUPER);
	            this.state = 2522;
	            this.match(Java20Parser.DOT);
	            this.state = 2523;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodInvocation() {
	    let localctx = new MethodInvocationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, Java20Parser.RULE_methodInvocation);
	    var _la = 0;
	    try {
	        this.state = 2596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,315,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2527;
	            this.methodName();
	            this.state = 2528;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2529;
	                this.argumentList();
	            }

	            this.state = 2532;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2534;
	            this.typeName();
	            this.state = 2535;
	            this.match(Java20Parser.DOT);
	            this.state = 2537;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2536;
	                this.typeArguments();
	            }

	            this.state = 2539;
	            this.identifier();
	            this.state = 2540;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2541;
	                this.argumentList();
	            }

	            this.state = 2544;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2546;
	            this.expressionName();
	            this.state = 2547;
	            this.match(Java20Parser.DOT);
	            this.state = 2549;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2548;
	                this.typeArguments();
	            }

	            this.state = 2551;
	            this.identifier();
	            this.state = 2552;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2553;
	                this.argumentList();
	            }

	            this.state = 2556;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2558;
	            this.primary();
	            this.state = 2559;
	            this.match(Java20Parser.DOT);
	            this.state = 2561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2560;
	                this.typeArguments();
	            }

	            this.state = 2563;
	            this.identifier();
	            this.state = 2564;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2566;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2565;
	                this.argumentList();
	            }

	            this.state = 2568;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2570;
	            this.match(Java20Parser.SUPER);
	            this.state = 2571;
	            this.match(Java20Parser.DOT);
	            this.state = 2573;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2572;
	                this.typeArguments();
	            }

	            this.state = 2575;
	            this.identifier();
	            this.state = 2576;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2577;
	                this.argumentList();
	            }

	            this.state = 2580;
	            this.match(Java20Parser.RPAREN);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2582;
	            this.typeName();
	            this.state = 2583;
	            this.match(Java20Parser.DOT);
	            this.state = 2584;
	            this.match(Java20Parser.SUPER);
	            this.state = 2585;
	            this.match(Java20Parser.DOT);
	            this.state = 2587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2586;
	                this.typeArguments();
	            }

	            this.state = 2589;
	            this.identifier();
	            this.state = 2590;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2592;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 280103553) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 12714239) !== 0) || ((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 2097167) !== 0)) {
	                this.state = 2591;
	                this.argumentList();
	            }

	            this.state = 2594;
	            this.match(Java20Parser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argumentList() {
	    let localctx = new ArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, Java20Parser.RULE_argumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2598;
	        this.expression();
	        this.state = 2603;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===83) {
	            this.state = 2599;
	            this.match(Java20Parser.COMMA);
	            this.state = 2600;
	            this.expression();
	            this.state = 2605;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	methodReference() {
	    let localctx = new MethodReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, Java20Parser.RULE_methodReference);
	    var _la = 0;
	    try {
	        this.state = 2653;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,323,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2606;
	            this.expressionName();
	            this.state = 2607;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2608;
	                this.typeArguments();
	            }

	            this.state = 2611;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2613;
	            this.primary();
	            this.state = 2614;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2615;
	                this.typeArguments();
	            }

	            this.state = 2618;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2620;
	            this.referenceType();
	            this.state = 2621;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2623;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2622;
	                this.typeArguments();
	            }

	            this.state = 2625;
	            this.identifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2627;
	            this.match(Java20Parser.SUPER);
	            this.state = 2628;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2630;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2629;
	                this.typeArguments();
	            }

	            this.state = 2632;
	            this.identifier();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2633;
	            this.typeName();
	            this.state = 2634;
	            this.match(Java20Parser.DOT);
	            this.state = 2635;
	            this.match(Java20Parser.SUPER);
	            this.state = 2636;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2637;
	                this.typeArguments();
	            }

	            this.state = 2640;
	            this.identifier();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2642;
	            this.classType();
	            this.state = 2643;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2645;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 2644;
	                this.typeArguments();
	            }

	            this.state = 2647;
	            this.match(Java20Parser.NEW);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2649;
	            this.arrayType();
	            this.state = 2650;
	            this.match(Java20Parser.COLONCOLON);
	            this.state = 2651;
	            this.match(Java20Parser.NEW);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postfixExpression() {
	    let localctx = new PostfixExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, Java20Parser.RULE_postfixExpression);
	    try {
	        this.state = 2663;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2655;
	            this.primary();
	            this.state = 2657;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	            if(la_===1) {
	                this.state = 2656;
	                this.pfE();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2659;
	            this.expressionName();
	            this.state = 2661;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	            if(la_===1) {
	                this.state = 2660;
	                this.pfE();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pfE() {
	    let localctx = new PfEContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, Java20Parser.RULE_pfE);
	    try {
	        this.state = 2673;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 102:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2665;
	            this.match(Java20Parser.INC);
	            this.state = 2667;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	            if(la_===1) {
	                this.state = 2666;
	                this.pfE();

	            }
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2669;
	            this.match(Java20Parser.DEC);
	            this.state = 2671;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,328,this._ctx);
	            if(la_===1) {
	                this.state = 2670;
	                this.pfE();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postIncrementExpression() {
	    let localctx = new PostIncrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, Java20Parser.RULE_postIncrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2675;
	        this.postfixExpression();
	        this.state = 2676;
	        this.match(Java20Parser.INC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	postDecrementExpression() {
	    let localctx = new PostDecrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, Java20Parser.RULE_postDecrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2678;
	        this.postfixExpression();
	        this.state = 2679;
	        this.match(Java20Parser.DEC);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, Java20Parser.RULE_unaryExpression);
	    try {
	        this.state = 2688;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 102:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2681;
	            this.preIncrementExpression();
	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2682;
	            this.preDecrementExpression();
	            break;
	        case 104:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2683;
	            this.match(Java20Parser.ADD);
	            this.state = 2684;
	            this.unaryExpression();
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2685;
	            this.match(Java20Parser.SUB);
	            this.state = 2686;
	            this.unaryExpression();
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 48:
	        case 54:
	        case 57:
	        case 58:
	        case 60:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 86:
	        case 91:
	        case 92:
	        case 123:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2687;
	            this.unaryExpressionNotPlusMinus();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preIncrementExpression() {
	    let localctx = new PreIncrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, Java20Parser.RULE_preIncrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2690;
	        this.match(Java20Parser.INC);
	        this.state = 2691;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preDecrementExpression() {
	    let localctx = new PreDecrementExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, Java20Parser.RULE_preDecrementExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2693;
	        this.match(Java20Parser.DEC);
	        this.state = 2694;
	        this.unaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpressionNotPlusMinus() {
	    let localctx = new UnaryExpressionNotPlusMinusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, Java20Parser.RULE_unaryExpressionNotPlusMinus);
	    try {
	        this.state = 2703;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2696;
	            this.postfixExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2697;
	            this.match(Java20Parser.TILDE);
	            this.state = 2698;
	            this.unaryExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2699;
	            this.match(Java20Parser.BANG);
	            this.state = 2700;
	            this.unaryExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2701;
	            this.castExpression();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2702;
	            this.switchExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castExpression() {
	    let localctx = new CastExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, Java20Parser.RULE_castExpression);
	    var _la = 0;
	    try {
	        this.state = 2732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2705;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2706;
	            this.primitiveType();
	            this.state = 2707;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2708;
	            this.unaryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2710;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2711;
	            this.referenceType();
	            this.state = 2715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===108) {
	                this.state = 2712;
	                this.additionalBound();
	                this.state = 2717;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2718;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2719;
	            this.unaryExpressionNotPlusMinus();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2721;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2722;
	            this.referenceType();
	            this.state = 2726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===108) {
	                this.state = 2723;
	                this.additionalBound();
	                this.state = 2728;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2729;
	            this.match(Java20Parser.RPAREN);
	            this.state = 2730;
	            this.lambdaExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	multiplicativeExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 452;
	    this.enterRecursionRule(localctx, 452, Java20Parser.RULE_multiplicativeExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2735;
	        this.unaryExpression();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2748;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,336,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2746;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_multiplicativeExpression);
	                    this.state = 2737;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2738;
	                    this.match(Java20Parser.MUL);
	                    this.state = 2739;
	                    this.unaryExpression();
	                    break;

	                case 2:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_multiplicativeExpression);
	                    this.state = 2740;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2741;
	                    this.match(Java20Parser.DIV);
	                    this.state = 2742;
	                    this.unaryExpression();
	                    break;

	                case 3:
	                    localctx = new MultiplicativeExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_multiplicativeExpression);
	                    this.state = 2743;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2744;
	                    this.match(Java20Parser.MOD);
	                    this.state = 2745;
	                    this.unaryExpression();
	                    break;

	                } 
	            }
	            this.state = 2750;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,336,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	additiveExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AdditiveExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 454;
	    this.enterRecursionRule(localctx, 454, Java20Parser.RULE_additiveExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2752;
	        this.multiplicativeExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2762;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,338,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2760;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_additiveExpression);
	                    this.state = 2754;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2755;
	                    this.match(Java20Parser.ADD);
	                    this.state = 2756;
	                    this.multiplicativeExpression(0);
	                    break;

	                case 2:
	                    localctx = new AdditiveExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_additiveExpression);
	                    this.state = 2757;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2758;
	                    this.match(Java20Parser.SUB);
	                    this.state = 2759;
	                    this.multiplicativeExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2764;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,338,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	shiftExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ShiftExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 456;
	    this.enterRecursionRule(localctx, 456, Java20Parser.RULE_shiftExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2766;
	        this.additiveExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2783;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,340,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2781;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_shiftExpression);
	                    this.state = 2768;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2769;
	                    this.match(Java20Parser.LT);
	                    this.state = 2770;
	                    this.match(Java20Parser.LT);
	                    this.state = 2771;
	                    this.additiveExpression(0);
	                    break;

	                case 2:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_shiftExpression);
	                    this.state = 2772;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2773;
	                    this.match(Java20Parser.GT);
	                    this.state = 2774;
	                    this.match(Java20Parser.GT);
	                    this.state = 2775;
	                    this.additiveExpression(0);
	                    break;

	                case 3:
	                    localctx = new ShiftExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_shiftExpression);
	                    this.state = 2776;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2777;
	                    this.match(Java20Parser.GT);
	                    this.state = 2778;
	                    this.match(Java20Parser.GT);
	                    this.state = 2779;
	                    this.match(Java20Parser.GT);
	                    this.state = 2780;
	                    this.additiveExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2785;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,340,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	relationalExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new RelationalExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 458;
	    this.enterRecursionRule(localctx, 458, Java20Parser.RULE_relationalExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2787;
	        this.shiftExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2809;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,343,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2807;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2789;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 2790;
	                    this.match(Java20Parser.LT);
	                    this.state = 2791;
	                    this.shiftExpression(0);
	                    break;

	                case 2:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2792;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 2793;
	                    this.match(Java20Parser.GT);
	                    this.state = 2794;
	                    this.shiftExpression(0);
	                    break;

	                case 3:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2795;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 2796;
	                    this.match(Java20Parser.LE);
	                    this.state = 2797;
	                    this.shiftExpression(0);
	                    break;

	                case 4:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2798;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2799;
	                    this.match(Java20Parser.GE);
	                    this.state = 2800;
	                    this.shiftExpression(0);
	                    break;

	                case 5:
	                    localctx = new RelationalExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_relationalExpression);
	                    this.state = 2801;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2802;
	                    this.match(Java20Parser.INSTANCEOF);
	                    this.state = 2805;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 2803;
	                        this.referenceType();
	                        break;

	                    case 2:
	                        this.state = 2804;
	                        this.pattern();
	                        break;

	                    }
	                    break;

	                } 
	            }
	            this.state = 2811;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,343,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	equalityExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new EqualityExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 460;
	    this.enterRecursionRule(localctx, 460, Java20Parser.RULE_equalityExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2813;
	        this.relationalExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2823;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,345,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 2821;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_equalityExpression);
	                    this.state = 2815;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 2816;
	                    this.match(Java20Parser.EQUAL);
	                    this.state = 2817;
	                    this.relationalExpression(0);
	                    break;

	                case 2:
	                    localctx = new EqualityExpressionContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_equalityExpression);
	                    this.state = 2818;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 2819;
	                    this.match(Java20Parser.NOTEQUAL);
	                    this.state = 2820;
	                    this.relationalExpression(0);
	                    break;

	                } 
	            }
	            this.state = 2825;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,345,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	andExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new AndExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 462;
	    this.enterRecursionRule(localctx, 462, Java20Parser.RULE_andExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2827;
	        this.equalityExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2834;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,346,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new AndExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_andExpression);
	                this.state = 2829;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2830;
	                this.match(Java20Parser.BITAND);
	                this.state = 2831;
	                this.equalityExpression(0); 
	            }
	            this.state = 2836;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,346,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	exclusiveOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExclusiveOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 464;
	    this.enterRecursionRule(localctx, 464, Java20Parser.RULE_exclusiveOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2838;
	        this.andExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2845;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,347,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ExclusiveOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_exclusiveOrExpression);
	                this.state = 2840;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2841;
	                this.match(Java20Parser.CARET);
	                this.state = 2842;
	                this.andExpression(0); 
	            }
	            this.state = 2847;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,347,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	inclusiveOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new InclusiveOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 466;
	    this.enterRecursionRule(localctx, 466, Java20Parser.RULE_inclusiveOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2849;
	        this.exclusiveOrExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2856;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,348,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new InclusiveOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_inclusiveOrExpression);
	                this.state = 2851;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2852;
	                this.match(Java20Parser.BITOR);
	                this.state = 2853;
	                this.exclusiveOrExpression(0); 
	            }
	            this.state = 2858;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,348,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	conditionalAndExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 468;
	    this.enterRecursionRule(localctx, 468, Java20Parser.RULE_conditionalAndExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2860;
	        this.inclusiveOrExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2867;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,349,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ConditionalAndExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_conditionalAndExpression);
	                this.state = 2862;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2863;
	                this.match(Java20Parser.AND);
	                this.state = 2864;
	                this.inclusiveOrExpression(0); 
	            }
	            this.state = 2869;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,349,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	conditionalOrExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 470;
	    this.enterRecursionRule(localctx, 470, Java20Parser.RULE_conditionalOrExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2871;
	        this.conditionalAndExpression(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 2878;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,350,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new ConditionalOrExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, Java20Parser.RULE_conditionalOrExpression);
	                this.state = 2873;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 2874;
	                this.match(Java20Parser.OR);
	                this.state = 2875;
	                this.conditionalAndExpression(0); 
	            }
	            this.state = 2880;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,350,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	conditionalExpression() {
	    let localctx = new ConditionalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, Java20Parser.RULE_conditionalExpression);
	    try {
	        this.state = 2894;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,351,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2881;
	            this.conditionalOrExpression(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2882;
	            this.conditionalOrExpression(0);
	            this.state = 2883;
	            this.match(Java20Parser.QUESTION);
	            this.state = 2884;
	            this.expression();
	            this.state = 2885;
	            this.match(Java20Parser.COLON);
	            this.state = 2886;
	            this.conditionalExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2888;
	            this.conditionalOrExpression(0);
	            this.state = 2889;
	            this.match(Java20Parser.QUESTION);
	            this.state = 2890;
	            this.expression();
	            this.state = 2891;
	            this.match(Java20Parser.COLON);
	            this.state = 2892;
	            this.lambdaExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpression() {
	    let localctx = new AssignmentExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, Java20Parser.RULE_assignmentExpression);
	    try {
	        this.state = 2898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2896;
	            this.conditionalExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2897;
	            this.assignment();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignment() {
	    let localctx = new AssignmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, Java20Parser.RULE_assignment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2900;
	        this.leftHandSide();
	        this.state = 2901;
	        this.assignmentOperator();
	        this.state = 2902;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leftHandSide() {
	    let localctx = new LeftHandSideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, Java20Parser.RULE_leftHandSide);
	    try {
	        this.state = 2907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2904;
	            this.expressionName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2905;
	            this.fieldAccess();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2906;
	            this.arrayAccess();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentOperator() {
	    let localctx = new AssignmentOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, Java20Parser.RULE_assignmentOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2909;
	        _la = this._input.LA(1);
	        if(!(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 4278190081) !== 0) || ((((_la - 120)) & ~0x1f) === 0 && ((1 << (_la - 120)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaExpression() {
	    let localctx = new LambdaExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, Java20Parser.RULE_lambdaExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2911;
	        this.lambdaParameters();
	        this.state = 2912;
	        this.match(Java20Parser.ARROW);
	        this.state = 2913;
	        this.lambdaBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameters() {
	    let localctx = new LambdaParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, Java20Parser.RULE_lambdaParameters);
	    var _la = 0;
	    try {
	        this.state = 2921;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 76:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2915;
	            this.match(Java20Parser.LPAREN);
	            this.state = 2917;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 2186543086) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 526853) !== 0) || _la===86 || _la===123) {
	                this.state = 2916;
	                this.lambdaParameterList();
	            }

	            this.state = 2919;
	            this.match(Java20Parser.RPAREN);
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 123:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2920;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameterList() {
	    let localctx = new LambdaParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, Java20Parser.RULE_lambdaParameterList);
	    var _la = 0;
	    try {
	        this.state = 2939;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2923;
	            this.lambdaParameter();
	            this.state = 2928;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===83) {
	                this.state = 2924;
	                this.match(Java20Parser.COMMA);
	                this.state = 2925;
	                this.lambdaParameter();
	                this.state = 2930;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2931;
	            this.identifier();
	            this.state = 2936;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===83) {
	                this.state = 2932;
	                this.match(Java20Parser.COMMA);
	                this.state = 2933;
	                this.identifier();
	                this.state = 2938;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameter() {
	    let localctx = new LambdaParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, Java20Parser.RULE_lambdaParameter);
	    var _la = 0;
	    try {
	        this.state = 2951;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,360,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2944;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===35 || _la===86) {
	                this.state = 2941;
	                this.variableModifier();
	                this.state = 2946;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 2947;
	            this.lambdaParameterType();
	            this.state = 2948;
	            this.variableDeclaratorId();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2950;
	            this.variableArityParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaParameterType() {
	    let localctx = new LambdaParameterTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, Java20Parser.RULE_lambdaParameterType);
	    try {
	        this.state = 2955;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2953;
	            this.unannType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2954;
	            this.match(Java20Parser.VAR);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdaBody() {
	    let localctx = new LambdaBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, Java20Parser.RULE_lambdaBody);
	    try {
	        this.state = 2959;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 1:
	        case 2:
	        case 3:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 20:
	        case 22:
	        case 25:
	        case 31:
	        case 37:
	        case 44:
	        case 46:
	        case 48:
	        case 54:
	        case 57:
	        case 58:
	        case 60:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 86:
	        case 91:
	        case 92:
	        case 102:
	        case 103:
	        case 104:
	        case 105:
	        case 123:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2957;
	            this.expression();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2958;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	switchExpression() {
	    let localctx = new SwitchExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, Java20Parser.RULE_switchExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2961;
	        this.match(Java20Parser.SWITCH);
	        this.state = 2962;
	        this.match(Java20Parser.LPAREN);
	        this.state = 2963;
	        this.expression();
	        this.state = 2964;
	        this.match(Java20Parser.RPAREN);
	        this.state = 2965;
	        this.switchBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constantExpression() {
	    let localctx = new ConstantExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, Java20Parser.RULE_constantExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2967;
	        this.expression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Java20Parser.EOF = antlr4.Token.EOF;
Java20Parser.EXPORTS = 1;
Java20Parser.MODULE = 2;
Java20Parser.NONSEALED = 3;
Java20Parser.OACA = 4;
Java20Parser.OPEN = 5;
Java20Parser.OPENS = 6;
Java20Parser.PERMITS = 7;
Java20Parser.PROVIDES = 8;
Java20Parser.RECORD = 9;
Java20Parser.REQUIRES = 10;
Java20Parser.SEALED = 11;
Java20Parser.TO = 12;
Java20Parser.TRANSITIVE = 13;
Java20Parser.USES = 14;
Java20Parser.VAR = 15;
Java20Parser.WITH = 16;
Java20Parser.YIELD = 17;
Java20Parser.ABSTRACT = 18;
Java20Parser.ASSERT = 19;
Java20Parser.BOOLEAN = 20;
Java20Parser.BREAK = 21;
Java20Parser.BYTE = 22;
Java20Parser.CASE = 23;
Java20Parser.CATCH = 24;
Java20Parser.CHAR = 25;
Java20Parser.CLASS = 26;
Java20Parser.CONST = 27;
Java20Parser.CONTINUE = 28;
Java20Parser.DEFAULT = 29;
Java20Parser.DO = 30;
Java20Parser.DOUBLE = 31;
Java20Parser.ELSE = 32;
Java20Parser.ENUM = 33;
Java20Parser.EXTENDS = 34;
Java20Parser.FINAL = 35;
Java20Parser.FINALLY = 36;
Java20Parser.FLOAT = 37;
Java20Parser.FOR = 38;
Java20Parser.IF = 39;
Java20Parser.GOTO = 40;
Java20Parser.IMPLEMENTS = 41;
Java20Parser.IMPORT = 42;
Java20Parser.INSTANCEOF = 43;
Java20Parser.INT = 44;
Java20Parser.INTERFACE = 45;
Java20Parser.LONG = 46;
Java20Parser.NATIVE = 47;
Java20Parser.NEW = 48;
Java20Parser.PACKAGE = 49;
Java20Parser.PRIVATE = 50;
Java20Parser.PROTECTED = 51;
Java20Parser.PUBLIC = 52;
Java20Parser.RETURN = 53;
Java20Parser.SHORT = 54;
Java20Parser.STATIC = 55;
Java20Parser.STRICTFP = 56;
Java20Parser.SUPER = 57;
Java20Parser.SWITCH = 58;
Java20Parser.SYNCHRONIZED = 59;
Java20Parser.THIS = 60;
Java20Parser.THROW = 61;
Java20Parser.THROWS = 62;
Java20Parser.TRANSIENT = 63;
Java20Parser.TRY = 64;
Java20Parser.VOID = 65;
Java20Parser.VOLATILE = 66;
Java20Parser.WHILE = 67;
Java20Parser.UNDER_SCORE = 68;
Java20Parser.IntegerLiteral = 69;
Java20Parser.FloatingPointLiteral = 70;
Java20Parser.BooleanLiteral = 71;
Java20Parser.CharacterLiteral = 72;
Java20Parser.StringLiteral = 73;
Java20Parser.TextBlock = 74;
Java20Parser.NullLiteral = 75;
Java20Parser.LPAREN = 76;
Java20Parser.RPAREN = 77;
Java20Parser.LBRACE = 78;
Java20Parser.RBRACE = 79;
Java20Parser.LBRACK = 80;
Java20Parser.RBRACK = 81;
Java20Parser.SEMI = 82;
Java20Parser.COMMA = 83;
Java20Parser.DOT = 84;
Java20Parser.ELLIPSIS = 85;
Java20Parser.AT = 86;
Java20Parser.COLONCOLON = 87;
Java20Parser.ASSIGN = 88;
Java20Parser.GT = 89;
Java20Parser.LT = 90;
Java20Parser.BANG = 91;
Java20Parser.TILDE = 92;
Java20Parser.QUESTION = 93;
Java20Parser.COLON = 94;
Java20Parser.ARROW = 95;
Java20Parser.EQUAL = 96;
Java20Parser.LE = 97;
Java20Parser.GE = 98;
Java20Parser.NOTEQUAL = 99;
Java20Parser.AND = 100;
Java20Parser.OR = 101;
Java20Parser.INC = 102;
Java20Parser.DEC = 103;
Java20Parser.ADD = 104;
Java20Parser.SUB = 105;
Java20Parser.MUL = 106;
Java20Parser.DIV = 107;
Java20Parser.BITAND = 108;
Java20Parser.BITOR = 109;
Java20Parser.CARET = 110;
Java20Parser.MOD = 111;
Java20Parser.ADD_ASSIGN = 112;
Java20Parser.SUB_ASSIGN = 113;
Java20Parser.MUL_ASSIGN = 114;
Java20Parser.DIV_ASSIGN = 115;
Java20Parser.AND_ASSIGN = 116;
Java20Parser.OR_ASSIGN = 117;
Java20Parser.XOR_ASSIGN = 118;
Java20Parser.MOD_ASSIGN = 119;
Java20Parser.LSHIFT_ASSIGN = 120;
Java20Parser.RSHIFT_ASSIGN = 121;
Java20Parser.URSHIFT_ASSIGN = 122;
Java20Parser.Identifier = 123;
Java20Parser.WS = 124;
Java20Parser.COMMENT = 125;
Java20Parser.LINE_COMMENT = 126;

Java20Parser.RULE_start_ = 0;
Java20Parser.RULE_identifier = 1;
Java20Parser.RULE_typeIdentifier = 2;
Java20Parser.RULE_unqualifiedMethodIdentifier = 3;
Java20Parser.RULE_contextualKeyword = 4;
Java20Parser.RULE_contextualKeywordMinusForTypeIdentifier = 5;
Java20Parser.RULE_contextualKeywordMinusForUnqualifiedMethodIdentifier = 6;
Java20Parser.RULE_literal = 7;
Java20Parser.RULE_primitiveType = 8;
Java20Parser.RULE_numericType = 9;
Java20Parser.RULE_integralType = 10;
Java20Parser.RULE_floatingPointType = 11;
Java20Parser.RULE_referenceType = 12;
Java20Parser.RULE_coit = 13;
Java20Parser.RULE_classOrInterfaceType = 14;
Java20Parser.RULE_classType = 15;
Java20Parser.RULE_interfaceType = 16;
Java20Parser.RULE_typeVariable = 17;
Java20Parser.RULE_arrayType = 18;
Java20Parser.RULE_dims = 19;
Java20Parser.RULE_typeParameter = 20;
Java20Parser.RULE_typeParameterModifier = 21;
Java20Parser.RULE_typeBound = 22;
Java20Parser.RULE_additionalBound = 23;
Java20Parser.RULE_typeArguments = 24;
Java20Parser.RULE_typeArgumentList = 25;
Java20Parser.RULE_typeArgument = 26;
Java20Parser.RULE_wildcard = 27;
Java20Parser.RULE_wildcardBounds = 28;
Java20Parser.RULE_moduleName = 29;
Java20Parser.RULE_packageName = 30;
Java20Parser.RULE_typeName = 31;
Java20Parser.RULE_packageOrTypeName = 32;
Java20Parser.RULE_expressionName = 33;
Java20Parser.RULE_methodName = 34;
Java20Parser.RULE_ambiguousName = 35;
Java20Parser.RULE_compilationUnit = 36;
Java20Parser.RULE_ordinaryCompilationUnit = 37;
Java20Parser.RULE_modularCompilationUnit = 38;
Java20Parser.RULE_packageDeclaration = 39;
Java20Parser.RULE_packageModifier = 40;
Java20Parser.RULE_importDeclaration = 41;
Java20Parser.RULE_singleTypeImportDeclaration = 42;
Java20Parser.RULE_typeImportOnDemandDeclaration = 43;
Java20Parser.RULE_singleStaticImportDeclaration = 44;
Java20Parser.RULE_staticImportOnDemandDeclaration = 45;
Java20Parser.RULE_topLevelClassOrInterfaceDeclaration = 46;
Java20Parser.RULE_moduleDeclaration = 47;
Java20Parser.RULE_moduleDirective = 48;
Java20Parser.RULE_requiresModifier = 49;
Java20Parser.RULE_classDeclaration = 50;
Java20Parser.RULE_normalClassDeclaration = 51;
Java20Parser.RULE_classModifier = 52;
Java20Parser.RULE_typeParameters = 53;
Java20Parser.RULE_typeParameterList = 54;
Java20Parser.RULE_classExtends = 55;
Java20Parser.RULE_classImplements = 56;
Java20Parser.RULE_interfaceTypeList = 57;
Java20Parser.RULE_classPermits = 58;
Java20Parser.RULE_classBody = 59;
Java20Parser.RULE_classBodyDeclaration = 60;
Java20Parser.RULE_classMemberDeclaration = 61;
Java20Parser.RULE_fieldDeclaration = 62;
Java20Parser.RULE_fieldModifier = 63;
Java20Parser.RULE_variableDeclaratorList = 64;
Java20Parser.RULE_variableDeclarator = 65;
Java20Parser.RULE_variableDeclaratorId = 66;
Java20Parser.RULE_variableInitializer = 67;
Java20Parser.RULE_unannType = 68;
Java20Parser.RULE_unannPrimitiveType = 69;
Java20Parser.RULE_unannReferenceType = 70;
Java20Parser.RULE_unannClassOrInterfaceType = 71;
Java20Parser.RULE_uCOIT = 72;
Java20Parser.RULE_unannClassType = 73;
Java20Parser.RULE_unannInterfaceType = 74;
Java20Parser.RULE_unannTypeVariable = 75;
Java20Parser.RULE_unannArrayType = 76;
Java20Parser.RULE_methodDeclaration = 77;
Java20Parser.RULE_methodModifier = 78;
Java20Parser.RULE_methodHeader = 79;
Java20Parser.RULE_result = 80;
Java20Parser.RULE_methodDeclarator = 81;
Java20Parser.RULE_receiverParameter = 82;
Java20Parser.RULE_formalParameterList = 83;
Java20Parser.RULE_formalParameter = 84;
Java20Parser.RULE_variableArityParameter = 85;
Java20Parser.RULE_variableModifier = 86;
Java20Parser.RULE_throwsT = 87;
Java20Parser.RULE_exceptionTypeList = 88;
Java20Parser.RULE_exceptionType = 89;
Java20Parser.RULE_methodBody = 90;
Java20Parser.RULE_instanceInitializer = 91;
Java20Parser.RULE_staticInitializer = 92;
Java20Parser.RULE_constructorDeclaration = 93;
Java20Parser.RULE_constructorModifier = 94;
Java20Parser.RULE_constructorDeclarator = 95;
Java20Parser.RULE_simpleTypeName = 96;
Java20Parser.RULE_constructorBody = 97;
Java20Parser.RULE_explicitConstructorInvocation = 98;
Java20Parser.RULE_enumDeclaration = 99;
Java20Parser.RULE_enumBody = 100;
Java20Parser.RULE_enumConstantList = 101;
Java20Parser.RULE_enumConstant = 102;
Java20Parser.RULE_enumConstantModifier = 103;
Java20Parser.RULE_enumBodyDeclarations = 104;
Java20Parser.RULE_recordDeclaration = 105;
Java20Parser.RULE_recordHeader = 106;
Java20Parser.RULE_recordComponentList = 107;
Java20Parser.RULE_recordComponent = 108;
Java20Parser.RULE_variableArityRecordComponent = 109;
Java20Parser.RULE_recordComponentModifier = 110;
Java20Parser.RULE_recordBody = 111;
Java20Parser.RULE_recordBodyDeclaration = 112;
Java20Parser.RULE_compactConstructorDeclaration = 113;
Java20Parser.RULE_interfaceDeclaration = 114;
Java20Parser.RULE_normalInterfaceDeclaration = 115;
Java20Parser.RULE_interfaceModifier = 116;
Java20Parser.RULE_interfaceExtends = 117;
Java20Parser.RULE_interfacePermits = 118;
Java20Parser.RULE_interfaceBody = 119;
Java20Parser.RULE_interfaceMemberDeclaration = 120;
Java20Parser.RULE_constantDeclaration = 121;
Java20Parser.RULE_constantModifier = 122;
Java20Parser.RULE_interfaceMethodDeclaration = 123;
Java20Parser.RULE_interfaceMethodModifier = 124;
Java20Parser.RULE_annotationInterfaceDeclaration = 125;
Java20Parser.RULE_annotationInterfaceBody = 126;
Java20Parser.RULE_annotationInterfaceMemberDeclaration = 127;
Java20Parser.RULE_annotationInterfaceElementDeclaration = 128;
Java20Parser.RULE_annotationInterfaceElementModifier = 129;
Java20Parser.RULE_defaultValue = 130;
Java20Parser.RULE_annotation = 131;
Java20Parser.RULE_normalAnnotation = 132;
Java20Parser.RULE_elementValuePairList = 133;
Java20Parser.RULE_elementValuePair = 134;
Java20Parser.RULE_elementValue = 135;
Java20Parser.RULE_elementValueArrayInitializer = 136;
Java20Parser.RULE_elementValueList = 137;
Java20Parser.RULE_markerAnnotation = 138;
Java20Parser.RULE_singleElementAnnotation = 139;
Java20Parser.RULE_arrayInitializer = 140;
Java20Parser.RULE_variableInitializerList = 141;
Java20Parser.RULE_block = 142;
Java20Parser.RULE_blockStatements = 143;
Java20Parser.RULE_blockStatement = 144;
Java20Parser.RULE_localClassOrInterfaceDeclaration = 145;
Java20Parser.RULE_localVariableDeclaration = 146;
Java20Parser.RULE_localVariableType = 147;
Java20Parser.RULE_localVariableDeclarationStatement = 148;
Java20Parser.RULE_statement = 149;
Java20Parser.RULE_statementNoShortIf = 150;
Java20Parser.RULE_statementWithoutTrailingSubstatement = 151;
Java20Parser.RULE_emptyStatement_ = 152;
Java20Parser.RULE_labeledStatement = 153;
Java20Parser.RULE_labeledStatementNoShortIf = 154;
Java20Parser.RULE_expressionStatement = 155;
Java20Parser.RULE_statementExpression = 156;
Java20Parser.RULE_ifThenStatement = 157;
Java20Parser.RULE_ifThenElseStatement = 158;
Java20Parser.RULE_ifThenElseStatementNoShortIf = 159;
Java20Parser.RULE_assertStatement = 160;
Java20Parser.RULE_switchStatement = 161;
Java20Parser.RULE_switchBlock = 162;
Java20Parser.RULE_switchRule = 163;
Java20Parser.RULE_switchBlockStatementGroup = 164;
Java20Parser.RULE_switchLabel = 165;
Java20Parser.RULE_caseConstant = 166;
Java20Parser.RULE_whileStatement = 167;
Java20Parser.RULE_whileStatementNoShortIf = 168;
Java20Parser.RULE_doStatement = 169;
Java20Parser.RULE_forStatement = 170;
Java20Parser.RULE_forStatementNoShortIf = 171;
Java20Parser.RULE_basicForStatement = 172;
Java20Parser.RULE_basicForStatementNoShortIf = 173;
Java20Parser.RULE_forInit = 174;
Java20Parser.RULE_forUpdate = 175;
Java20Parser.RULE_statementExpressionList = 176;
Java20Parser.RULE_enhancedForStatement = 177;
Java20Parser.RULE_enhancedForStatementNoShortIf = 178;
Java20Parser.RULE_breakStatement = 179;
Java20Parser.RULE_continueStatement = 180;
Java20Parser.RULE_returnStatement = 181;
Java20Parser.RULE_throwStatement = 182;
Java20Parser.RULE_synchronizedStatement = 183;
Java20Parser.RULE_tryStatement = 184;
Java20Parser.RULE_catches = 185;
Java20Parser.RULE_catchClause = 186;
Java20Parser.RULE_catchFormalParameter = 187;
Java20Parser.RULE_catchType = 188;
Java20Parser.RULE_finallyBlock = 189;
Java20Parser.RULE_tryWithResourcesStatement = 190;
Java20Parser.RULE_resourceSpecification = 191;
Java20Parser.RULE_resourceList = 192;
Java20Parser.RULE_resource = 193;
Java20Parser.RULE_variableAccess = 194;
Java20Parser.RULE_yieldStatement = 195;
Java20Parser.RULE_pattern = 196;
Java20Parser.RULE_typePattern = 197;
Java20Parser.RULE_expression = 198;
Java20Parser.RULE_primary = 199;
Java20Parser.RULE_primaryNoNewArray = 200;
Java20Parser.RULE_pNNA = 201;
Java20Parser.RULE_classLiteral = 202;
Java20Parser.RULE_classInstanceCreationExpression = 203;
Java20Parser.RULE_unqualifiedClassInstanceCreationExpression = 204;
Java20Parser.RULE_classOrInterfaceTypeToInstantiate = 205;
Java20Parser.RULE_typeArgumentsOrDiamond = 206;
Java20Parser.RULE_arrayCreationExpression = 207;
Java20Parser.RULE_arrayCreationExpressionWithoutInitializer = 208;
Java20Parser.RULE_arrayCreationExpressionWithInitializer = 209;
Java20Parser.RULE_dimExprs = 210;
Java20Parser.RULE_dimExpr = 211;
Java20Parser.RULE_arrayAccess = 212;
Java20Parser.RULE_fieldAccess = 213;
Java20Parser.RULE_methodInvocation = 214;
Java20Parser.RULE_argumentList = 215;
Java20Parser.RULE_methodReference = 216;
Java20Parser.RULE_postfixExpression = 217;
Java20Parser.RULE_pfE = 218;
Java20Parser.RULE_postIncrementExpression = 219;
Java20Parser.RULE_postDecrementExpression = 220;
Java20Parser.RULE_unaryExpression = 221;
Java20Parser.RULE_preIncrementExpression = 222;
Java20Parser.RULE_preDecrementExpression = 223;
Java20Parser.RULE_unaryExpressionNotPlusMinus = 224;
Java20Parser.RULE_castExpression = 225;
Java20Parser.RULE_multiplicativeExpression = 226;
Java20Parser.RULE_additiveExpression = 227;
Java20Parser.RULE_shiftExpression = 228;
Java20Parser.RULE_relationalExpression = 229;
Java20Parser.RULE_equalityExpression = 230;
Java20Parser.RULE_andExpression = 231;
Java20Parser.RULE_exclusiveOrExpression = 232;
Java20Parser.RULE_inclusiveOrExpression = 233;
Java20Parser.RULE_conditionalAndExpression = 234;
Java20Parser.RULE_conditionalOrExpression = 235;
Java20Parser.RULE_conditionalExpression = 236;
Java20Parser.RULE_assignmentExpression = 237;
Java20Parser.RULE_assignment = 238;
Java20Parser.RULE_leftHandSide = 239;
Java20Parser.RULE_assignmentOperator = 240;
Java20Parser.RULE_lambdaExpression = 241;
Java20Parser.RULE_lambdaParameters = 242;
Java20Parser.RULE_lambdaParameterList = 243;
Java20Parser.RULE_lambdaParameter = 244;
Java20Parser.RULE_lambdaParameterType = 245;
Java20Parser.RULE_lambdaBody = 246;
Java20Parser.RULE_switchExpression = 247;
Java20Parser.RULE_constantExpression = 248;

class Start_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_start_;
    }

	compilationUnit() {
	    return this.getTypedRuleContext(CompilationUnitContext,0);
	};

	EOF() {
	    return this.getToken(Java20Parser.EOF, 0);
	};


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_identifier;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	contextualKeyword() {
	    return this.getTypedRuleContext(ContextualKeywordContext,0);
	};


}



class TypeIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeIdentifier;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	contextualKeywordMinusForTypeIdentifier() {
	    return this.getTypedRuleContext(ContextualKeywordMinusForTypeIdentifierContext,0);
	};


}



class UnqualifiedMethodIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unqualifiedMethodIdentifier;
    }

	Identifier() {
	    return this.getToken(Java20Parser.Identifier, 0);
	};

	contextualKeywordMinusForUnqualifiedMethodIdentifier() {
	    return this.getTypedRuleContext(ContextualKeywordMinusForUnqualifiedMethodIdentifierContext,0);
	};


}



class ContextualKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_contextualKeyword;
    }

	EXPORTS() {
	    return this.getToken(Java20Parser.EXPORTS, 0);
	};

	MODULE() {
	    return this.getToken(Java20Parser.MODULE, 0);
	};

	NONSEALED() {
	    return this.getToken(Java20Parser.NONSEALED, 0);
	};

	OPEN() {
	    return this.getToken(Java20Parser.OPEN, 0);
	};

	OPENS() {
	    return this.getToken(Java20Parser.OPENS, 0);
	};

	PERMITS() {
	    return this.getToken(Java20Parser.PERMITS, 0);
	};

	PROVIDES() {
	    return this.getToken(Java20Parser.PROVIDES, 0);
	};

	RECORD() {
	    return this.getToken(Java20Parser.RECORD, 0);
	};

	REQUIRES() {
	    return this.getToken(Java20Parser.REQUIRES, 0);
	};

	SEALED() {
	    return this.getToken(Java20Parser.SEALED, 0);
	};

	TO() {
	    return this.getToken(Java20Parser.TO, 0);
	};

	TRANSITIVE() {
	    return this.getToken(Java20Parser.TRANSITIVE, 0);
	};

	USES() {
	    return this.getToken(Java20Parser.USES, 0);
	};

	VAR() {
	    return this.getToken(Java20Parser.VAR, 0);
	};

	WITH() {
	    return this.getToken(Java20Parser.WITH, 0);
	};

	YIELD() {
	    return this.getToken(Java20Parser.YIELD, 0);
	};


}



class ContextualKeywordMinusForTypeIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_contextualKeywordMinusForTypeIdentifier;
    }

	EXPORTS() {
	    return this.getToken(Java20Parser.EXPORTS, 0);
	};

	MODULE() {
	    return this.getToken(Java20Parser.MODULE, 0);
	};

	NONSEALED() {
	    return this.getToken(Java20Parser.NONSEALED, 0);
	};

	OPEN() {
	    return this.getToken(Java20Parser.OPEN, 0);
	};

	OPENS() {
	    return this.getToken(Java20Parser.OPENS, 0);
	};

	PROVIDES() {
	    return this.getToken(Java20Parser.PROVIDES, 0);
	};

	REQUIRES() {
	    return this.getToken(Java20Parser.REQUIRES, 0);
	};

	TO() {
	    return this.getToken(Java20Parser.TO, 0);
	};

	TRANSITIVE() {
	    return this.getToken(Java20Parser.TRANSITIVE, 0);
	};

	USES() {
	    return this.getToken(Java20Parser.USES, 0);
	};

	WITH() {
	    return this.getToken(Java20Parser.WITH, 0);
	};


}



class ContextualKeywordMinusForUnqualifiedMethodIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_contextualKeywordMinusForUnqualifiedMethodIdentifier;
    }

	EXPORTS() {
	    return this.getToken(Java20Parser.EXPORTS, 0);
	};

	MODULE() {
	    return this.getToken(Java20Parser.MODULE, 0);
	};

	NONSEALED() {
	    return this.getToken(Java20Parser.NONSEALED, 0);
	};

	OPEN() {
	    return this.getToken(Java20Parser.OPEN, 0);
	};

	OPENS() {
	    return this.getToken(Java20Parser.OPENS, 0);
	};

	PERMITS() {
	    return this.getToken(Java20Parser.PERMITS, 0);
	};

	PROVIDES() {
	    return this.getToken(Java20Parser.PROVIDES, 0);
	};

	RECORD() {
	    return this.getToken(Java20Parser.RECORD, 0);
	};

	REQUIRES() {
	    return this.getToken(Java20Parser.REQUIRES, 0);
	};

	SEALED() {
	    return this.getToken(Java20Parser.SEALED, 0);
	};

	TO() {
	    return this.getToken(Java20Parser.TO, 0);
	};

	TRANSITIVE() {
	    return this.getToken(Java20Parser.TRANSITIVE, 0);
	};

	USES() {
	    return this.getToken(Java20Parser.USES, 0);
	};

	VAR() {
	    return this.getToken(Java20Parser.VAR, 0);
	};

	WITH() {
	    return this.getToken(Java20Parser.WITH, 0);
	};


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_literal;
    }

	IntegerLiteral() {
	    return this.getToken(Java20Parser.IntegerLiteral, 0);
	};

	FloatingPointLiteral() {
	    return this.getToken(Java20Parser.FloatingPointLiteral, 0);
	};

	BooleanLiteral() {
	    return this.getToken(Java20Parser.BooleanLiteral, 0);
	};

	CharacterLiteral() {
	    return this.getToken(Java20Parser.CharacterLiteral, 0);
	};

	StringLiteral() {
	    return this.getToken(Java20Parser.StringLiteral, 0);
	};

	TextBlock() {
	    return this.getToken(Java20Parser.TextBlock, 0);
	};

	NullLiteral() {
	    return this.getToken(Java20Parser.NullLiteral, 0);
	};


}



class PrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_primitiveType;
    }

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	BOOLEAN() {
	    return this.getToken(Java20Parser.BOOLEAN, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_numericType;
    }

	integralType() {
	    return this.getTypedRuleContext(IntegralTypeContext,0);
	};

	floatingPointType() {
	    return this.getTypedRuleContext(FloatingPointTypeContext,0);
	};


}



class IntegralTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_integralType;
    }

	BYTE() {
	    return this.getToken(Java20Parser.BYTE, 0);
	};

	SHORT() {
	    return this.getToken(Java20Parser.SHORT, 0);
	};

	INT() {
	    return this.getToken(Java20Parser.INT, 0);
	};

	LONG() {
	    return this.getToken(Java20Parser.LONG, 0);
	};

	CHAR() {
	    return this.getToken(Java20Parser.CHAR, 0);
	};


}



class FloatingPointTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_floatingPointType;
    }

	FLOAT() {
	    return this.getToken(Java20Parser.FLOAT, 0);
	};

	DOUBLE() {
	    return this.getToken(Java20Parser.DOUBLE, 0);
	};


}



class ReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_referenceType;
    }

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};


}



class CoitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_coit;
    }

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	coit() {
	    return this.getTypedRuleContext(CoitContext,0);
	};


}



class ClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classOrInterfaceType;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	coit() {
	    return this.getTypedRuleContext(CoitContext,0);
	};


}



class ClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classType;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};


}



class InterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceType;
    }

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};


}



class TypeVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeVariable;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};


}



class ArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayType;
    }

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};


}



class DimsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_dims;
    }

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.LBRACK);
	    } else {
	        return this.getToken(Java20Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.RBRACK);
	    } else {
	        return this.getToken(Java20Parser.RBRACK, i);
	    }
	};


	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};


}



class TypeParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeParameter;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	typeParameterModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterModifierContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterModifierContext,i);
	    }
	};

	typeBound() {
	    return this.getTypedRuleContext(TypeBoundContext,0);
	};


}



class TypeParameterModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeParameterModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};


}



class TypeBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeBound;
    }

	EXTENDS() {
	    return this.getToken(Java20Parser.EXTENDS, 0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};

	additionalBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditionalBoundContext);
	    } else {
	        return this.getTypedRuleContext(AdditionalBoundContext,i);
	    }
	};


}



class AdditionalBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_additionalBound;
    }

	BITAND() {
	    return this.getToken(Java20Parser.BITAND, 0);
	};

	interfaceType() {
	    return this.getTypedRuleContext(InterfaceTypeContext,0);
	};


}



class TypeArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeArguments;
    }

	LT() {
	    return this.getToken(Java20Parser.LT, 0);
	};

	typeArgumentList() {
	    return this.getTypedRuleContext(TypeArgumentListContext,0);
	};

	GT() {
	    return this.getToken(Java20Parser.GT, 0);
	};


}



class TypeArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeArgumentList;
    }

	typeArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeArgumentContext);
	    } else {
	        return this.getTypedRuleContext(TypeArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class TypeArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeArgument;
    }

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	wildcard() {
	    return this.getTypedRuleContext(WildcardContext,0);
	};


}



class WildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_wildcard;
    }

	QUESTION() {
	    return this.getToken(Java20Parser.QUESTION, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	wildcardBounds() {
	    return this.getTypedRuleContext(WildcardBoundsContext,0);
	};


}



class WildcardBoundsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_wildcardBounds;
    }

	EXTENDS() {
	    return this.getToken(Java20Parser.EXTENDS, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};


}



class ModuleNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_moduleName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	moduleName() {
	    return this.getTypedRuleContext(ModuleNameContext,0);
	};


}



class PackageNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_packageName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};


}



class TypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeName;
    }

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};


}



class PackageOrTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_packageOrTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};


}



class ExpressionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_expressionName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ambiguousName() {
	    return this.getTypedRuleContext(AmbiguousNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};


}



class MethodNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodName;
    }

	unqualifiedMethodIdentifier() {
	    return this.getTypedRuleContext(UnqualifiedMethodIdentifierContext,0);
	};


}



class AmbiguousNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ambiguousName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	ambiguousName() {
	    return this.getTypedRuleContext(AmbiguousNameContext,0);
	};


}



class CompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_compilationUnit;
    }

	ordinaryCompilationUnit() {
	    return this.getTypedRuleContext(OrdinaryCompilationUnitContext,0);
	};

	modularCompilationUnit() {
	    return this.getTypedRuleContext(ModularCompilationUnitContext,0);
	};


}



class OrdinaryCompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ordinaryCompilationUnit;
    }

	packageDeclaration() {
	    return this.getTypedRuleContext(PackageDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};

	topLevelClassOrInterfaceDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TopLevelClassOrInterfaceDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(TopLevelClassOrInterfaceDeclarationContext,i);
	    }
	};


}



class ModularCompilationUnitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_modularCompilationUnit;
    }

	moduleDeclaration() {
	    return this.getTypedRuleContext(ModuleDeclarationContext,0);
	};

	importDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ImportDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ImportDeclarationContext,i);
	    }
	};


}



class PackageDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_packageDeclaration;
    }

	PACKAGE() {
	    return this.getToken(Java20Parser.PACKAGE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	packageModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PackageModifierContext);
	    } else {
	        return this.getTypedRuleContext(PackageModifierContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};



}



class PackageModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_packageModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};


}



class ImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_importDeclaration;
    }

	singleTypeImportDeclaration() {
	    return this.getTypedRuleContext(SingleTypeImportDeclarationContext,0);
	};

	typeImportOnDemandDeclaration() {
	    return this.getTypedRuleContext(TypeImportOnDemandDeclarationContext,0);
	};

	singleStaticImportDeclaration() {
	    return this.getTypedRuleContext(SingleStaticImportDeclarationContext,0);
	};

	staticImportOnDemandDeclaration() {
	    return this.getTypedRuleContext(StaticImportOnDemandDeclarationContext,0);
	};


}



class SingleTypeImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_singleTypeImportDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java20Parser.IMPORT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class TypeImportOnDemandDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeImportOnDemandDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java20Parser.IMPORT, 0);
	};

	packageOrTypeName() {
	    return this.getTypedRuleContext(PackageOrTypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	MUL() {
	    return this.getToken(Java20Parser.MUL, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class SingleStaticImportDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_singleStaticImportDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java20Parser.IMPORT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class StaticImportOnDemandDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_staticImportOnDemandDeclaration;
    }

	IMPORT() {
	    return this.getToken(Java20Parser.IMPORT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	MUL() {
	    return this.getToken(Java20Parser.MUL, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class TopLevelClassOrInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_topLevelClassOrInterfaceDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class ModuleDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_moduleDeclaration;
    }

	MODULE() {
	    return this.getToken(Java20Parser.MODULE, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	OPEN() {
	    return this.getToken(Java20Parser.OPEN, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	moduleDirective = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleDirectiveContext);
	    } else {
	        return this.getTypedRuleContext(ModuleDirectiveContext,i);
	    }
	};


}



class ModuleDirectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_moduleDirective;
    }

	REQUIRES() {
	    return this.getToken(Java20Parser.REQUIRES, 0);
	};

	moduleName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ModuleNameContext);
	    } else {
	        return this.getTypedRuleContext(ModuleNameContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	requiresModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RequiresModifierContext);
	    } else {
	        return this.getTypedRuleContext(RequiresModifierContext,i);
	    }
	};

	EXPORTS() {
	    return this.getToken(Java20Parser.EXPORTS, 0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	TO() {
	    return this.getToken(Java20Parser.TO, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	OPENS() {
	    return this.getToken(Java20Parser.OPENS, 0);
	};

	USES() {
	    return this.getToken(Java20Parser.USES, 0);
	};

	typeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TypeNameContext,i);
	    }
	};

	PROVIDES() {
	    return this.getToken(Java20Parser.PROVIDES, 0);
	};

	WITH() {
	    return this.getToken(Java20Parser.WITH, 0);
	};


}



class RequiresModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_requiresModifier;
    }

	TRANSITIVE() {
	    return this.getToken(Java20Parser.TRANSITIVE, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};


}



class ClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classDeclaration;
    }

	normalClassDeclaration() {
	    return this.getTypedRuleContext(NormalClassDeclarationContext,0);
	};

	enumDeclaration() {
	    return this.getTypedRuleContext(EnumDeclarationContext,0);
	};

	recordDeclaration() {
	    return this.getTypedRuleContext(RecordDeclarationContext,0);
	};


}



class NormalClassDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_normalClassDeclaration;
    }

	CLASS() {
	    return this.getToken(Java20Parser.CLASS, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	classExtends() {
	    return this.getTypedRuleContext(ClassExtendsContext,0);
	};

	classImplements() {
	    return this.getTypedRuleContext(ClassImplementsContext,0);
	};

	classPermits() {
	    return this.getTypedRuleContext(ClassPermitsContext,0);
	};


}



class ClassModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};

	SEALED() {
	    return this.getToken(Java20Parser.SEALED, 0);
	};

	NONSEALED() {
	    return this.getToken(Java20Parser.NONSEALED, 0);
	};

	STRICTFP() {
	    return this.getToken(Java20Parser.STRICTFP, 0);
	};


}



class TypeParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeParameters;
    }

	LT() {
	    return this.getToken(Java20Parser.LT, 0);
	};

	typeParameterList() {
	    return this.getTypedRuleContext(TypeParameterListContext,0);
	};

	GT() {
	    return this.getToken(Java20Parser.GT, 0);
	};


}



class TypeParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeParameterList;
    }

	typeParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeParameterContext);
	    } else {
	        return this.getTypedRuleContext(TypeParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class ClassExtendsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classExtends;
    }

	EXTENDS() {
	    return this.getToken(Java20Parser.EXTENDS, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};


}



class ClassImplementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classImplements;
    }

	IMPLEMENTS() {
	    return this.getToken(Java20Parser.IMPLEMENTS, 0);
	};

	interfaceTypeList() {
	    return this.getTypedRuleContext(InterfaceTypeListContext,0);
	};


}



class InterfaceTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceTypeList;
    }

	interfaceType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceTypeContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class ClassPermitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classPermits;
    }

	PERMITS() {
	    return this.getToken(Java20Parser.PERMITS, 0);
	};

	typeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TypeNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class ClassBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};


}



class ClassBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classBodyDeclaration;
    }

	classMemberDeclaration() {
	    return this.getTypedRuleContext(ClassMemberDeclarationContext,0);
	};

	instanceInitializer() {
	    return this.getTypedRuleContext(InstanceInitializerContext,0);
	};

	staticInitializer() {
	    return this.getTypedRuleContext(StaticInitializerContext,0);
	};

	constructorDeclaration() {
	    return this.getTypedRuleContext(ConstructorDeclarationContext,0);
	};


}



class ClassMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classMemberDeclaration;
    }

	fieldDeclaration() {
	    return this.getTypedRuleContext(FieldDeclarationContext,0);
	};

	methodDeclaration() {
	    return this.getTypedRuleContext(MethodDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class FieldDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_fieldDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	fieldModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldModifierContext);
	    } else {
	        return this.getTypedRuleContext(FieldModifierContext,i);
	    }
	};


}



class FieldModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_fieldModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};

	TRANSIENT() {
	    return this.getToken(Java20Parser.TRANSIENT, 0);
	};

	VOLATILE() {
	    return this.getToken(Java20Parser.VOLATILE, 0);
	};


}



class VariableDeclaratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableDeclaratorList;
    }

	variableDeclarator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableDeclaratorContext);
	    } else {
	        return this.getTypedRuleContext(VariableDeclaratorContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class VariableDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableDeclarator;
    }

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	ASSIGN() {
	    return this.getToken(Java20Parser.ASSIGN, 0);
	};

	variableInitializer() {
	    return this.getTypedRuleContext(VariableInitializerContext,0);
	};


}



class VariableDeclaratorIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableDeclaratorId;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};


}



class VariableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableInitializer;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};


}



class UnannTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannType;
    }

	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	unannReferenceType() {
	    return this.getTypedRuleContext(UnannReferenceTypeContext,0);
	};


}



class UnannPrimitiveTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannPrimitiveType;
    }

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	BOOLEAN() {
	    return this.getToken(Java20Parser.BOOLEAN, 0);
	};


}



class UnannReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannReferenceType;
    }

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	unannTypeVariable() {
	    return this.getTypedRuleContext(UnannTypeVariableContext,0);
	};

	unannArrayType() {
	    return this.getTypedRuleContext(UnannArrayTypeContext,0);
	};


}



class UnannClassOrInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannClassOrInterfaceType;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	uCOIT() {
	    return this.getTypedRuleContext(UCOITContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};


}



class UCOITContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_uCOIT;
    }

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	uCOIT() {
	    return this.getTypedRuleContext(UCOITContext,0);
	};


}



class UnannClassTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannClassType;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	packageName() {
	    return this.getTypedRuleContext(PackageNameContext,0);
	};

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};


}



class UnannInterfaceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannInterfaceType;
    }

	unannClassType() {
	    return this.getTypedRuleContext(UnannClassTypeContext,0);
	};


}



class UnannTypeVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannTypeVariable;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};


}



class UnannArrayTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unannArrayType;
    }

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	unannPrimitiveType() {
	    return this.getTypedRuleContext(UnannPrimitiveTypeContext,0);
	};

	unannClassOrInterfaceType() {
	    return this.getTypedRuleContext(UnannClassOrInterfaceTypeContext,0);
	};

	unannTypeVariable() {
	    return this.getTypedRuleContext(UnannTypeVariableContext,0);
	};


}



class MethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodDeclaration;
    }

	methodHeader() {
	    return this.getTypedRuleContext(MethodHeaderContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	methodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(MethodModifierContext,i);
	    }
	};


}



class MethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};

	SYNCHRONIZED() {
	    return this.getToken(Java20Parser.SYNCHRONIZED, 0);
	};

	NATIVE() {
	    return this.getToken(Java20Parser.NATIVE, 0);
	};

	STRICTFP() {
	    return this.getToken(Java20Parser.STRICTFP, 0);
	};


}



class MethodHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodHeader;
    }

	result() {
	    return this.getTypedRuleContext(ResultContext,0);
	};

	methodDeclarator() {
	    return this.getTypedRuleContext(MethodDeclaratorContext,0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	throwsT() {
	    return this.getTypedRuleContext(ThrowsTContext,0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};


}



class ResultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_result;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	VOID() {
	    return this.getToken(Java20Parser.VOID, 0);
	};


}



class MethodDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodDeclarator;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	receiverParameter() {
	    return this.getTypedRuleContext(ReceiverParameterContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};


}



class ReceiverParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_receiverParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	THIS() {
	    return this.getToken(Java20Parser.THIS, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};


}



class FormalParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_formalParameterList;
    }

	formalParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FormalParameterContext);
	    } else {
	        return this.getTypedRuleContext(FormalParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class FormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_formalParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	variableArityParameter() {
	    return this.getTypedRuleContext(VariableArityParameterContext,0);
	};


}



class VariableArityParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableArityParameter;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(Java20Parser.ELLIPSIS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};


}



class VariableModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};


}



class ThrowsTContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_throwsT;
    }

	THROWS() {
	    return this.getToken(Java20Parser.THROWS, 0);
	};

	exceptionTypeList() {
	    return this.getTypedRuleContext(ExceptionTypeListContext,0);
	};


}



class ExceptionTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_exceptionTypeList;
    }

	exceptionType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExceptionTypeContext);
	    } else {
	        return this.getTypedRuleContext(ExceptionTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class ExceptionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_exceptionType;
    }

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	typeVariable() {
	    return this.getTypedRuleContext(TypeVariableContext,0);
	};


}



class MethodBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodBody;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class InstanceInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_instanceInitializer;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};


}



class StaticInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_staticInitializer;
    }

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};


}



class ConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constructorDeclaration;
    }

	constructorDeclarator() {
	    return this.getTypedRuleContext(ConstructorDeclaratorContext,0);
	};

	constructorBody() {
	    return this.getTypedRuleContext(ConstructorBodyContext,0);
	};

	constructorModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructorModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstructorModifierContext,i);
	    }
	};

	throwsT() {
	    return this.getTypedRuleContext(ThrowsTContext,0);
	};


}



class ConstructorModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constructorModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};


}



class ConstructorDeclaratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constructorDeclarator;
    }

	simpleTypeName() {
	    return this.getTypedRuleContext(SimpleTypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	receiverParameter() {
	    return this.getTypedRuleContext(ReceiverParameterContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};

	formalParameterList() {
	    return this.getTypedRuleContext(FormalParameterListContext,0);
	};


}



class SimpleTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_simpleTypeName;
    }

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};


}



class ConstructorBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constructorBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	explicitConstructorInvocation() {
	    return this.getTypedRuleContext(ExplicitConstructorInvocationContext,0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};


}



class ExplicitConstructorInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_explicitConstructorInvocation;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	THIS() {
	    return this.getToken(Java20Parser.THIS, 0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};


}



class EnumDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumDeclaration;
    }

	ENUM() {
	    return this.getToken(Java20Parser.ENUM, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	enumBody() {
	    return this.getTypedRuleContext(EnumBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	classImplements() {
	    return this.getTypedRuleContext(ClassImplementsContext,0);
	};


}



class EnumBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	enumConstantList() {
	    return this.getTypedRuleContext(EnumConstantListContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};

	enumBodyDeclarations() {
	    return this.getTypedRuleContext(EnumBodyDeclarationsContext,0);
	};


}



class EnumConstantListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumConstantList;
    }

	enumConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class EnumConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumConstant;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enumConstantModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumConstantModifierContext);
	    } else {
	        return this.getTypedRuleContext(EnumConstantModifierContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};


}



class EnumConstantModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumConstantModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};


}



class EnumBodyDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enumBodyDeclarations;
    }

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	classBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ClassBodyDeclarationContext,i);
	    }
	};


}



class RecordDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordDeclaration;
    }

	RECORD() {
	    return this.getToken(Java20Parser.RECORD, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	recordHeader() {
	    return this.getTypedRuleContext(RecordHeaderContext,0);
	};

	recordBody() {
	    return this.getTypedRuleContext(RecordBodyContext,0);
	};

	classModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassModifierContext);
	    } else {
	        return this.getTypedRuleContext(ClassModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	classImplements() {
	    return this.getTypedRuleContext(ClassImplementsContext,0);
	};


}



class RecordHeaderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordHeader;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	recordComponentList() {
	    return this.getTypedRuleContext(RecordComponentListContext,0);
	};


}



class RecordComponentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordComponentList;
    }

	recordComponent = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordComponentContext);
	    } else {
	        return this.getTypedRuleContext(RecordComponentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class RecordComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordComponent;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	recordComponentModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordComponentModifierContext);
	    } else {
	        return this.getTypedRuleContext(RecordComponentModifierContext,i);
	    }
	};

	variableArityRecordComponent() {
	    return this.getTypedRuleContext(VariableArityRecordComponentContext,0);
	};


}



class VariableArityRecordComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableArityRecordComponent;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	ELLIPSIS() {
	    return this.getToken(Java20Parser.ELLIPSIS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	recordComponentModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordComponentModifierContext);
	    } else {
	        return this.getTypedRuleContext(RecordComponentModifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};


}



class RecordComponentModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordComponentModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};


}



class RecordBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	recordBodyDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordBodyDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(RecordBodyDeclarationContext,i);
	    }
	};


}



class RecordBodyDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_recordBodyDeclaration;
    }

	classBodyDeclaration() {
	    return this.getTypedRuleContext(ClassBodyDeclarationContext,0);
	};

	compactConstructorDeclaration() {
	    return this.getTypedRuleContext(CompactConstructorDeclarationContext,0);
	};


}



class CompactConstructorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_compactConstructorDeclaration;
    }

	simpleTypeName() {
	    return this.getTypedRuleContext(SimpleTypeNameContext,0);
	};

	constructorBody() {
	    return this.getTypedRuleContext(ConstructorBodyContext,0);
	};

	constructorModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructorModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstructorModifierContext,i);
	    }
	};


}



class InterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceDeclaration;
    }

	normalInterfaceDeclaration() {
	    return this.getTypedRuleContext(NormalInterfaceDeclarationContext,0);
	};

	annotationInterfaceDeclaration() {
	    return this.getTypedRuleContext(AnnotationInterfaceDeclarationContext,0);
	};


}



class NormalInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_normalInterfaceDeclaration;
    }

	INTERFACE() {
	    return this.getToken(Java20Parser.INTERFACE, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	interfaceBody() {
	    return this.getTypedRuleContext(InterfaceBodyContext,0);
	};

	interfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceModifierContext,i);
	    }
	};

	typeParameters() {
	    return this.getTypedRuleContext(TypeParametersContext,0);
	};

	interfaceExtends() {
	    return this.getTypedRuleContext(InterfaceExtendsContext,0);
	};

	interfacePermits() {
	    return this.getTypedRuleContext(InterfacePermitsContext,0);
	};


}



class InterfaceModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PROTECTED() {
	    return this.getToken(Java20Parser.PROTECTED, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	SEALED() {
	    return this.getToken(Java20Parser.SEALED, 0);
	};

	NONSEALED() {
	    return this.getToken(Java20Parser.NONSEALED, 0);
	};

	STRICTFP() {
	    return this.getToken(Java20Parser.STRICTFP, 0);
	};


}



class InterfaceExtendsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceExtends;
    }

	EXTENDS() {
	    return this.getToken(Java20Parser.EXTENDS, 0);
	};

	interfaceTypeList() {
	    return this.getTypedRuleContext(InterfaceTypeListContext,0);
	};


}



class InterfacePermitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfacePermits;
    }

	PERMITS() {
	    return this.getToken(Java20Parser.PERMITS, 0);
	};

	typeName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TypeNameContext);
	    } else {
	        return this.getTypedRuleContext(TypeNameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class InterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	interfaceMemberDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMemberDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMemberDeclarationContext,i);
	    }
	};


}



class InterfaceMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceMemberDeclaration;
    }

	constantDeclaration() {
	    return this.getTypedRuleContext(ConstantDeclarationContext,0);
	};

	interfaceMethodDeclaration() {
	    return this.getTypedRuleContext(InterfaceMethodDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class ConstantDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constantDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	constantModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstantModifierContext);
	    } else {
	        return this.getTypedRuleContext(ConstantModifierContext,i);
	    }
	};


}



class ConstantModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constantModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	FINAL() {
	    return this.getToken(Java20Parser.FINAL, 0);
	};


}



class InterfaceMethodDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceMethodDeclaration;
    }

	methodHeader() {
	    return this.getTypedRuleContext(MethodHeaderContext,0);
	};

	methodBody() {
	    return this.getTypedRuleContext(MethodBodyContext,0);
	};

	interfaceMethodModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceMethodModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceMethodModifierContext,i);
	    }
	};


}



class InterfaceMethodModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_interfaceMethodModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	PRIVATE() {
	    return this.getToken(Java20Parser.PRIVATE, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};

	DEFAULT() {
	    return this.getToken(Java20Parser.DEFAULT, 0);
	};

	STATIC() {
	    return this.getToken(Java20Parser.STATIC, 0);
	};

	STRICTFP() {
	    return this.getToken(Java20Parser.STRICTFP, 0);
	};


}



class AnnotationInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceDeclaration;
    }

	AT() {
	    return this.getToken(Java20Parser.AT, 0);
	};

	INTERFACE() {
	    return this.getToken(Java20Parser.INTERFACE, 0);
	};

	typeIdentifier() {
	    return this.getTypedRuleContext(TypeIdentifierContext,0);
	};

	annotationInterfaceBody() {
	    return this.getTypedRuleContext(AnnotationInterfaceBodyContext,0);
	};

	interfaceModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InterfaceModifierContext);
	    } else {
	        return this.getTypedRuleContext(InterfaceModifierContext,i);
	    }
	};


}



class AnnotationInterfaceBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceBody;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	annotationInterfaceMemberDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationInterfaceMemberDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationInterfaceMemberDeclarationContext,i);
	    }
	};


}



class AnnotationInterfaceMemberDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceMemberDeclaration;
    }

	annotationInterfaceElementDeclaration() {
	    return this.getTypedRuleContext(AnnotationInterfaceElementDeclarationContext,0);
	};

	constantDeclaration() {
	    return this.getTypedRuleContext(ConstantDeclarationContext,0);
	};

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	interfaceDeclaration() {
	    return this.getTypedRuleContext(InterfaceDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class AnnotationInterfaceElementDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceElementDeclaration;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	annotationInterfaceElementModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationInterfaceElementModifierContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationInterfaceElementModifierContext,i);
	    }
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	defaultValue() {
	    return this.getTypedRuleContext(DefaultValueContext,0);
	};


}



class AnnotationInterfaceElementModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotationInterfaceElementModifier;
    }

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};

	PUBLIC() {
	    return this.getToken(Java20Parser.PUBLIC, 0);
	};

	ABSTRACT() {
	    return this.getToken(Java20Parser.ABSTRACT, 0);
	};


}



class DefaultValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_defaultValue;
    }

	DEFAULT() {
	    return this.getToken(Java20Parser.DEFAULT, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};


}



class AnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_annotation;
    }

	normalAnnotation() {
	    return this.getTypedRuleContext(NormalAnnotationContext,0);
	};

	markerAnnotation() {
	    return this.getTypedRuleContext(MarkerAnnotationContext,0);
	};

	singleElementAnnotation() {
	    return this.getTypedRuleContext(SingleElementAnnotationContext,0);
	};


}



class NormalAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_normalAnnotation;
    }

	AT() {
	    return this.getToken(Java20Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	elementValuePairList() {
	    return this.getTypedRuleContext(ElementValuePairListContext,0);
	};


}



class ElementValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValuePairList;
    }

	elementValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValuePairContext);
	    } else {
	        return this.getTypedRuleContext(ElementValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class ElementValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValuePair;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ASSIGN() {
	    return this.getToken(Java20Parser.ASSIGN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};


}



class ElementValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValue;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	elementValueArrayInitializer() {
	    return this.getTypedRuleContext(ElementValueArrayInitializerContext,0);
	};

	annotation() {
	    return this.getTypedRuleContext(AnnotationContext,0);
	};


}



class ElementValueArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValueArrayInitializer;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	elementValueList() {
	    return this.getTypedRuleContext(ElementValueListContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};


}



class ElementValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_elementValueList;
    }

	elementValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementValueContext);
	    } else {
	        return this.getTypedRuleContext(ElementValueContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class MarkerAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_markerAnnotation;
    }

	AT() {
	    return this.getToken(Java20Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};


}



class SingleElementAnnotationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_singleElementAnnotation;
    }

	AT() {
	    return this.getToken(Java20Parser.AT, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	elementValue() {
	    return this.getTypedRuleContext(ElementValueContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};


}



class ArrayInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayInitializer;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	variableInitializerList() {
	    return this.getTypedRuleContext(VariableInitializerListContext,0);
	};

	COMMA() {
	    return this.getToken(Java20Parser.COMMA, 0);
	};


}



class VariableInitializerListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableInitializerList;
    }

	variableInitializer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableInitializerContext);
	    } else {
	        return this.getTypedRuleContext(VariableInitializerContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_block;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};


}



class BlockStatementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_blockStatements;
    }

	blockStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockStatementContext);
	    } else {
	        return this.getTypedRuleContext(BlockStatementContext,i);
	    }
	};


}



class BlockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_blockStatement;
    }

	localClassOrInterfaceDeclaration() {
	    return this.getTypedRuleContext(LocalClassOrInterfaceDeclarationContext,0);
	};

	localVariableDeclarationStatement() {
	    return this.getTypedRuleContext(LocalVariableDeclarationStatementContext,0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};


}



class LocalClassOrInterfaceDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_localClassOrInterfaceDeclaration;
    }

	classDeclaration() {
	    return this.getTypedRuleContext(ClassDeclarationContext,0);
	};

	normalInterfaceDeclaration() {
	    return this.getTypedRuleContext(NormalInterfaceDeclarationContext,0);
	};


}



class LocalVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_localVariableDeclaration;
    }

	localVariableType() {
	    return this.getTypedRuleContext(LocalVariableTypeContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	variableDeclaratorList() {
	    return this.getTypedRuleContext(VariableDeclaratorListContext,0);
	};


}



class LocalVariableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_localVariableType;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	VAR() {
	    return this.getToken(Java20Parser.VAR, 0);
	};


}



class LocalVariableDeclarationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_localVariableDeclarationStatement;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statement;
    }

	statementWithoutTrailingSubstatement() {
	    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
	};

	labeledStatement() {
	    return this.getTypedRuleContext(LabeledStatementContext,0);
	};

	ifThenStatement() {
	    return this.getTypedRuleContext(IfThenStatementContext,0);
	};

	ifThenElseStatement() {
	    return this.getTypedRuleContext(IfThenElseStatementContext,0);
	};

	whileStatement() {
	    return this.getTypedRuleContext(WhileStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};


}



class StatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statementNoShortIf;
    }

	statementWithoutTrailingSubstatement() {
	    return this.getTypedRuleContext(StatementWithoutTrailingSubstatementContext,0);
	};

	labeledStatementNoShortIf() {
	    return this.getTypedRuleContext(LabeledStatementNoShortIfContext,0);
	};

	ifThenElseStatementNoShortIf() {
	    return this.getTypedRuleContext(IfThenElseStatementNoShortIfContext,0);
	};

	whileStatementNoShortIf() {
	    return this.getTypedRuleContext(WhileStatementNoShortIfContext,0);
	};

	forStatementNoShortIf() {
	    return this.getTypedRuleContext(ForStatementNoShortIfContext,0);
	};


}



class StatementWithoutTrailingSubstatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statementWithoutTrailingSubstatement;
    }

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	emptyStatement_() {
	    return this.getTypedRuleContext(EmptyStatement_Context,0);
	};

	expressionStatement() {
	    return this.getTypedRuleContext(ExpressionStatementContext,0);
	};

	assertStatement() {
	    return this.getTypedRuleContext(AssertStatementContext,0);
	};

	switchStatement() {
	    return this.getTypedRuleContext(SwitchStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	breakStatement() {
	    return this.getTypedRuleContext(BreakStatementContext,0);
	};

	continueStatement() {
	    return this.getTypedRuleContext(ContinueStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	synchronizedStatement() {
	    return this.getTypedRuleContext(SynchronizedStatementContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};

	tryStatement() {
	    return this.getTypedRuleContext(TryStatementContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};


}



class EmptyStatement_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_emptyStatement_;
    }

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class LabeledStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_labeledStatement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};


}



class LabeledStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_labeledStatementNoShortIf;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};


}



class ExpressionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_expressionStatement;
    }

	statementExpression() {
	    return this.getTypedRuleContext(StatementExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class StatementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statementExpression;
    }

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};

	preIncrementExpression() {
	    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
	};

	preDecrementExpression() {
	    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
	};

	postIncrementExpression() {
	    return this.getTypedRuleContext(PostIncrementExpressionContext,0);
	};

	postDecrementExpression() {
	    return this.getTypedRuleContext(PostDecrementExpressionContext,0);
	};

	methodInvocation() {
	    return this.getTypedRuleContext(MethodInvocationContext,0);
	};

	classInstanceCreationExpression() {
	    return this.getTypedRuleContext(ClassInstanceCreationExpressionContext,0);
	};


}



class IfThenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ifThenStatement;
    }

	IF() {
	    return this.getToken(Java20Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};


}



class IfThenElseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ifThenElseStatement;
    }

	IF() {
	    return this.getToken(Java20Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	ELSE() {
	    return this.getToken(Java20Parser.ELSE, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};


}



class IfThenElseStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_ifThenElseStatementNoShortIf;
    }

	IF() {
	    return this.getToken(Java20Parser.IF, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementNoShortIfContext);
	    } else {
	        return this.getTypedRuleContext(StatementNoShortIfContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Java20Parser.ELSE, 0);
	};


}



class AssertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_assertStatement;
    }

	ASSERT() {
	    return this.getToken(Java20Parser.ASSERT, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};


}



class SwitchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchStatement;
    }

	SWITCH() {
	    return this.getToken(Java20Parser.SWITCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	switchBlock() {
	    return this.getTypedRuleContext(SwitchBlockContext,0);
	};


}



class SwitchBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchBlock;
    }

	LBRACE() {
	    return this.getToken(Java20Parser.LBRACE, 0);
	};

	switchRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchRuleContext);
	    } else {
	        return this.getTypedRuleContext(SwitchRuleContext,i);
	    }
	};

	RBRACE() {
	    return this.getToken(Java20Parser.RBRACE, 0);
	};

	switchBlockStatementGroup = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchBlockStatementGroupContext);
	    } else {
	        return this.getTypedRuleContext(SwitchBlockStatementGroupContext,i);
	    }
	};

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COLON);
	    } else {
	        return this.getToken(Java20Parser.COLON, i);
	    }
	};



}



class SwitchRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchRule;
    }

	switchLabel() {
	    return this.getTypedRuleContext(SwitchLabelContext,0);
	};

	ARROW() {
	    return this.getToken(Java20Parser.ARROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	throwStatement() {
	    return this.getTypedRuleContext(ThrowStatementContext,0);
	};


}



class SwitchBlockStatementGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchBlockStatementGroup;
    }

	switchLabel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SwitchLabelContext);
	    } else {
	        return this.getTypedRuleContext(SwitchLabelContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COLON);
	    } else {
	        return this.getToken(Java20Parser.COLON, i);
	    }
	};


	blockStatements() {
	    return this.getTypedRuleContext(BlockStatementsContext,0);
	};


}



class SwitchLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchLabel;
    }

	CASE() {
	    return this.getToken(Java20Parser.CASE, 0);
	};

	caseConstant = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CaseConstantContext);
	    } else {
	        return this.getTypedRuleContext(CaseConstantContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	DEFAULT() {
	    return this.getToken(Java20Parser.DEFAULT, 0);
	};


}



class CaseConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_caseConstant;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};


}



class WhileStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_whileStatement;
    }

	WHILE() {
	    return this.getToken(Java20Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};


}



class WhileStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_whileStatementNoShortIf;
    }

	WHILE() {
	    return this.getToken(Java20Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_doStatement;
    }

	DO() {
	    return this.getToken(Java20Parser.DO, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	WHILE() {
	    return this.getToken(Java20Parser.WHILE, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_forStatement;
    }

	basicForStatement() {
	    return this.getTypedRuleContext(BasicForStatementContext,0);
	};

	enhancedForStatement() {
	    return this.getTypedRuleContext(EnhancedForStatementContext,0);
	};


}



class ForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_forStatementNoShortIf;
    }

	basicForStatementNoShortIf() {
	    return this.getTypedRuleContext(BasicForStatementNoShortIfContext,0);
	};

	enhancedForStatementNoShortIf() {
	    return this.getTypedRuleContext(EnhancedForStatementNoShortIfContext,0);
	};


}



class BasicForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_basicForStatement;
    }

	FOR() {
	    return this.getToken(Java20Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.SEMI);
	    } else {
	        return this.getToken(Java20Parser.SEMI, i);
	    }
	};


	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};


}



class BasicForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_basicForStatementNoShortIf;
    }

	FOR() {
	    return this.getToken(Java20Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.SEMI);
	    } else {
	        return this.getToken(Java20Parser.SEMI, i);
	    }
	};


	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};

	forInit() {
	    return this.getTypedRuleContext(ForInitContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	forUpdate() {
	    return this.getTypedRuleContext(ForUpdateContext,0);
	};


}



class ForInitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_forInit;
    }

	statementExpressionList() {
	    return this.getTypedRuleContext(StatementExpressionListContext,0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};


}



class ForUpdateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_forUpdate;
    }

	statementExpressionList() {
	    return this.getTypedRuleContext(StatementExpressionListContext,0);
	};


}



class StatementExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_statementExpressionList;
    }

	statementExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StatementExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class EnhancedForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enhancedForStatement;
    }

	FOR() {
	    return this.getToken(Java20Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};


}



class EnhancedForStatementNoShortIfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_enhancedForStatementNoShortIf;
    }

	FOR() {
	    return this.getToken(Java20Parser.FOR, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	statementNoShortIf() {
	    return this.getTypedRuleContext(StatementNoShortIfContext,0);
	};


}



class BreakStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_breakStatement;
    }

	BREAK() {
	    return this.getToken(Java20Parser.BREAK, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};


}



class ContinueStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_continueStatement;
    }

	CONTINUE() {
	    return this.getToken(Java20Parser.CONTINUE, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(Java20Parser.RETURN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};


}



class ThrowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_throwStatement;
    }

	THROW() {
	    return this.getToken(Java20Parser.THROW, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class SynchronizedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_synchronizedStatement;
    }

	SYNCHRONIZED() {
	    return this.getToken(Java20Parser.SYNCHRONIZED, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};


}



class TryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_tryStatement;
    }

	TRY() {
	    return this.getToken(Java20Parser.TRY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catches() {
	    return this.getTypedRuleContext(CatchesContext,0);
	};

	finallyBlock() {
	    return this.getTypedRuleContext(FinallyBlockContext,0);
	};

	tryWithResourcesStatement() {
	    return this.getTypedRuleContext(TryWithResourcesStatementContext,0);
	};


}



class CatchesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_catches;
    }

	catchClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CatchClauseContext);
	    } else {
	        return this.getTypedRuleContext(CatchClauseContext,i);
	    }
	};


}



class CatchClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_catchClause;
    }

	CATCH() {
	    return this.getToken(Java20Parser.CATCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	catchFormalParameter() {
	    return this.getTypedRuleContext(CatchFormalParameterContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};


}



class CatchFormalParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_catchFormalParameter;
    }

	catchType() {
	    return this.getTypedRuleContext(CatchTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};


}



class CatchTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_catchType;
    }

	unannClassType() {
	    return this.getTypedRuleContext(UnannClassTypeContext,0);
	};

	BITOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.BITOR);
	    } else {
	        return this.getToken(Java20Parser.BITOR, i);
	    }
	};


	classType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ClassTypeContext);
	    } else {
	        return this.getTypedRuleContext(ClassTypeContext,i);
	    }
	};


}



class FinallyBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_finallyBlock;
    }

	FINALLY() {
	    return this.getToken(Java20Parser.FINALLY, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};


}



class TryWithResourcesStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_tryWithResourcesStatement;
    }

	TRY() {
	    return this.getToken(Java20Parser.TRY, 0);
	};

	resourceSpecification() {
	    return this.getTypedRuleContext(ResourceSpecificationContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	catches() {
	    return this.getTypedRuleContext(CatchesContext,0);
	};

	finallyBlock() {
	    return this.getTypedRuleContext(FinallyBlockContext,0);
	};


}



class ResourceSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_resourceSpecification;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	resourceList() {
	    return this.getTypedRuleContext(ResourceListContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class ResourceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_resourceList;
    }

	resource = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResourceContext);
	    } else {
	        return this.getTypedRuleContext(ResourceContext,i);
	    }
	};

	SEMI = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.SEMI);
	    } else {
	        return this.getToken(Java20Parser.SEMI, i);
	    }
	};



}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_resource;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};

	variableAccess() {
	    return this.getTypedRuleContext(VariableAccessContext,0);
	};


}



class VariableAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_variableAccess;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_yieldStatement;
    }

	YIELD() {
	    return this.getToken(Java20Parser.YIELD, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	SEMI() {
	    return this.getToken(Java20Parser.SEMI, 0);
	};


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_pattern;
    }

	typePattern() {
	    return this.getTypedRuleContext(TypePatternContext,0);
	};


}



class TypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typePattern;
    }

	localVariableDeclaration() {
	    return this.getTypedRuleContext(LocalVariableDeclarationContext,0);
	};


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_expression;
    }

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};

	assignmentExpression() {
	    return this.getTypedRuleContext(AssignmentExpressionContext,0);
	};


}



class PrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_primary;
    }

	primaryNoNewArray() {
	    return this.getTypedRuleContext(PrimaryNoNewArrayContext,0);
	};

	arrayCreationExpression() {
	    return this.getTypedRuleContext(ArrayCreationExpressionContext,0);
	};


}



class PrimaryNoNewArrayContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_primaryNoNewArray;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	pNNA() {
	    return this.getTypedRuleContext(PNNAContext,0);
	};

	classLiteral() {
	    return this.getTypedRuleContext(ClassLiteralContext,0);
	};

	THIS() {
	    return this.getToken(Java20Parser.THIS, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	unqualifiedClassInstanceCreationExpression() {
	    return this.getTypedRuleContext(UnqualifiedClassInstanceCreationExpressionContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	arrayCreationExpression() {
	    return this.getTypedRuleContext(ArrayCreationExpressionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	LBRACK() {
	    return this.getToken(Java20Parser.LBRACK, 0);
	};

	RBRACK() {
	    return this.getToken(Java20Parser.RBRACK, 0);
	};

	arrayCreationExpressionWithInitializer() {
	    return this.getTypedRuleContext(ArrayCreationExpressionWithInitializerContext,0);
	};

	methodName() {
	    return this.getTypedRuleContext(MethodNameContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java20Parser.COLONCOLON, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};


}



class PNNAContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_pNNA;
    }

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	unqualifiedClassInstanceCreationExpression() {
	    return this.getTypedRuleContext(UnqualifiedClassInstanceCreationExpressionContext,0);
	};

	pNNA() {
	    return this.getTypedRuleContext(PNNAContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LBRACK() {
	    return this.getToken(Java20Parser.LBRACK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(Java20Parser.RBRACK, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java20Parser.COLONCOLON, 0);
	};


}



class ClassLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classLiteral;
    }

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	CLASS() {
	    return this.getToken(Java20Parser.CLASS, 0);
	};

	LBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.LBRACK);
	    } else {
	        return this.getToken(Java20Parser.LBRACK, i);
	    }
	};


	RBRACK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.RBRACK);
	    } else {
	        return this.getToken(Java20Parser.RBRACK, i);
	    }
	};


	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	BOOLEAN() {
	    return this.getToken(Java20Parser.BOOLEAN, 0);
	};

	VOID() {
	    return this.getToken(Java20Parser.VOID, 0);
	};


}



class ClassInstanceCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classInstanceCreationExpression;
    }

	unqualifiedClassInstanceCreationExpression() {
	    return this.getTypedRuleContext(UnqualifiedClassInstanceCreationExpressionContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};


}



class UnqualifiedClassInstanceCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unqualifiedClassInstanceCreationExpression;
    }

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	classOrInterfaceTypeToInstantiate() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeToInstantiateContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	classBody() {
	    return this.getTypedRuleContext(ClassBodyContext,0);
	};


}



class ClassOrInterfaceTypeToInstantiateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_classOrInterfaceTypeToInstantiate;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	typeArgumentsOrDiamond() {
	    return this.getTypedRuleContext(TypeArgumentsOrDiamondContext,0);
	};


}



class TypeArgumentsOrDiamondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_typeArgumentsOrDiamond;
    }

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	OACA() {
	    return this.getToken(Java20Parser.OACA, 0);
	};


}



class ArrayCreationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayCreationExpression;
    }

	arrayCreationExpressionWithoutInitializer() {
	    return this.getTypedRuleContext(ArrayCreationExpressionWithoutInitializerContext,0);
	};

	arrayCreationExpressionWithInitializer() {
	    return this.getTypedRuleContext(ArrayCreationExpressionWithInitializerContext,0);
	};


}



class ArrayCreationExpressionWithoutInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayCreationExpressionWithoutInitializer;
    }

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dimExprs() {
	    return this.getTypedRuleContext(DimExprsContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};


}



class ArrayCreationExpressionWithInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayCreationExpressionWithInitializer;
    }

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	dims() {
	    return this.getTypedRuleContext(DimsContext,0);
	};

	arrayInitializer() {
	    return this.getTypedRuleContext(ArrayInitializerContext,0);
	};

	classOrInterfaceType() {
	    return this.getTypedRuleContext(ClassOrInterfaceTypeContext,0);
	};


}



class DimExprsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_dimExprs;
    }

	dimExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DimExprContext);
	    } else {
	        return this.getTypedRuleContext(DimExprContext,i);
	    }
	};


}



class DimExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_dimExpr;
    }

	LBRACK() {
	    return this.getToken(Java20Parser.LBRACK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(Java20Parser.RBRACK, 0);
	};

	annotation = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AnnotationContext);
	    } else {
	        return this.getTypedRuleContext(AnnotationContext,i);
	    }
	};


}



class ArrayAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_arrayAccess;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	LBRACK() {
	    return this.getToken(Java20Parser.LBRACK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RBRACK() {
	    return this.getToken(Java20Parser.RBRACK, 0);
	};

	primaryNoNewArray() {
	    return this.getTypedRuleContext(PrimaryNoNewArrayContext,0);
	};

	arrayCreationExpressionWithInitializer() {
	    return this.getTypedRuleContext(ArrayCreationExpressionWithInitializerContext,0);
	};


}



class FieldAccessContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_fieldAccess;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};


}



class MethodInvocationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodInvocation;
    }

	methodName() {
	    return this.getTypedRuleContext(MethodNameContext,0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	argumentList() {
	    return this.getTypedRuleContext(ArgumentListContext,0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.DOT);
	    } else {
	        return this.getToken(Java20Parser.DOT, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};


}



class ArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_argumentList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};



}



class MethodReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_methodReference;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	COLONCOLON() {
	    return this.getToken(Java20Parser.COLONCOLON, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	typeArguments() {
	    return this.getTypedRuleContext(TypeArgumentsContext,0);
	};

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	SUPER() {
	    return this.getToken(Java20Parser.SUPER, 0);
	};

	typeName() {
	    return this.getTypedRuleContext(TypeNameContext,0);
	};

	DOT() {
	    return this.getToken(Java20Parser.DOT, 0);
	};

	classType() {
	    return this.getTypedRuleContext(ClassTypeContext,0);
	};

	NEW() {
	    return this.getToken(Java20Parser.NEW, 0);
	};

	arrayType() {
	    return this.getTypedRuleContext(ArrayTypeContext,0);
	};


}



class PostfixExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_postfixExpression;
    }

	primary() {
	    return this.getTypedRuleContext(PrimaryContext,0);
	};

	pfE() {
	    return this.getTypedRuleContext(PfEContext,0);
	};

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};


}



class PfEContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_pfE;
    }

	INC() {
	    return this.getToken(Java20Parser.INC, 0);
	};

	pfE() {
	    return this.getTypedRuleContext(PfEContext,0);
	};

	DEC() {
	    return this.getToken(Java20Parser.DEC, 0);
	};


}



class PostIncrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_postIncrementExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	INC() {
	    return this.getToken(Java20Parser.INC, 0);
	};


}



class PostDecrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_postDecrementExpression;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	DEC() {
	    return this.getToken(Java20Parser.DEC, 0);
	};


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unaryExpression;
    }

	preIncrementExpression() {
	    return this.getTypedRuleContext(PreIncrementExpressionContext,0);
	};

	preDecrementExpression() {
	    return this.getTypedRuleContext(PreDecrementExpressionContext,0);
	};

	ADD() {
	    return this.getToken(Java20Parser.ADD, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	SUB() {
	    return this.getToken(Java20Parser.SUB, 0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};


}



class PreIncrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_preIncrementExpression;
    }

	INC() {
	    return this.getToken(Java20Parser.INC, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};


}



class PreDecrementExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_preDecrementExpression;
    }

	DEC() {
	    return this.getToken(Java20Parser.DEC, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};


}



class UnaryExpressionNotPlusMinusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_unaryExpressionNotPlusMinus;
    }

	postfixExpression() {
	    return this.getTypedRuleContext(PostfixExpressionContext,0);
	};

	TILDE() {
	    return this.getToken(Java20Parser.TILDE, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	BANG() {
	    return this.getToken(Java20Parser.BANG, 0);
	};

	castExpression() {
	    return this.getTypedRuleContext(CastExpressionContext,0);
	};

	switchExpression() {
	    return this.getTypedRuleContext(SwitchExpressionContext,0);
	};


}



class CastExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_castExpression;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	primitiveType() {
	    return this.getTypedRuleContext(PrimitiveTypeContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	unaryExpressionNotPlusMinus() {
	    return this.getTypedRuleContext(UnaryExpressionNotPlusMinusContext,0);
	};

	additionalBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditionalBoundContext);
	    } else {
	        return this.getTypedRuleContext(AdditionalBoundContext,i);
	    }
	};

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_multiplicativeExpression;
    }

	unaryExpression() {
	    return this.getTypedRuleContext(UnaryExpressionContext,0);
	};

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	MUL() {
	    return this.getToken(Java20Parser.MUL, 0);
	};

	DIV() {
	    return this.getToken(Java20Parser.DIV, 0);
	};

	MOD() {
	    return this.getToken(Java20Parser.MOD, 0);
	};


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_additiveExpression;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	additiveExpression() {
	    return this.getTypedRuleContext(AdditiveExpressionContext,0);
	};

	ADD() {
	    return this.getToken(Java20Parser.ADD, 0);
	};

	SUB() {
	    return this.getToken(Java20Parser.SUB, 0);
	};


}



class ShiftExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_shiftExpression;
    }

	additiveExpression() {
	    return this.getTypedRuleContext(AdditiveExpressionContext,0);
	};

	shiftExpression() {
	    return this.getTypedRuleContext(ShiftExpressionContext,0);
	};

	LT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.LT);
	    } else {
	        return this.getToken(Java20Parser.LT, i);
	    }
	};


	GT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.GT);
	    } else {
	        return this.getToken(Java20Parser.GT, i);
	    }
	};



}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_relationalExpression;
    }

	shiftExpression() {
	    return this.getTypedRuleContext(ShiftExpressionContext,0);
	};

	relationalExpression() {
	    return this.getTypedRuleContext(RelationalExpressionContext,0);
	};

	LT() {
	    return this.getToken(Java20Parser.LT, 0);
	};

	GT() {
	    return this.getToken(Java20Parser.GT, 0);
	};

	LE() {
	    return this.getToken(Java20Parser.LE, 0);
	};

	GE() {
	    return this.getToken(Java20Parser.GE, 0);
	};

	INSTANCEOF() {
	    return this.getToken(Java20Parser.INSTANCEOF, 0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};


}



class EqualityExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_equalityExpression;
    }

	relationalExpression() {
	    return this.getTypedRuleContext(RelationalExpressionContext,0);
	};

	equalityExpression() {
	    return this.getTypedRuleContext(EqualityExpressionContext,0);
	};

	EQUAL() {
	    return this.getToken(Java20Parser.EQUAL, 0);
	};

	NOTEQUAL() {
	    return this.getToken(Java20Parser.NOTEQUAL, 0);
	};


}



class AndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_andExpression;
    }

	equalityExpression() {
	    return this.getTypedRuleContext(EqualityExpressionContext,0);
	};

	andExpression() {
	    return this.getTypedRuleContext(AndExpressionContext,0);
	};

	BITAND() {
	    return this.getToken(Java20Parser.BITAND, 0);
	};


}



class ExclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_exclusiveOrExpression;
    }

	andExpression() {
	    return this.getTypedRuleContext(AndExpressionContext,0);
	};

	exclusiveOrExpression() {
	    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
	};

	CARET() {
	    return this.getToken(Java20Parser.CARET, 0);
	};


}



class InclusiveOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_inclusiveOrExpression;
    }

	exclusiveOrExpression() {
	    return this.getTypedRuleContext(ExclusiveOrExpressionContext,0);
	};

	inclusiveOrExpression() {
	    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
	};

	BITOR() {
	    return this.getToken(Java20Parser.BITOR, 0);
	};


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_conditionalAndExpression;
    }

	inclusiveOrExpression() {
	    return this.getTypedRuleContext(InclusiveOrExpressionContext,0);
	};

	conditionalAndExpression() {
	    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
	};

	AND() {
	    return this.getToken(Java20Parser.AND, 0);
	};


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression() {
	    return this.getTypedRuleContext(ConditionalAndExpressionContext,0);
	};

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	OR() {
	    return this.getToken(Java20Parser.OR, 0);
	};


}



class ConditionalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_conditionalExpression;
    }

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	QUESTION() {
	    return this.getToken(Java20Parser.QUESTION, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COLON() {
	    return this.getToken(Java20Parser.COLON, 0);
	};

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	lambdaExpression() {
	    return this.getTypedRuleContext(LambdaExpressionContext,0);
	};


}



class AssignmentExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_assignmentExpression;
    }

	conditionalExpression() {
	    return this.getTypedRuleContext(ConditionalExpressionContext,0);
	};

	assignment() {
	    return this.getTypedRuleContext(AssignmentContext,0);
	};


}



class AssignmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_assignment;
    }

	leftHandSide() {
	    return this.getTypedRuleContext(LeftHandSideContext,0);
	};

	assignmentOperator() {
	    return this.getTypedRuleContext(AssignmentOperatorContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};


}



class LeftHandSideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_leftHandSide;
    }

	expressionName() {
	    return this.getTypedRuleContext(ExpressionNameContext,0);
	};

	fieldAccess() {
	    return this.getTypedRuleContext(FieldAccessContext,0);
	};

	arrayAccess() {
	    return this.getTypedRuleContext(ArrayAccessContext,0);
	};


}



class AssignmentOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_assignmentOperator;
    }

	ASSIGN() {
	    return this.getToken(Java20Parser.ASSIGN, 0);
	};

	MUL_ASSIGN() {
	    return this.getToken(Java20Parser.MUL_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(Java20Parser.DIV_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(Java20Parser.MOD_ASSIGN, 0);
	};

	ADD_ASSIGN() {
	    return this.getToken(Java20Parser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(Java20Parser.SUB_ASSIGN, 0);
	};

	LSHIFT_ASSIGN() {
	    return this.getToken(Java20Parser.LSHIFT_ASSIGN, 0);
	};

	RSHIFT_ASSIGN() {
	    return this.getToken(Java20Parser.RSHIFT_ASSIGN, 0);
	};

	URSHIFT_ASSIGN() {
	    return this.getToken(Java20Parser.URSHIFT_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(Java20Parser.AND_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(Java20Parser.XOR_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(Java20Parser.OR_ASSIGN, 0);
	};


}



class LambdaExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaExpression;
    }

	lambdaParameters() {
	    return this.getTypedRuleContext(LambdaParametersContext,0);
	};

	ARROW() {
	    return this.getToken(Java20Parser.ARROW, 0);
	};

	lambdaBody() {
	    return this.getTypedRuleContext(LambdaBodyContext,0);
	};


}



class LambdaParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaParameters;
    }

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	lambdaParameterList() {
	    return this.getTypedRuleContext(LambdaParameterListContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};


}



class LambdaParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaParameterList;
    }

	lambdaParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LambdaParameterContext);
	    } else {
	        return this.getTypedRuleContext(LambdaParameterContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Java20Parser.COMMA);
	    } else {
	        return this.getToken(Java20Parser.COMMA, i);
	    }
	};


	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};


}



class LambdaParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaParameter;
    }

	lambdaParameterType() {
	    return this.getTypedRuleContext(LambdaParameterTypeContext,0);
	};

	variableDeclaratorId() {
	    return this.getTypedRuleContext(VariableDeclaratorIdContext,0);
	};

	variableModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableModifierContext);
	    } else {
	        return this.getTypedRuleContext(VariableModifierContext,i);
	    }
	};

	variableArityParameter() {
	    return this.getTypedRuleContext(VariableArityParameterContext,0);
	};


}



class LambdaParameterTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaParameterType;
    }

	unannType() {
	    return this.getTypedRuleContext(UnannTypeContext,0);
	};

	VAR() {
	    return this.getToken(Java20Parser.VAR, 0);
	};


}



class LambdaBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_lambdaBody;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};


}



class SwitchExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_switchExpression;
    }

	SWITCH() {
	    return this.getToken(Java20Parser.SWITCH, 0);
	};

	LPAREN() {
	    return this.getToken(Java20Parser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(Java20Parser.RPAREN, 0);
	};

	switchBlock() {
	    return this.getTypedRuleContext(SwitchBlockContext,0);
	};


}



class ConstantExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Java20Parser.RULE_constantExpression;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};


}




Java20Parser.Start_Context = Start_Context; 
Java20Parser.IdentifierContext = IdentifierContext; 
Java20Parser.TypeIdentifierContext = TypeIdentifierContext; 
Java20Parser.UnqualifiedMethodIdentifierContext = UnqualifiedMethodIdentifierContext; 
Java20Parser.ContextualKeywordContext = ContextualKeywordContext; 
Java20Parser.ContextualKeywordMinusForTypeIdentifierContext = ContextualKeywordMinusForTypeIdentifierContext; 
Java20Parser.ContextualKeywordMinusForUnqualifiedMethodIdentifierContext = ContextualKeywordMinusForUnqualifiedMethodIdentifierContext; 
Java20Parser.LiteralContext = LiteralContext; 
Java20Parser.PrimitiveTypeContext = PrimitiveTypeContext; 
Java20Parser.NumericTypeContext = NumericTypeContext; 
Java20Parser.IntegralTypeContext = IntegralTypeContext; 
Java20Parser.FloatingPointTypeContext = FloatingPointTypeContext; 
Java20Parser.ReferenceTypeContext = ReferenceTypeContext; 
Java20Parser.CoitContext = CoitContext; 
Java20Parser.ClassOrInterfaceTypeContext = ClassOrInterfaceTypeContext; 
Java20Parser.ClassTypeContext = ClassTypeContext; 
Java20Parser.InterfaceTypeContext = InterfaceTypeContext; 
Java20Parser.TypeVariableContext = TypeVariableContext; 
Java20Parser.ArrayTypeContext = ArrayTypeContext; 
Java20Parser.DimsContext = DimsContext; 
Java20Parser.TypeParameterContext = TypeParameterContext; 
Java20Parser.TypeParameterModifierContext = TypeParameterModifierContext; 
Java20Parser.TypeBoundContext = TypeBoundContext; 
Java20Parser.AdditionalBoundContext = AdditionalBoundContext; 
Java20Parser.TypeArgumentsContext = TypeArgumentsContext; 
Java20Parser.TypeArgumentListContext = TypeArgumentListContext; 
Java20Parser.TypeArgumentContext = TypeArgumentContext; 
Java20Parser.WildcardContext = WildcardContext; 
Java20Parser.WildcardBoundsContext = WildcardBoundsContext; 
Java20Parser.ModuleNameContext = ModuleNameContext; 
Java20Parser.PackageNameContext = PackageNameContext; 
Java20Parser.TypeNameContext = TypeNameContext; 
Java20Parser.PackageOrTypeNameContext = PackageOrTypeNameContext; 
Java20Parser.ExpressionNameContext = ExpressionNameContext; 
Java20Parser.MethodNameContext = MethodNameContext; 
Java20Parser.AmbiguousNameContext = AmbiguousNameContext; 
Java20Parser.CompilationUnitContext = CompilationUnitContext; 
Java20Parser.OrdinaryCompilationUnitContext = OrdinaryCompilationUnitContext; 
Java20Parser.ModularCompilationUnitContext = ModularCompilationUnitContext; 
Java20Parser.PackageDeclarationContext = PackageDeclarationContext; 
Java20Parser.PackageModifierContext = PackageModifierContext; 
Java20Parser.ImportDeclarationContext = ImportDeclarationContext; 
Java20Parser.SingleTypeImportDeclarationContext = SingleTypeImportDeclarationContext; 
Java20Parser.TypeImportOnDemandDeclarationContext = TypeImportOnDemandDeclarationContext; 
Java20Parser.SingleStaticImportDeclarationContext = SingleStaticImportDeclarationContext; 
Java20Parser.StaticImportOnDemandDeclarationContext = StaticImportOnDemandDeclarationContext; 
Java20Parser.TopLevelClassOrInterfaceDeclarationContext = TopLevelClassOrInterfaceDeclarationContext; 
Java20Parser.ModuleDeclarationContext = ModuleDeclarationContext; 
Java20Parser.ModuleDirectiveContext = ModuleDirectiveContext; 
Java20Parser.RequiresModifierContext = RequiresModifierContext; 
Java20Parser.ClassDeclarationContext = ClassDeclarationContext; 
Java20Parser.NormalClassDeclarationContext = NormalClassDeclarationContext; 
Java20Parser.ClassModifierContext = ClassModifierContext; 
Java20Parser.TypeParametersContext = TypeParametersContext; 
Java20Parser.TypeParameterListContext = TypeParameterListContext; 
Java20Parser.ClassExtendsContext = ClassExtendsContext; 
Java20Parser.ClassImplementsContext = ClassImplementsContext; 
Java20Parser.InterfaceTypeListContext = InterfaceTypeListContext; 
Java20Parser.ClassPermitsContext = ClassPermitsContext; 
Java20Parser.ClassBodyContext = ClassBodyContext; 
Java20Parser.ClassBodyDeclarationContext = ClassBodyDeclarationContext; 
Java20Parser.ClassMemberDeclarationContext = ClassMemberDeclarationContext; 
Java20Parser.FieldDeclarationContext = FieldDeclarationContext; 
Java20Parser.FieldModifierContext = FieldModifierContext; 
Java20Parser.VariableDeclaratorListContext = VariableDeclaratorListContext; 
Java20Parser.VariableDeclaratorContext = VariableDeclaratorContext; 
Java20Parser.VariableDeclaratorIdContext = VariableDeclaratorIdContext; 
Java20Parser.VariableInitializerContext = VariableInitializerContext; 
Java20Parser.UnannTypeContext = UnannTypeContext; 
Java20Parser.UnannPrimitiveTypeContext = UnannPrimitiveTypeContext; 
Java20Parser.UnannReferenceTypeContext = UnannReferenceTypeContext; 
Java20Parser.UnannClassOrInterfaceTypeContext = UnannClassOrInterfaceTypeContext; 
Java20Parser.UCOITContext = UCOITContext; 
Java20Parser.UnannClassTypeContext = UnannClassTypeContext; 
Java20Parser.UnannInterfaceTypeContext = UnannInterfaceTypeContext; 
Java20Parser.UnannTypeVariableContext = UnannTypeVariableContext; 
Java20Parser.UnannArrayTypeContext = UnannArrayTypeContext; 
Java20Parser.MethodDeclarationContext = MethodDeclarationContext; 
Java20Parser.MethodModifierContext = MethodModifierContext; 
Java20Parser.MethodHeaderContext = MethodHeaderContext; 
Java20Parser.ResultContext = ResultContext; 
Java20Parser.MethodDeclaratorContext = MethodDeclaratorContext; 
Java20Parser.ReceiverParameterContext = ReceiverParameterContext; 
Java20Parser.FormalParameterListContext = FormalParameterListContext; 
Java20Parser.FormalParameterContext = FormalParameterContext; 
Java20Parser.VariableArityParameterContext = VariableArityParameterContext; 
Java20Parser.VariableModifierContext = VariableModifierContext; 
Java20Parser.ThrowsTContext = ThrowsTContext; 
Java20Parser.ExceptionTypeListContext = ExceptionTypeListContext; 
Java20Parser.ExceptionTypeContext = ExceptionTypeContext; 
Java20Parser.MethodBodyContext = MethodBodyContext; 
Java20Parser.InstanceInitializerContext = InstanceInitializerContext; 
Java20Parser.StaticInitializerContext = StaticInitializerContext; 
Java20Parser.ConstructorDeclarationContext = ConstructorDeclarationContext; 
Java20Parser.ConstructorModifierContext = ConstructorModifierContext; 
Java20Parser.ConstructorDeclaratorContext = ConstructorDeclaratorContext; 
Java20Parser.SimpleTypeNameContext = SimpleTypeNameContext; 
Java20Parser.ConstructorBodyContext = ConstructorBodyContext; 
Java20Parser.ExplicitConstructorInvocationContext = ExplicitConstructorInvocationContext; 
Java20Parser.EnumDeclarationContext = EnumDeclarationContext; 
Java20Parser.EnumBodyContext = EnumBodyContext; 
Java20Parser.EnumConstantListContext = EnumConstantListContext; 
Java20Parser.EnumConstantContext = EnumConstantContext; 
Java20Parser.EnumConstantModifierContext = EnumConstantModifierContext; 
Java20Parser.EnumBodyDeclarationsContext = EnumBodyDeclarationsContext; 
Java20Parser.RecordDeclarationContext = RecordDeclarationContext; 
Java20Parser.RecordHeaderContext = RecordHeaderContext; 
Java20Parser.RecordComponentListContext = RecordComponentListContext; 
Java20Parser.RecordComponentContext = RecordComponentContext; 
Java20Parser.VariableArityRecordComponentContext = VariableArityRecordComponentContext; 
Java20Parser.RecordComponentModifierContext = RecordComponentModifierContext; 
Java20Parser.RecordBodyContext = RecordBodyContext; 
Java20Parser.RecordBodyDeclarationContext = RecordBodyDeclarationContext; 
Java20Parser.CompactConstructorDeclarationContext = CompactConstructorDeclarationContext; 
Java20Parser.InterfaceDeclarationContext = InterfaceDeclarationContext; 
Java20Parser.NormalInterfaceDeclarationContext = NormalInterfaceDeclarationContext; 
Java20Parser.InterfaceModifierContext = InterfaceModifierContext; 
Java20Parser.InterfaceExtendsContext = InterfaceExtendsContext; 
Java20Parser.InterfacePermitsContext = InterfacePermitsContext; 
Java20Parser.InterfaceBodyContext = InterfaceBodyContext; 
Java20Parser.InterfaceMemberDeclarationContext = InterfaceMemberDeclarationContext; 
Java20Parser.ConstantDeclarationContext = ConstantDeclarationContext; 
Java20Parser.ConstantModifierContext = ConstantModifierContext; 
Java20Parser.InterfaceMethodDeclarationContext = InterfaceMethodDeclarationContext; 
Java20Parser.InterfaceMethodModifierContext = InterfaceMethodModifierContext; 
Java20Parser.AnnotationInterfaceDeclarationContext = AnnotationInterfaceDeclarationContext; 
Java20Parser.AnnotationInterfaceBodyContext = AnnotationInterfaceBodyContext; 
Java20Parser.AnnotationInterfaceMemberDeclarationContext = AnnotationInterfaceMemberDeclarationContext; 
Java20Parser.AnnotationInterfaceElementDeclarationContext = AnnotationInterfaceElementDeclarationContext; 
Java20Parser.AnnotationInterfaceElementModifierContext = AnnotationInterfaceElementModifierContext; 
Java20Parser.DefaultValueContext = DefaultValueContext; 
Java20Parser.AnnotationContext = AnnotationContext; 
Java20Parser.NormalAnnotationContext = NormalAnnotationContext; 
Java20Parser.ElementValuePairListContext = ElementValuePairListContext; 
Java20Parser.ElementValuePairContext = ElementValuePairContext; 
Java20Parser.ElementValueContext = ElementValueContext; 
Java20Parser.ElementValueArrayInitializerContext = ElementValueArrayInitializerContext; 
Java20Parser.ElementValueListContext = ElementValueListContext; 
Java20Parser.MarkerAnnotationContext = MarkerAnnotationContext; 
Java20Parser.SingleElementAnnotationContext = SingleElementAnnotationContext; 
Java20Parser.ArrayInitializerContext = ArrayInitializerContext; 
Java20Parser.VariableInitializerListContext = VariableInitializerListContext; 
Java20Parser.BlockContext = BlockContext; 
Java20Parser.BlockStatementsContext = BlockStatementsContext; 
Java20Parser.BlockStatementContext = BlockStatementContext; 
Java20Parser.LocalClassOrInterfaceDeclarationContext = LocalClassOrInterfaceDeclarationContext; 
Java20Parser.LocalVariableDeclarationContext = LocalVariableDeclarationContext; 
Java20Parser.LocalVariableTypeContext = LocalVariableTypeContext; 
Java20Parser.LocalVariableDeclarationStatementContext = LocalVariableDeclarationStatementContext; 
Java20Parser.StatementContext = StatementContext; 
Java20Parser.StatementNoShortIfContext = StatementNoShortIfContext; 
Java20Parser.StatementWithoutTrailingSubstatementContext = StatementWithoutTrailingSubstatementContext; 
Java20Parser.EmptyStatement_Context = EmptyStatement_Context; 
Java20Parser.LabeledStatementContext = LabeledStatementContext; 
Java20Parser.LabeledStatementNoShortIfContext = LabeledStatementNoShortIfContext; 
Java20Parser.ExpressionStatementContext = ExpressionStatementContext; 
Java20Parser.StatementExpressionContext = StatementExpressionContext; 
Java20Parser.IfThenStatementContext = IfThenStatementContext; 
Java20Parser.IfThenElseStatementContext = IfThenElseStatementContext; 
Java20Parser.IfThenElseStatementNoShortIfContext = IfThenElseStatementNoShortIfContext; 
Java20Parser.AssertStatementContext = AssertStatementContext; 
Java20Parser.SwitchStatementContext = SwitchStatementContext; 
Java20Parser.SwitchBlockContext = SwitchBlockContext; 
Java20Parser.SwitchRuleContext = SwitchRuleContext; 
Java20Parser.SwitchBlockStatementGroupContext = SwitchBlockStatementGroupContext; 
Java20Parser.SwitchLabelContext = SwitchLabelContext; 
Java20Parser.CaseConstantContext = CaseConstantContext; 
Java20Parser.WhileStatementContext = WhileStatementContext; 
Java20Parser.WhileStatementNoShortIfContext = WhileStatementNoShortIfContext; 
Java20Parser.DoStatementContext = DoStatementContext; 
Java20Parser.ForStatementContext = ForStatementContext; 
Java20Parser.ForStatementNoShortIfContext = ForStatementNoShortIfContext; 
Java20Parser.BasicForStatementContext = BasicForStatementContext; 
Java20Parser.BasicForStatementNoShortIfContext = BasicForStatementNoShortIfContext; 
Java20Parser.ForInitContext = ForInitContext; 
Java20Parser.ForUpdateContext = ForUpdateContext; 
Java20Parser.StatementExpressionListContext = StatementExpressionListContext; 
Java20Parser.EnhancedForStatementContext = EnhancedForStatementContext; 
Java20Parser.EnhancedForStatementNoShortIfContext = EnhancedForStatementNoShortIfContext; 
Java20Parser.BreakStatementContext = BreakStatementContext; 
Java20Parser.ContinueStatementContext = ContinueStatementContext; 
Java20Parser.ReturnStatementContext = ReturnStatementContext; 
Java20Parser.ThrowStatementContext = ThrowStatementContext; 
Java20Parser.SynchronizedStatementContext = SynchronizedStatementContext; 
Java20Parser.TryStatementContext = TryStatementContext; 
Java20Parser.CatchesContext = CatchesContext; 
Java20Parser.CatchClauseContext = CatchClauseContext; 
Java20Parser.CatchFormalParameterContext = CatchFormalParameterContext; 
Java20Parser.CatchTypeContext = CatchTypeContext; 
Java20Parser.FinallyBlockContext = FinallyBlockContext; 
Java20Parser.TryWithResourcesStatementContext = TryWithResourcesStatementContext; 
Java20Parser.ResourceSpecificationContext = ResourceSpecificationContext; 
Java20Parser.ResourceListContext = ResourceListContext; 
Java20Parser.ResourceContext = ResourceContext; 
Java20Parser.VariableAccessContext = VariableAccessContext; 
Java20Parser.YieldStatementContext = YieldStatementContext; 
Java20Parser.PatternContext = PatternContext; 
Java20Parser.TypePatternContext = TypePatternContext; 
Java20Parser.ExpressionContext = ExpressionContext; 
Java20Parser.PrimaryContext = PrimaryContext; 
Java20Parser.PrimaryNoNewArrayContext = PrimaryNoNewArrayContext; 
Java20Parser.PNNAContext = PNNAContext; 
Java20Parser.ClassLiteralContext = ClassLiteralContext; 
Java20Parser.ClassInstanceCreationExpressionContext = ClassInstanceCreationExpressionContext; 
Java20Parser.UnqualifiedClassInstanceCreationExpressionContext = UnqualifiedClassInstanceCreationExpressionContext; 
Java20Parser.ClassOrInterfaceTypeToInstantiateContext = ClassOrInterfaceTypeToInstantiateContext; 
Java20Parser.TypeArgumentsOrDiamondContext = TypeArgumentsOrDiamondContext; 
Java20Parser.ArrayCreationExpressionContext = ArrayCreationExpressionContext; 
Java20Parser.ArrayCreationExpressionWithoutInitializerContext = ArrayCreationExpressionWithoutInitializerContext; 
Java20Parser.ArrayCreationExpressionWithInitializerContext = ArrayCreationExpressionWithInitializerContext; 
Java20Parser.DimExprsContext = DimExprsContext; 
Java20Parser.DimExprContext = DimExprContext; 
Java20Parser.ArrayAccessContext = ArrayAccessContext; 
Java20Parser.FieldAccessContext = FieldAccessContext; 
Java20Parser.MethodInvocationContext = MethodInvocationContext; 
Java20Parser.ArgumentListContext = ArgumentListContext; 
Java20Parser.MethodReferenceContext = MethodReferenceContext; 
Java20Parser.PostfixExpressionContext = PostfixExpressionContext; 
Java20Parser.PfEContext = PfEContext; 
Java20Parser.PostIncrementExpressionContext = PostIncrementExpressionContext; 
Java20Parser.PostDecrementExpressionContext = PostDecrementExpressionContext; 
Java20Parser.UnaryExpressionContext = UnaryExpressionContext; 
Java20Parser.PreIncrementExpressionContext = PreIncrementExpressionContext; 
Java20Parser.PreDecrementExpressionContext = PreDecrementExpressionContext; 
Java20Parser.UnaryExpressionNotPlusMinusContext = UnaryExpressionNotPlusMinusContext; 
Java20Parser.CastExpressionContext = CastExpressionContext; 
Java20Parser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
Java20Parser.AdditiveExpressionContext = AdditiveExpressionContext; 
Java20Parser.ShiftExpressionContext = ShiftExpressionContext; 
Java20Parser.RelationalExpressionContext = RelationalExpressionContext; 
Java20Parser.EqualityExpressionContext = EqualityExpressionContext; 
Java20Parser.AndExpressionContext = AndExpressionContext; 
Java20Parser.ExclusiveOrExpressionContext = ExclusiveOrExpressionContext; 
Java20Parser.InclusiveOrExpressionContext = InclusiveOrExpressionContext; 
Java20Parser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
Java20Parser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
Java20Parser.ConditionalExpressionContext = ConditionalExpressionContext; 
Java20Parser.AssignmentExpressionContext = AssignmentExpressionContext; 
Java20Parser.AssignmentContext = AssignmentContext; 
Java20Parser.LeftHandSideContext = LeftHandSideContext; 
Java20Parser.AssignmentOperatorContext = AssignmentOperatorContext; 
Java20Parser.LambdaExpressionContext = LambdaExpressionContext; 
Java20Parser.LambdaParametersContext = LambdaParametersContext; 
Java20Parser.LambdaParameterListContext = LambdaParameterListContext; 
Java20Parser.LambdaParameterContext = LambdaParameterContext; 
Java20Parser.LambdaParameterTypeContext = LambdaParameterTypeContext; 
Java20Parser.LambdaBodyContext = LambdaBodyContext; 
Java20Parser.SwitchExpressionContext = SwitchExpressionContext; 
Java20Parser.ConstantExpressionContext = ConstantExpressionContext; 
